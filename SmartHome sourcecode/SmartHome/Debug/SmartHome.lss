
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000284c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002ec  00800060  0000284c  000028e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004f  0080034c  0080034c  00002bcc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002bcc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f15  00000000  00000000  00002fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a1  00000000  00000000  00006ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000224c  00000000  00000000  00008092  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c4  00000000  00000000  0000a2e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c40  00000000  00000000  0000a9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013ca  00000000  00000000  0000b5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000c9ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__ctors_end>
       4:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
       8:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
       c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      10:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      14:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      18:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      1c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      20:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      24:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      28:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__vector_10>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      30:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      34:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__vector_13>
      38:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      3c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      40:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      44:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      48:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      4c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      50:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      54:	ef 01       	movw	r28, r30
      56:	ff 01       	movw	r30, r30
      58:	0f 02       	muls	r16, r31
      5a:	15 02       	muls	r17, r21
      5c:	1b 02       	muls	r17, r27
      5e:	24 02       	muls	r18, r20
      60:	2d 02       	muls	r18, r29
      62:	36 02       	muls	r19, r22
      64:	3f 02       	muls	r19, r31
      66:	02 03       	mulsu	r16, r18
      68:	02 03       	mulsu	r16, r18
      6a:	02 03       	mulsu	r16, r18
      6c:	02 03       	mulsu	r16, r18
      6e:	02 03       	mulsu	r16, r18
      70:	02 03       	mulsu	r16, r18
      72:	02 03       	mulsu	r16, r18
      74:	48 02       	muls	r20, r24
      76:	51 02       	muls	r21, r17
      78:	5a 02       	muls	r21, r26
      7a:	63 02       	muls	r22, r19
      7c:	6c 02       	muls	r22, r28
      7e:	75 02       	muls	r23, r21
      80:	8a 02       	muls	r24, r26
      82:	9a 02       	muls	r25, r26
      84:	a3 02       	muls	r26, r19
      86:	ac 02       	muls	r26, r28
      88:	b5 02       	muls	r27, r21
      8a:	be 02       	muls	r27, r30
      8c:	c7 02       	muls	r28, r23
      8e:	d0 02       	muls	r29, r16
      90:	d9 02       	muls	r29, r25
      92:	02 03       	mulsu	r16, r18
      94:	02 03       	mulsu	r16, r18
      96:	02 03       	mulsu	r16, r18
      98:	02 03       	mulsu	r16, r18
      9a:	02 03       	mulsu	r16, r18
      9c:	02 03       	mulsu	r16, r18
      9e:	02 03       	mulsu	r16, r18
      a0:	e2 02       	muls	r30, r18
      a2:	eb 02       	muls	r30, r27
      a4:	f4 02       	muls	r31, r20

000000a6 <__trampolines_end>:
      a6:	6e 61       	ori	r22, 0x1E	; 30
      a8:	6e 00       	.word	0x006e	; ????

000000aa <__c.2332>:
      aa:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ba:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      ca:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      da:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ea:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      fa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     10a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     11a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     12a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     13a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     14a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     15a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     16a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     17a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     18a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     19a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf e5       	ldi	r28, 0x5F	; 95
     1ae:	d8 e0       	ldi	r29, 0x08	; 8
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	13 e0       	ldi	r17, 0x03	; 3
     1b6:	a0 e6       	ldi	r26, 0x60	; 96
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	ec e4       	ldi	r30, 0x4C	; 76
     1bc:	f8 e2       	ldi	r31, 0x28	; 40
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <__do_copy_data+0x10>
     1c0:	05 90       	lpm	r0, Z+
     1c2:	0d 92       	st	X+, r0
     1c4:	ac 34       	cpi	r26, 0x4C	; 76
     1c6:	b1 07       	cpc	r27, r17
     1c8:	d9 f7       	brne	.-10     	; 0x1c0 <__do_copy_data+0xc>

000001ca <__do_clear_bss>:
     1ca:	23 e0       	ldi	r18, 0x03	; 3
     1cc:	ac e4       	ldi	r26, 0x4C	; 76
     1ce:	b3 e0       	ldi	r27, 0x03	; 3
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <.do_clear_bss_start>

000001d2 <.do_clear_bss_loop>:
     1d2:	1d 92       	st	X+, r1

000001d4 <.do_clear_bss_start>:
     1d4:	ab 39       	cpi	r26, 0x9B	; 155
     1d6:	b2 07       	cpc	r27, r18
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <.do_clear_bss_loop>
     1da:	0e 94 b8 03 	call	0x770	; 0x770 <main>
     1de:	0c 94 24 14 	jmp	0x2848	; 0x2848 <_exit>

000001e2 <__bad_interrupt>:
     1e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e6 <A_UartRxInerrupt_Task>:
	H_Ext_Eeprom_MultiByteWrite(id/*pointing to next page to write in*/,24, Local_u8_Password );
}
u8 A_RetreiveData(u8 *Local_u8_User) /*User Name, Password*/
{
	H_Ext_Eeprom_MultiByteWrite(Local_u8_User[0], 24, password);
}
     1e6:	cf 93       	push	r28
     1e8:	c0 91 72 03 	lds	r28, 0x0372	; 0x800372 <flag>
     1ec:	c5 ff       	sbrs	r28, 5
     1ee:	06 c0       	rjmp	.+12     	; 0x1fc <A_UartRxInerrupt_Task+0x16>
     1f0:	c0 ff       	sbrs	r28, 0
     1f2:	04 c0       	rjmp	.+8      	; 0x1fc <A_UartRxInerrupt_Task+0x16>
     1f4:	8c b1       	in	r24, 0x0c	; 12
     1f6:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <control_flag>
     1fa:	0e c0       	rjmp	.+28     	; 0x218 <A_UartRxInerrupt_Task+0x32>
     1fc:	cc 23       	and	r28, r28
     1fe:	64 f4       	brge	.+24     	; 0x218 <A_UartRxInerrupt_Task+0x32>
     200:	8c b1       	in	r24, 0x0c	; 12
     202:	8a 30       	cpi	r24, 0x0A	; 10
     204:	11 f0       	breq	.+4      	; 0x20a <A_UartRxInerrupt_Task+0x24>
     206:	8d 30       	cpi	r24, 0x0D	; 13
     208:	29 f4       	brne	.+10     	; 0x214 <A_UartRxInerrupt_Task+0x2e>
     20a:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <temp.2102>
     20e:	90 53       	subi	r25, 0x30	; 48
     210:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
     214:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <temp.2102>
     218:	c4 ff       	sbrs	r28, 4
     21a:	13 c0       	rjmp	.+38     	; 0x242 <A_UartRxInerrupt_Task+0x5c>
     21c:	8c b1       	in	r24, 0x0c	; 12
     21e:	81 33       	cpi	r24, 0x31	; 49
     220:	31 f4       	brne	.+12     	; 0x22e <A_UartRxInerrupt_Task+0x48>
     222:	c4 60       	ori	r28, 0x04	; 4
     224:	cf 7e       	andi	r28, 0xEF	; 239
     226:	cb 60       	ori	r28, 0x0B	; 11
     228:	c0 93 72 03 	sts	0x0372, r28	; 0x800372 <flag>
     22c:	91 c0       	rjmp	.+290    	; 0x350 <A_UartRxInerrupt_Task+0x16a>
     22e:	82 33       	cpi	r24, 0x32	; 50
     230:	09 f0       	breq	.+2      	; 0x234 <A_UartRxInerrupt_Task+0x4e>
     232:	8e c0       	rjmp	.+284    	; 0x350 <A_UartRxInerrupt_Task+0x16a>
     234:	c4 60       	ori	r28, 0x04	; 4
     236:	cf 7e       	andi	r28, 0xEF	; 239
     238:	ca 60       	ori	r28, 0x0A	; 10
     23a:	ce 7f       	andi	r28, 0xFE	; 254
     23c:	c0 93 72 03 	sts	0x0372, r28	; 0x800372 <flag>
     240:	87 c0       	rjmp	.+270    	; 0x350 <A_UartRxInerrupt_Task+0x16a>
     242:	8c 2f       	mov	r24, r28
     244:	88 70       	andi	r24, 0x08	; 8
     246:	c3 ff       	sbrs	r28, 3
     248:	3f c0       	rjmp	.+126    	; 0x2c8 <A_UartRxInerrupt_Task+0xe2>
     24a:	80 e1       	ldi	r24, 0x10	; 16
     24c:	e3 e8       	ldi	r30, 0x83	; 131
     24e:	f3 e0       	ldi	r31, 0x03	; 3
     250:	df 01       	movw	r26, r30
     252:	1d 92       	st	X+, r1
     254:	8a 95       	dec	r24
     256:	e9 f7       	brne	.-6      	; 0x252 <A_UartRxInerrupt_Task+0x6c>
     258:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <Local_u8_UserCnt.2098>
     25c:	8f 30       	cpi	r24, 0x0F	; 15
     25e:	08 f0       	brcs	.+2      	; 0x262 <A_UartRxInerrupt_Task+0x7c>
     260:	77 c0       	rjmp	.+238    	; 0x350 <A_UartRxInerrupt_Task+0x16a>
     262:	8c b1       	in	r24, 0x0c	; 12
     264:	88 23       	and	r24, r24
     266:	21 f0       	breq	.+8      	; 0x270 <A_UartRxInerrupt_Task+0x8a>
     268:	8a 30       	cpi	r24, 0x0A	; 10
     26a:	11 f0       	breq	.+4      	; 0x270 <A_UartRxInerrupt_Task+0x8a>
     26c:	8d 30       	cpi	r24, 0x0D	; 13
     26e:	01 f5       	brne	.+64     	; 0x2b0 <A_UartRxInerrupt_Task+0xca>
     270:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <Local_u8_UserCnt.2098>
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	e3 5a       	subi	r30, 0xA3	; 163
     278:	fc 4f       	sbci	r31, 0xFC	; 252
     27a:	10 82       	st	Z, r1
     27c:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <Local_u8_UserCnt.2098>
     280:	6d e5       	ldi	r22, 0x5D	; 93
     282:	73 e0       	ldi	r23, 0x03	; 3
     284:	83 e8       	ldi	r24, 0x83	; 131
     286:	93 e0       	ldi	r25, 0x03	; 3
     288:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <strcat>
     28c:	80 e1       	ldi	r24, 0x10	; 16
     28e:	ed e5       	ldi	r30, 0x5D	; 93
     290:	f3 e0       	ldi	r31, 0x03	; 3
     292:	df 01       	movw	r26, r30
     294:	98 2f       	mov	r25, r24
     296:	1d 92       	st	X+, r1
     298:	9a 95       	dec	r25
     29a:	e9 f7       	brne	.-6      	; 0x296 <A_UartRxInerrupt_Task+0xb0>
     29c:	ed e4       	ldi	r30, 0x4D	; 77
     29e:	f3 e0       	ldi	r31, 0x03	; 3
     2a0:	df 01       	movw	r26, r30
     2a2:	1d 92       	st	X+, r1
     2a4:	8a 95       	dec	r24
     2a6:	e9 f7       	brne	.-6      	; 0x2a2 <A_UartRxInerrupt_Task+0xbc>
     2a8:	c7 7f       	andi	r28, 0xF7	; 247
     2aa:	c0 93 72 03 	sts	0x0372, r28	; 0x800372 <flag>
     2ae:	50 c0       	rjmp	.+160    	; 0x350 <A_UartRxInerrupt_Task+0x16a>
     2b0:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <Local_u8_UserCnt.2098>
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	e3 5a       	subi	r30, 0xA3	; 163
     2b8:	fc 4f       	sbci	r31, 0xFC	; 252
     2ba:	80 83       	st	Z, r24
     2bc:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <Local_u8_UserCnt.2098>
     2c0:	8f 5f       	subi	r24, 0xFF	; 255
     2c2:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <Local_u8_UserCnt.2098>
     2c6:	44 c0       	rjmp	.+136    	; 0x350 <A_UartRxInerrupt_Task+0x16a>
     2c8:	81 11       	cpse	r24, r1
     2ca:	42 c0       	rjmp	.+132    	; 0x350 <A_UartRxInerrupt_Task+0x16a>
     2cc:	80 e1       	ldi	r24, 0x10	; 16
     2ce:	e3 e7       	ldi	r30, 0x73	; 115
     2d0:	f3 e0       	ldi	r31, 0x03	; 3
     2d2:	df 01       	movw	r26, r30
     2d4:	1d 92       	st	X+, r1
     2d6:	8a 95       	dec	r24
     2d8:	e9 f7       	brne	.-6      	; 0x2d4 <A_UartRxInerrupt_Task+0xee>
     2da:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <__data_end>
     2de:	8f 30       	cpi	r24, 0x0F	; 15
     2e0:	b8 f5       	brcc	.+110    	; 0x350 <A_UartRxInerrupt_Task+0x16a>
     2e2:	8c b1       	in	r24, 0x0c	; 12
     2e4:	88 23       	and	r24, r24
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <A_UartRxInerrupt_Task+0x10a>
     2e8:	8a 30       	cpi	r24, 0x0A	; 10
     2ea:	11 f0       	breq	.+4      	; 0x2f0 <A_UartRxInerrupt_Task+0x10a>
     2ec:	8d 30       	cpi	r24, 0x0D	; 13
     2ee:	29 f5       	brne	.+74     	; 0x33a <A_UartRxInerrupt_Task+0x154>
     2f0:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <__data_end>
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	e3 5b       	subi	r30, 0xB3	; 179
     2f8:	fc 4f       	sbci	r31, 0xFC	; 252
     2fa:	10 82       	st	Z, r1
     2fc:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <__data_end>
     300:	6d e4       	ldi	r22, 0x4D	; 77
     302:	73 e0       	ldi	r23, 0x03	; 3
     304:	83 e7       	ldi	r24, 0x73	; 115
     306:	93 e0       	ldi	r25, 0x03	; 3
     308:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <strcat>
     30c:	80 e1       	ldi	r24, 0x10	; 16
     30e:	ed e4       	ldi	r30, 0x4D	; 77
     310:	f3 e0       	ldi	r31, 0x03	; 3
     312:	df 01       	movw	r26, r30
     314:	98 2f       	mov	r25, r24
     316:	1d 92       	st	X+, r1
     318:	9a 95       	dec	r25
     31a:	e9 f7       	brne	.-6      	; 0x316 <A_UartRxInerrupt_Task+0x130>
     31c:	ed e5       	ldi	r30, 0x5D	; 93
     31e:	f3 e0       	ldi	r31, 0x03	; 3
     320:	df 01       	movw	r26, r30
     322:	1d 92       	st	X+, r1
     324:	8a 95       	dec	r24
     326:	e9 f7       	brne	.-6      	; 0x322 <A_UartRxInerrupt_Task+0x13c>
     328:	c8 60       	ori	r28, 0x08	; 8
     32a:	c0 93 72 03 	sts	0x0372, r28	; 0x800372 <flag>
     32e:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <A_Cnt>
     332:	8f 5f       	subi	r24, 0xFF	; 255
     334:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <A_Cnt>
     338:	0b c0       	rjmp	.+22     	; 0x350 <A_UartRxInerrupt_Task+0x16a>
     33a:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <__data_end>
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	e3 5b       	subi	r30, 0xB3	; 179
     342:	fc 4f       	sbci	r31, 0xFC	; 252
     344:	80 83       	st	Z, r24
     346:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <__data_end>
     34a:	8f 5f       	subi	r24, 0xFF	; 255
     34c:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <__data_end>
     350:	cf 91       	pop	r28
     352:	08 95       	ret

00000354 <A_TimerCtc_Interrupt_Task>:
     354:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     358:	85 ff       	sbrs	r24, 5
     35a:	09 c0       	rjmp	.+18     	; 0x36e <A_TimerCtc_Interrupt_Task+0x1a>
     35c:	80 fd       	sbrc	r24, 0
     35e:	07 c0       	rjmp	.+14     	; 0x36e <A_TimerCtc_Interrupt_Task+0x1a>
     360:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <control_flag>
     364:	0e 94 14 08 	call	0x1028	; 0x1028 <H_KeyPad_Read>
     368:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <control_flag>
     36c:	19 c0       	rjmp	.+50     	; 0x3a0 <A_TimerCtc_Interrupt_Task+0x4c>
     36e:	84 ff       	sbrs	r24, 4
     370:	17 c0       	rjmp	.+46     	; 0x3a0 <A_TimerCtc_Interrupt_Task+0x4c>
     372:	0e 94 14 08 	call	0x1028	; 0x1028 <H_KeyPad_Read>
     376:	81 33       	cpi	r24, 0x31	; 49
     378:	41 f4       	brne	.+16     	; 0x38a <A_TimerCtc_Interrupt_Task+0x36>
     37a:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     37e:	84 60       	ori	r24, 0x04	; 4
     380:	8f 7e       	andi	r24, 0xEF	; 239
     382:	8b 60       	ori	r24, 0x0B	; 11
     384:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <flag>
     388:	0b c0       	rjmp	.+22     	; 0x3a0 <A_TimerCtc_Interrupt_Task+0x4c>
     38a:	82 33       	cpi	r24, 0x32	; 50
     38c:	09 f0       	breq	.+2      	; 0x390 <A_TimerCtc_Interrupt_Task+0x3c>
     38e:	3a c1       	rjmp	.+628    	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
     390:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     394:	84 60       	ori	r24, 0x04	; 4
     396:	8f 7e       	andi	r24, 0xEF	; 239
     398:	8a 60       	ori	r24, 0x0A	; 10
     39a:	8e 7f       	andi	r24, 0xFE	; 254
     39c:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <flag>
     3a0:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <x>
     3a4:	8d 31       	cpi	r24, 0x1D	; 29
     3a6:	18 f0       	brcs	.+6      	; 0x3ae <A_TimerCtc_Interrupt_Task+0x5a>
     3a8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <H_DcMotor_Start>
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <A_TimerCtc_Interrupt_Task+0x66>
     3ae:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <x>
     3b2:	85 31       	cpi	r24, 0x15	; 21
     3b4:	10 f4       	brcc	.+4      	; 0x3ba <A_TimerCtc_Interrupt_Task+0x66>
     3b6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <H_DcMotor_Stop>
     3ba:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <flag>
     3be:	20 ff       	sbrs	r18, 0
     3c0:	9b c0       	rjmp	.+310    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
     3c2:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <control_flag>
     3c6:	8e 2f       	mov	r24, r30
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	fc 01       	movw	r30, r24
     3cc:	f1 97       	sbiw	r30, 0x31	; 49
     3ce:	e6 31       	cpi	r30, 0x16	; 22
     3d0:	f1 05       	cpc	r31, r1
     3d2:	08 f0       	brcs	.+2      	; 0x3d6 <A_TimerCtc_Interrupt_Task+0x82>
     3d4:	17 c1       	rjmp	.+558    	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
     3d6:	e6 5d       	subi	r30, 0xD6	; 214
     3d8:	ff 4f       	sbci	r31, 0xFF	; 255
     3da:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__tablejump2__>
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <M_Timer1_PWM_Control_Mode>
     3e4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <H_ServoMotor_Init>
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 83 09 	call	0x1306	; 0x1306 <H_ServoMotor_SetPosition>
     3ee:	0e 94 90 09 	call	0x1320	; 0x1320 <H_ServoMotor_Start>
     3f2:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     3f6:	81 60       	ori	r24, 0x01	; 1
     3f8:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     3fc:	08 95       	ret
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <M_Timer1_PWM_Control_Mode>
     404:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <H_ServoMotor_Init>
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	0e 94 83 09 	call	0x1306	; 0x1306 <H_ServoMotor_SetPosition>
     40e:	0e 94 90 09 	call	0x1320	; 0x1320 <H_ServoMotor_Start>
     412:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     416:	8e 7f       	andi	r24, 0xFE	; 254
     418:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     41c:	08 95       	ret
     41e:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     422:	82 60       	ori	r24, 0x02	; 2
     424:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     428:	08 95       	ret
     42a:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     42e:	8d 7f       	andi	r24, 0xFD	; 253
     430:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     434:	08 95       	ret
     436:	80 e2       	ldi	r24, 0x20	; 32
     438:	0e 94 72 09 	call	0x12e4	; 0x12e4 <H_Relay_On>
     43c:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     440:	84 60       	ori	r24, 0x04	; 4
     442:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     446:	08 95       	ret
     448:	80 e2       	ldi	r24, 0x20	; 32
     44a:	0e 94 76 09 	call	0x12ec	; 0x12ec <H_Relay_Off>
     44e:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     452:	8b 7f       	andi	r24, 0xFB	; 251
     454:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     458:	08 95       	ret
     45a:	81 e2       	ldi	r24, 0x21	; 33
     45c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <H_Relay_On>
     460:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     464:	88 60       	ori	r24, 0x08	; 8
     466:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     46a:	08 95       	ret
     46c:	81 e2       	ldi	r24, 0x21	; 33
     46e:	0e 94 76 09 	call	0x12ec	; 0x12ec <H_Relay_Off>
     472:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     476:	87 7f       	andi	r24, 0xF7	; 247
     478:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     47c:	08 95       	ret
     47e:	82 e2       	ldi	r24, 0x22	; 34
     480:	0e 94 72 09 	call	0x12e4	; 0x12e4 <H_Relay_On>
     484:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     488:	80 61       	ori	r24, 0x10	; 16
     48a:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     48e:	08 95       	ret
     490:	82 e2       	ldi	r24, 0x22	; 34
     492:	0e 94 76 09 	call	0x12ec	; 0x12ec <H_Relay_Off>
     496:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     49a:	8f 7e       	andi	r24, 0xEF	; 239
     49c:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     4a0:	08 95       	ret
     4a2:	83 e2       	ldi	r24, 0x23	; 35
     4a4:	0e 94 72 09 	call	0x12e4	; 0x12e4 <H_Relay_On>
     4a8:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     4ac:	80 62       	ori	r24, 0x20	; 32
     4ae:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     4b2:	08 95       	ret
     4b4:	83 e2       	ldi	r24, 0x23	; 35
     4b6:	0e 94 76 09 	call	0x12ec	; 0x12ec <H_Relay_Off>
     4ba:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     4be:	8f 7d       	andi	r24, 0xDF	; 223
     4c0:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     4c4:	08 95       	ret
     4c6:	84 e2       	ldi	r24, 0x24	; 36
     4c8:	0e 94 72 09 	call	0x12e4	; 0x12e4 <H_Relay_On>
     4cc:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     4d0:	80 64       	ori	r24, 0x40	; 64
     4d2:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     4d6:	08 95       	ret
     4d8:	84 e2       	ldi	r24, 0x24	; 36
     4da:	0e 94 76 09 	call	0x12ec	; 0x12ec <H_Relay_Off>
     4de:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     4e2:	8f 7b       	andi	r24, 0xBF	; 191
     4e4:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     4e8:	08 95       	ret
     4ea:	2f 7d       	andi	r18, 0xDF	; 223
     4ec:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <control_flag>
     4f0:	20 68       	ori	r18, 0x80	; 128
     4f2:	20 93 72 03 	sts	0x0372, r18	; 0x800372 <flag>
     4f6:	08 95       	ret
     4f8:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <control_flag>
     4fc:	8e 2f       	mov	r24, r30
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	fc 01       	movw	r30, r24
     502:	f1 97       	sbiw	r30, 0x31	; 49
     504:	e3 31       	cpi	r30, 0x13	; 19
     506:	f1 05       	cpc	r31, r1
     508:	08 f0       	brcs	.+2      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
     50a:	7c c0       	rjmp	.+248    	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
     50c:	e0 5c       	subi	r30, 0xC0	; 192
     50e:	ff 4f       	sbci	r31, 0xFF	; 255
     510:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__tablejump2__>
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <M_Timer1_PWM_Control_Mode>
     51a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <H_ServoMotor_Init>
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	0e 94 83 09 	call	0x1306	; 0x1306 <H_ServoMotor_SetPosition>
     524:	0e 94 90 09 	call	0x1320	; 0x1320 <H_ServoMotor_Start>
     528:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     52c:	8e 7f       	andi	r24, 0xFE	; 254
     52e:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     532:	08 95       	ret
     534:	80 e2       	ldi	r24, 0x20	; 32
     536:	0e 94 72 09 	call	0x12e4	; 0x12e4 <H_Relay_On>
     53a:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     53e:	84 60       	ori	r24, 0x04	; 4
     540:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     544:	08 95       	ret
     546:	80 e2       	ldi	r24, 0x20	; 32
     548:	0e 94 76 09 	call	0x12ec	; 0x12ec <H_Relay_Off>
     54c:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     550:	8b 7f       	andi	r24, 0xFB	; 251
     552:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     556:	08 95       	ret
     558:	81 e2       	ldi	r24, 0x21	; 33
     55a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <H_Relay_On>
     55e:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     562:	88 60       	ori	r24, 0x08	; 8
     564:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     568:	08 95       	ret
     56a:	81 e2       	ldi	r24, 0x21	; 33
     56c:	0e 94 76 09 	call	0x12ec	; 0x12ec <H_Relay_Off>
     570:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     574:	87 7f       	andi	r24, 0xF7	; 247
     576:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     57a:	08 95       	ret
     57c:	82 e2       	ldi	r24, 0x22	; 34
     57e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <H_Relay_On>
     582:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     586:	80 61       	ori	r24, 0x10	; 16
     588:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     58c:	08 95       	ret
     58e:	82 e2       	ldi	r24, 0x22	; 34
     590:	0e 94 76 09 	call	0x12ec	; 0x12ec <H_Relay_Off>
     594:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     598:	8f 7e       	andi	r24, 0xEF	; 239
     59a:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     59e:	08 95       	ret
     5a0:	83 e2       	ldi	r24, 0x23	; 35
     5a2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <H_Relay_On>
     5a6:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     5aa:	80 62       	ori	r24, 0x20	; 32
     5ac:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     5b0:	08 95       	ret
     5b2:	83 e2       	ldi	r24, 0x23	; 35
     5b4:	0e 94 76 09 	call	0x12ec	; 0x12ec <H_Relay_Off>
     5b8:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     5bc:	8f 7d       	andi	r24, 0xDF	; 223
     5be:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     5c2:	08 95       	ret
     5c4:	84 e2       	ldi	r24, 0x24	; 36
     5c6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <H_Relay_On>
     5ca:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     5ce:	80 64       	ori	r24, 0x40	; 64
     5d0:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     5d4:	08 95       	ret
     5d6:	84 e2       	ldi	r24, 0x24	; 36
     5d8:	0e 94 76 09 	call	0x12ec	; 0x12ec <H_Relay_Off>
     5dc:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     5e0:	8f 7b       	andi	r24, 0xBF	; 191
     5e2:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <Status_flag>
     5e6:	08 95       	ret
     5e8:	0e 94 3f 09 	call	0x127e	; 0x127e <H_Lcd_Clr>
     5ec:	80 e9       	ldi	r24, 0x90	; 144
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
     5f4:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     5f8:	80 68       	ori	r24, 0x80	; 128
     5fa:	8f 7d       	andi	r24, 0xDF	; 223
     5fc:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <flag>
     600:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <control_flag>
     604:	08 95       	ret

00000606 <A_Alarm>:
void A_Alarm(void)
{
	H_Lcd_Clr();
     606:	0e 94 3f 09 	call	0x127e	; 0x127e <H_Lcd_Clr>
	H_Lcd_WriteString("Error in user or");
     60a:	85 e9       	ldi	r24, 0x95	; 149
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
	H_Lcd_GoTo(1,0);
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
	H_Lcd_WriteString("password");
     61a:	86 ea       	ldi	r24, 0xA6	; 166
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     622:	2f ef       	ldi	r18, 0xFF	; 255
     624:	83 ed       	ldi	r24, 0xD3	; 211
     626:	90 e3       	ldi	r25, 0x30	; 48
     628:	21 50       	subi	r18, 0x01	; 1
     62a:	80 40       	sbci	r24, 0x00	; 0
     62c:	90 40       	sbci	r25, 0x00	; 0
     62e:	e1 f7       	brne	.-8      	; 0x628 <A_Alarm+0x22>
     630:	00 c0       	rjmp	.+0      	; 0x632 <A_Alarm+0x2c>
     632:	00 00       	nop
	_delay_ms(1000);
	H_Lcd_Clr();
     634:	0e 94 3f 09 	call	0x127e	; 0x127e <H_Lcd_Clr>
	H_Lcd_WriteString("Try Again");
     638:	8f ea       	ldi	r24, 0xAF	; 175
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
     640:	2f ef       	ldi	r18, 0xFF	; 255
     642:	83 ed       	ldi	r24, 0xD3	; 211
     644:	90 e3       	ldi	r25, 0x30	; 48
     646:	21 50       	subi	r18, 0x01	; 1
     648:	80 40       	sbci	r24, 0x00	; 0
     64a:	90 40       	sbci	r25, 0x00	; 0
     64c:	e1 f7       	brne	.-8      	; 0x646 <A_Alarm+0x40>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <A_Alarm+0x4a>
     650:	00 00       	nop
     652:	02 c0       	rjmp	.+4      	; 0x658 <A_Alarm+0x52>
	_delay_ms(1000);
	while(A_Cnt >= 3)
	{
		H_Buzzer_On();
     654:	0e 94 bf 07 	call	0xf7e	; 0xf7e <H_Buzzer_On>
	H_Lcd_WriteString("password");
	_delay_ms(1000);
	H_Lcd_Clr();
	H_Lcd_WriteString("Try Again");
	_delay_ms(1000);
	while(A_Cnt >= 3)
     658:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <A_Cnt>
     65c:	83 30       	cpi	r24, 0x03	; 3
     65e:	d0 f7       	brcc	.-12     	; 0x654 <A_Alarm+0x4e>
	{
		H_Buzzer_On();
	}
}
     660:	08 95       	ret

00000662 <A_Show_Status>:

void A_Show_Status(void)
{
     662:	cf 93       	push	r28
	u8 cnt = 0;
	
	
	H_Lcd_Clr();
     664:	0e 94 3f 09 	call	0x127e	; 0x127e <H_Lcd_Clr>
     668:	8f e3       	ldi	r24, 0x3F	; 63
     66a:	9c e9       	ldi	r25, 0x9C	; 156
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	f1 f7       	brne	.-4      	; 0x66c <A_Show_Status+0xa>
     670:	00 c0       	rjmp	.+0      	; 0x672 <A_Show_Status+0x10>
     672:	00 00       	nop
	_delay_ms(10);
	H_Lcd_GoTo(0,0);
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
	H_Lcd_WriteString("L1 L2 L3 L4 L5 AC Dimming Door");
     67c:	89 eb       	ldi	r24, 0xB9	; 185
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
	H_Lcd_GoTo(1,0);
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
	if(GetBit(Status_flag, 2) == 1)H_Lcd_WriteString("On ");
     68c:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     690:	82 ff       	sbrs	r24, 2
     692:	05 c0       	rjmp	.+10     	; 0x69e <A_Show_Status+0x3c>
     694:	88 ed       	ldi	r24, 0xD8	; 216
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
     69c:	04 c0       	rjmp	.+8      	; 0x6a6 <A_Show_Status+0x44>
	else H_Lcd_WriteString("Off");
     69e:	8c ed       	ldi	r24, 0xDC	; 220
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
	
	if(GetBit(Status_flag, 3) == 1)H_Lcd_WriteString("On ");
     6a6:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     6aa:	83 ff       	sbrs	r24, 3
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <A_Show_Status+0x56>
     6ae:	88 ed       	ldi	r24, 0xD8	; 216
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
     6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <A_Show_Status+0x5e>
	else H_Lcd_WriteString("Off");
     6b8:	8c ed       	ldi	r24, 0xDC	; 220
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
	
	if(GetBit(Status_flag, 4) == 1)H_Lcd_WriteString("On ");
     6c0:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     6c4:	84 ff       	sbrs	r24, 4
     6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <A_Show_Status+0x70>
     6c8:	88 ed       	ldi	r24, 0xD8	; 216
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
     6d0:	04 c0       	rjmp	.+8      	; 0x6da <A_Show_Status+0x78>
	else H_Lcd_WriteString("Off");
     6d2:	8c ed       	ldi	r24, 0xDC	; 220
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
	
	if(GetBit(Status_flag, 4) == 1)H_Lcd_WriteString("On ");
     6da:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     6de:	84 ff       	sbrs	r24, 4
     6e0:	05 c0       	rjmp	.+10     	; 0x6ec <A_Show_Status+0x8a>
     6e2:	88 ed       	ldi	r24, 0xD8	; 216
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
     6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <A_Show_Status+0x92>
	else H_Lcd_WriteString("Off");
     6ec:	8c ed       	ldi	r24, 0xDC	; 220
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
	
	if(GetBit(Status_flag, 6) == 1)H_Lcd_WriteString("On ");
     6f4:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     6f8:	86 ff       	sbrs	r24, 6
     6fa:	05 c0       	rjmp	.+10     	; 0x706 <A_Show_Status+0xa4>
     6fc:	88 ed       	ldi	r24, 0xD8	; 216
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
     704:	04 c0       	rjmp	.+8      	; 0x70e <A_Show_Status+0xac>
	else H_Lcd_WriteString("Off");
     706:	8c ed       	ldi	r24, 0xDC	; 220
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
	
	if(M_Dio_PinRead(MOTOR_PIN) == 1) H_Lcd_WriteString("On "); 
     70e:	8e e2       	ldi	r24, 0x2E	; 46
     710:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <M_Dio_PinRead>
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	29 f4       	brne	.+10     	; 0x722 <A_Show_Status+0xc0>
     718:	88 ed       	ldi	r24, 0xD8	; 216
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
     720:	04 c0       	rjmp	.+8      	; 0x72a <A_Show_Status+0xc8>
	else H_Lcd_WriteString("Off");
     722:	8c ed       	ldi	r24, 0xDC	; 220
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
	
	H_Lcd_WriteString("Off     ");
     72a:	80 ee       	ldi	r24, 0xE0	; 224
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
	
	if(GetBit(Status_flag, 0) == 1)H_Lcd_WriteString("OPENED");
     732:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <Status_flag>
     736:	80 ff       	sbrs	r24, 0
     738:	06 c0       	rjmp	.+12     	; 0x746 <A_Show_Status+0xe4>
     73a:	89 ee       	ldi	r24, 0xE9	; 233
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
		H_Buzzer_On();
	}
}

void A_Show_Status(void)
{
     742:	c0 e0       	ldi	r28, 0x00	; 0
     744:	11 c0       	rjmp	.+34     	; 0x768 <A_Show_Status+0x106>
	else H_Lcd_WriteString("Off");
	
	H_Lcd_WriteString("Off     ");
	
	if(GetBit(Status_flag, 0) == 1)H_Lcd_WriteString("OPENED");
	else H_Lcd_WriteString("CLOSED");
     746:	80 ef       	ldi	r24, 0xF0	; 240
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
     74e:	f9 cf       	rjmp	.-14     	; 0x742 <A_Show_Status+0xe0>
	for(cnt = 0; cnt < 15; cnt++)
	{
		H_Lcd_ShiftLeft();
     750:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <H_Lcd_ShiftLeft>
     754:	9f ef       	ldi	r25, 0xFF	; 255
     756:	21 ee       	ldi	r18, 0xE1	; 225
     758:	84 e0       	ldi	r24, 0x04	; 4
     75a:	91 50       	subi	r25, 0x01	; 1
     75c:	20 40       	sbci	r18, 0x00	; 0
     75e:	80 40       	sbci	r24, 0x00	; 0
     760:	e1 f7       	brne	.-8      	; 0x75a <A_Show_Status+0xf8>
     762:	00 c0       	rjmp	.+0      	; 0x764 <A_Show_Status+0x102>
     764:	00 00       	nop
	
	H_Lcd_WriteString("Off     ");
	
	if(GetBit(Status_flag, 0) == 1)H_Lcd_WriteString("OPENED");
	else H_Lcd_WriteString("CLOSED");
	for(cnt = 0; cnt < 15; cnt++)
     766:	cf 5f       	subi	r28, 0xFF	; 255
     768:	cf 30       	cpi	r28, 0x0F	; 15
     76a:	90 f3       	brcs	.-28     	; 0x750 <A_Show_Status+0xee>
	{
		H_Lcd_ShiftLeft();
		_delay_ms(100);
	}
}
     76c:	cf 91       	pop	r28
     76e:	08 95       	ret

00000770 <main>:
u8 Status_flag = 0;
u8 light_intensity = 100;
/**************************** _MAIN_ ****************************/

int main(void)
{
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	a2 97       	sbiw	r28, 0x22	; 34
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
	M_Timer0_Init();
     784:	0e 94 b4 0b 	call	0x1768	; 0x1768 <M_Timer0_Init>
	M_Timer0_SetCallBack(A_TimerCtc_Interrupt_Task);
     788:	8a ea       	ldi	r24, 0xAA	; 170
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 bf 0b 	call	0x177e	; 0x177e <M_Timer0_SetCallBack>
	H_KeyPad_Init();	                ////
     790:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <H_KeyPad_Init>
    M_Uart_Init();
     794:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <M_Uart_Init>
	M_Uart_SetCallBack(A_UartRxInerrupt_Task);
     798:	83 ef       	ldi	r24, 0xF3	; 243
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 b6 0c 	call	0x196c	; 0x196c <M_Uart_SetCallBack>
	
	H_Lcd_Init();	  
     7a0:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <H_Lcd_Init>
	H_Buzzer_Init();
     7a4:	0e 94 ba 07 	call	0xf74	; 0xf74 <H_Buzzer_Init>
 	H_ServoMotor_Init(); 
     7a8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <H_ServoMotor_Init>
	H_TempSensor_Init();
     7ac:	0e 94 93 09 	call	0x1326	; 0x1326 <H_TempSensor_Init>
// 	H_Ext_Eeprom_MultiByteRead(0,4, retreived_username);
// 	H_Lcd_WriteString(retreived_username);
// 	M_Uart_SendString(retreived_username);
// 	_delay_ms(1000);
// 	H_Lcd_Clr();
	H_Relay_Init(RELAY_PIN1);
     7b0:	80 e2       	ldi	r24, 0x20	; 32
     7b2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <H_Relay_Init>
	H_Relay_Init(RELAY_PIN2);
     7b6:	81 e2       	ldi	r24, 0x21	; 33
     7b8:	0e 94 6e 09 	call	0x12dc	; 0x12dc <H_Relay_Init>
	H_Relay_Init(RELAY_PIN3);
     7bc:	82 e2       	ldi	r24, 0x22	; 34
     7be:	0e 94 6e 09 	call	0x12dc	; 0x12dc <H_Relay_Init>
	H_Relay_Init(RELAY_PIN4);
     7c2:	83 e2       	ldi	r24, 0x23	; 35
     7c4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <H_Relay_Init>
	H_Relay_Init(RELAY_PIN5);
     7c8:	84 e2       	ldi	r24, 0x24	; 36
     7ca:	0e 94 6e 09 	call	0x12dc	; 0x12dc <H_Relay_Init>
	ClrBit(flag, 2);
     7ce:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     7d2:	8b 7f       	andi	r24, 0xFB	; 251
	SetBit(flag, 4);
     7d4:	80 61       	ori	r24, 0x10	; 16
     7d6:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <flag>
//    id = H_Ext_Eeprom_Read(7, 255);
	M_Timer1_PWM_Control_Mode(1);
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <M_Timer1_PWM_Control_Mode>
	H_ServoMotor_Init();
     7e0:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <H_ServoMotor_Init>
	H_ServoMotor_SetPosition(2); // to close the door 
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	0e 94 83 09 	call	0x1306	; 0x1306 <H_ServoMotor_SetPosition>
	H_ServoMotor_Start();
     7ea:	0e 94 90 09 	call	0x1320	; 0x1320 <H_ServoMotor_Start>

	H_DcMotor_Init();
     7ee:	0e 94 5f 09 	call	0x12be	; 0x12be <H_DcMotor_Init>
	sei();
     7f2:	78 94       	sei
	while (1)
	{
		if(GetBit(flag, 2) == 0)
     7f4:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     7f8:	82 fd       	sbrc	r24, 2
     7fa:	24 c0       	rjmp	.+72     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
		{			
			H_Lcd_GoTo(0,0);
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
			H_Lcd_WriteString("To Admin enter:1");
     804:	87 ef       	ldi	r24, 0xF7	; 247
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
			M_Uart_SendString("To Admin enter:1");
     80c:	87 ef       	ldi	r24, 0xF7	; 247
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 97 0c 	call	0x192e	; 0x192e <M_Uart_SendString>
			H_Lcd_GoTo(1,0);
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
			H_Lcd_WriteString("To User  enter:2");
     81c:	88 e0       	ldi	r24, 0x08	; 8
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
			M_Uart_SendString("To User  enter:2");
     824:	88 e0       	ldi	r24, 0x08	; 8
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	0e 94 97 0c 	call	0x192e	; 0x192e <M_Uart_SendString>
			while(GetBit(flag, 2) == 0)
     82c:	04 c0       	rjmp	.+8      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
			{
				x = H_TempSensor_Read();
     82e:	0e 94 96 09 	call	0x132c	; 0x132c <H_TempSensor_Read>
     832:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <x>
			H_Lcd_WriteString("To Admin enter:1");
			M_Uart_SendString("To Admin enter:1");
			H_Lcd_GoTo(1,0);
			H_Lcd_WriteString("To User  enter:2");
			M_Uart_SendString("To User  enter:2");
			while(GetBit(flag, 2) == 0)
     836:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     83a:	82 ff       	sbrs	r24, 2
     83c:	f8 cf       	rjmp	.-16     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
			{
				x = H_TempSensor_Read();
			}
			H_Lcd_Clr();
     83e:	0e 94 3f 09 	call	0x127e	; 0x127e <H_Lcd_Clr>
     842:	71 c1       	rjmp	.+738    	; 0xb26 <__stack+0x2c7>
		}
		else if(GetBit(flag, 1) == 1)
     844:	81 ff       	sbrs	r24, 1
     846:	6f c1       	rjmp	.+734    	; 0xb26 <__stack+0x2c7>
		{
			H_Lcd_GoTo(0,0);
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
			H_Lcd_WriteString("Enter Username");
     850:	89 e1       	ldi	r24, 0x19	; 25
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
			H_Lcd_GoTo(1,0);
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
			H_Lcd_WriteString("Enter Password");
     860:	88 e2       	ldi	r24, 0x28	; 40
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
			M_Uart_SendString("Please enter User \n and Password");
     868:	87 e3       	ldi	r24, 0x37	; 55
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 97 0c 	call	0x192e	; 0x192e <M_Uart_SendString>
			
			volatile u8 user[16] = "";
     870:	1a 8a       	std	Y+18, r1	; 0x12
     872:	19 8a       	std	Y+17, r1	; 0x11
     874:	8e e0       	ldi	r24, 0x0E	; 14
     876:	fe 01       	movw	r30, r28
     878:	73 96       	adiw	r30, 0x13	; 19
     87a:	df 01       	movw	r26, r30
     87c:	28 2f       	mov	r18, r24
     87e:	1d 92       	st	X+, r1
     880:	2a 95       	dec	r18
     882:	e9 f7       	brne	.-6      	; 0x87e <__stack+0x1f>
			volatile u8 pass[16] = "";
     884:	1a 82       	std	Y+2, r1	; 0x02
     886:	19 82       	std	Y+1, r1	; 0x01
     888:	70 97       	sbiw	r30, 0x10	; 16
     88a:	df 01       	movw	r26, r30
     88c:	1d 92       	st	X+, r1
     88e:	8a 95       	dec	r24
     890:	e9 f7       	brne	.-6      	; 0x88c <__stack+0x2d>
			volatile u8 Local_u8_UserCnt = 0;
     892:	1a a2       	std	Y+34, r1	; 0x22
			volatile u8 Local_u8_PassCnt = 0;
     894:	19 a2       	std	Y+33, r1	; 0x21
			
			while(GetBit(flag, 1) == 1)
     896:	41 c1       	rjmp	.+642    	; 0xb1a <__stack+0x2bb>
			{	
				x = H_TempSensor_Read();			
     898:	0e 94 96 09 	call	0x132c	; 0x132c <H_TempSensor_Read>
     89c:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <x>
				if(GetBit(flag, 0) == 0)
     8a0:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     8a4:	80 fd       	sbrc	r24, 0
     8a6:	97 c0       	rjmp	.+302    	; 0x9d6 <__stack+0x177>
				{
					if ((GetBit(flag, 3) == 1) && (user_flag == 0))
     8a8:	98 2f       	mov	r25, r24
     8aa:	98 70       	andi	r25, 0x08	; 8
     8ac:	83 ff       	sbrs	r24, 3
     8ae:	48 c0       	rjmp	.+144    	; 0x940 <__stack+0xe1>
     8b0:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <user_flag>
     8b4:	81 11       	cpse	r24, r1
     8b6:	44 c0       	rjmp	.+136    	; 0x940 <__stack+0xe1>
					{
						memset(username, 0, 17);
     8b8:	81 e1       	ldi	r24, 0x11	; 17
     8ba:	e3 e8       	ldi	r30, 0x83	; 131
     8bc:	f3 e0       	ldi	r31, 0x03	; 3
     8be:	df 01       	movw	r26, r30
     8c0:	1d 92       	st	X+, r1
     8c2:	8a 95       	dec	r24
     8c4:	e9 f7       	brne	.-6      	; 0x8c0 <__stack+0x61>
						u8 c ;
						c = H_KeyPad_Read();				
     8c6:	0e 94 14 08 	call	0x1028	; 0x1028 <H_KeyPad_Read>
     8ca:	18 2f       	mov	r17, r24
						M_Uart_Transmit(c);
     8cc:	0e 94 8d 0c 	call	0x191a	; 0x191a <M_Uart_Transmit>
						if (c == 'A')
     8d0:	11 34       	cpi	r17, 0x41	; 65
     8d2:	19 f5       	brne	.+70     	; 0x91a <__stack+0xbb>
						{
						
							user[Local_u8_UserCnt] = '\0';
     8d4:	8a a1       	ldd	r24, Y+34	; 0x22
     8d6:	8e 01       	movw	r16, r28
     8d8:	0f 5e       	subi	r16, 0xEF	; 239
     8da:	1f 4f       	sbci	r17, 0xFF	; 255
     8dc:	f8 01       	movw	r30, r16
     8de:	e8 0f       	add	r30, r24
     8e0:	f1 1d       	adc	r31, r1
     8e2:	10 82       	st	Z, r1
							Local_u8_UserCnt = 0;
     8e4:	1a a2       	std	Y+34, r1	; 0x22
							strcat(username, user);
     8e6:	b8 01       	movw	r22, r16
     8e8:	83 e8       	ldi	r24, 0x83	; 131
     8ea:	93 e0       	ldi	r25, 0x03	; 3
     8ec:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <strcat>
							memset(user, 0, 16);
     8f0:	80 e1       	ldi	r24, 0x10	; 16
     8f2:	f8 01       	movw	r30, r16
     8f4:	28 2f       	mov	r18, r24
     8f6:	11 92       	st	Z+, r1
     8f8:	2a 95       	dec	r18
     8fa:	e9 f7       	brne	.-6      	; 0x8f6 <__stack+0x97>
							memset(pass, 0, 16);
     8fc:	fe 01       	movw	r30, r28
     8fe:	31 96       	adiw	r30, 0x01	; 1
     900:	df 01       	movw	r26, r30
     902:	1d 92       	st	X+, r1
     904:	8a 95       	dec	r24
     906:	e9 f7       	brne	.-6      	; 0x902 <__stack+0xa3>
							ClrBit(flag, 3);
     908:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     90c:	87 7f       	andi	r24, 0xF7	; 247
     90e:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <flag>
							user_flag = 1;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <user_flag>
     918:	5e c0       	rjmp	.+188    	; 0x9d6 <__stack+0x177>
						}
						else if(c == 0) _delay_us(10);
     91a:	11 11       	cpse	r17, r1
     91c:	05 c0       	rjmp	.+10     	; 0x928 <__stack+0xc9>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     91e:	b5 e3       	ldi	r27, 0x35	; 53
     920:	ba 95       	dec	r27
     922:	f1 f7       	brne	.-4      	; 0x920 <__stack+0xc1>
     924:	00 00       	nop
     926:	57 c0       	rjmp	.+174    	; 0x9d6 <__stack+0x177>
						else
						{
							user[Local_u8_UserCnt] = c;
     928:	8a a1       	ldd	r24, Y+34	; 0x22
     92a:	e1 e1       	ldi	r30, 0x11	; 17
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	ec 0f       	add	r30, r28
     930:	fd 1f       	adc	r31, r29
     932:	e8 0f       	add	r30, r24
     934:	f1 1d       	adc	r31, r1
     936:	10 83       	st	Z, r17
							Local_u8_UserCnt++;
     938:	8a a1       	ldd	r24, Y+34	; 0x22
     93a:	8f 5f       	subi	r24, 0xFF	; 255
     93c:	8a a3       	std	Y+34, r24	; 0x22
     93e:	4b c0       	rjmp	.+150    	; 0x9d6 <__stack+0x177>
						}
					}
				
					else if ((GetBit(flag, 3) == 0) && (user_flag == 1))
     940:	91 11       	cpse	r25, r1
     942:	49 c0       	rjmp	.+146    	; 0x9d6 <__stack+0x177>
     944:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <user_flag>
     948:	81 30       	cpi	r24, 0x01	; 1
     94a:	09 f0       	breq	.+2      	; 0x94e <__stack+0xef>
     94c:	44 c0       	rjmp	.+136    	; 0x9d6 <__stack+0x177>
					{
						memset(password, 0, 16);
     94e:	80 e1       	ldi	r24, 0x10	; 16
     950:	e3 e7       	ldi	r30, 0x73	; 115
     952:	f3 e0       	ldi	r31, 0x03	; 3
     954:	df 01       	movw	r26, r30
     956:	1d 92       	st	X+, r1
     958:	8a 95       	dec	r24
     95a:	e9 f7       	brne	.-6      	; 0x956 <__stack+0xf7>
					
						u8 c ;
						c = H_KeyPad_Read();
     95c:	0e 94 14 08 	call	0x1028	; 0x1028 <H_KeyPad_Read>
						if ( c == 'A')
     960:	81 34       	cpi	r24, 0x41	; 65
     962:	39 f5       	brne	.+78     	; 0x9b2 <__stack+0x153>
						{
							pass[Local_u8_PassCnt] = '\0';
     964:	89 a1       	ldd	r24, Y+33	; 0x21
     966:	8e 01       	movw	r16, r28
     968:	0f 5f       	subi	r16, 0xFF	; 255
     96a:	1f 4f       	sbci	r17, 0xFF	; 255
     96c:	f8 01       	movw	r30, r16
     96e:	e8 0f       	add	r30, r24
     970:	f1 1d       	adc	r31, r1
     972:	10 82       	st	Z, r1
							Local_u8_PassCnt = 0;
     974:	19 a2       	std	Y+33, r1	; 0x21
							strcat(password, pass);
     976:	b8 01       	movw	r22, r16
     978:	83 e7       	ldi	r24, 0x73	; 115
     97a:	93 e0       	ldi	r25, 0x03	; 3
     97c:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <strcat>
							memset(pass, 0, 16);
     980:	80 e1       	ldi	r24, 0x10	; 16
     982:	f8 01       	movw	r30, r16
     984:	28 2f       	mov	r18, r24
     986:	11 92       	st	Z+, r1
     988:	2a 95       	dec	r18
     98a:	e9 f7       	brne	.-6      	; 0x986 <__stack+0x127>
							memset(user, 0, 16);
     98c:	fe 01       	movw	r30, r28
     98e:	71 96       	adiw	r30, 0x11	; 17
     990:	df 01       	movw	r26, r30
     992:	1d 92       	st	X+, r1
     994:	8a 95       	dec	r24
     996:	e9 f7       	brne	.-6      	; 0x992 <__stack+0x133>
							SetBit(flag, 3);
     998:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     99c:	88 60       	ori	r24, 0x08	; 8
     99e:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <flag>
							A_Cnt++;
     9a2:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <A_Cnt>
     9a6:	8f 5f       	subi	r24, 0xFF	; 255
     9a8:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <A_Cnt>
							user_flag = 0;
     9ac:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <user_flag>
     9b0:	12 c0       	rjmp	.+36     	; 0x9d6 <__stack+0x177>
						}
						else if(c == 0) _delay_us(10);
     9b2:	81 11       	cpse	r24, r1
     9b4:	05 c0       	rjmp	.+10     	; 0x9c0 <__stack+0x161>
     9b6:	b5 e3       	ldi	r27, 0x35	; 53
     9b8:	ba 95       	dec	r27
     9ba:	f1 f7       	brne	.-4      	; 0x9b8 <__stack+0x159>
     9bc:	00 00       	nop
     9be:	0b c0       	rjmp	.+22     	; 0x9d6 <__stack+0x177>
						else
						{
							pass[Local_u8_PassCnt] = c;
     9c0:	99 a1       	ldd	r25, Y+33	; 0x21
     9c2:	e1 e0       	ldi	r30, 0x01	; 1
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	ec 0f       	add	r30, r28
     9c8:	fd 1f       	adc	r31, r29
     9ca:	e9 0f       	add	r30, r25
     9cc:	f1 1d       	adc	r31, r1
     9ce:	80 83       	st	Z, r24
							Local_u8_PassCnt++;
     9d0:	89 a1       	ldd	r24, Y+33	; 0x21
     9d2:	8f 5f       	subi	r24, 0xFF	; 255
     9d4:	89 a3       	std	Y+33, r24	; 0x21
						}
					
					}
				}
				if (strcmp(username, "")!=0 && strcmp(password, "") !=0)
     9d6:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <username>
     9da:	88 23       	and	r24, r24
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <__stack+0x181>
     9de:	9d c0       	rjmp	.+314    	; 0xb1a <__stack+0x2bb>
     9e0:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <password>
     9e4:	88 23       	and	r24, r24
     9e6:	09 f4       	brne	.+2      	; 0x9ea <__stack+0x18b>
     9e8:	98 c0       	rjmp	.+304    	; 0xb1a <__stack+0x2bb>
				{
					if(GetBit(flag, 0) == 1)
     9ea:	10 91 72 03 	lds	r17, 0x0372	; 0x800372 <flag>
     9ee:	10 ff       	sbrs	r17, 0
     9f0:	19 c0       	rjmp	.+50     	; 0xa24 <__stack+0x1c5>
					{
						if(( strcmp(username, admin_username) == 0 ) && ( strcmp(password, admin_password) == 0 ))
     9f2:	69 e7       	ldi	r22, 0x79	; 121
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	83 e8       	ldi	r24, 0x83	; 131
     9f8:	93 e0       	ldi	r25, 0x03	; 3
     9fa:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     9fe:	89 2b       	or	r24, r25
     a00:	71 f4       	brne	.+28     	; 0xa1e <__stack+0x1bf>
     a02:	64 e7       	ldi	r22, 0x74	; 116
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	83 e7       	ldi	r24, 0x73	; 115
     a08:	93 e0       	ldi	r25, 0x03	; 3
     a0a:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     a0e:	89 2b       	or	r24, r25
     a10:	31 f4       	brne	.+12     	; 0xa1e <__stack+0x1bf>
						{
							ClrBit(flag, 1);
     a12:	1d 7f       	andi	r17, 0xFD	; 253
     a14:	10 93 72 03 	sts	0x0372, r17	; 0x800372 <flag>
							A_Cnt = 0;
     a18:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <A_Cnt>
     a1c:	7e c0       	rjmp	.+252    	; 0xb1a <__stack+0x2bb>
						}
						else A_Alarm();
     a1e:	0e 94 03 03 	call	0x606	; 0x606 <A_Alarm>
     a22:	7b c0       	rjmp	.+246    	; 0xb1a <__stack+0x2bb>
					}
					else
					{
						if(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
     a24:	6d e6       	ldi	r22, 0x6D	; 109
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	83 e8       	ldi	r24, 0x83	; 131
     a2a:	93 e0       	ldi	r25, 0x03	; 3
     a2c:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     a30:	89 2b       	or	r24, r25
     a32:	49 f4       	brne	.+18     	; 0xa46 <__stack+0x1e7>
     a34:	6f e6       	ldi	r22, 0x6F	; 111
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	83 e7       	ldi	r24, 0x73	; 115
     a3a:	93 e0       	ldi	r25, 0x03	; 3
     a3c:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     a40:	89 2b       	or	r24, r25
     a42:	09 f4       	brne	.+2      	; 0xa46 <__stack+0x1e7>
     a44:	62 c0       	rjmp	.+196    	; 0xb0a <__stack+0x2ab>
						    (( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     a46:	6b e6       	ldi	r22, 0x6B	; 107
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	83 e8       	ldi	r24, 0x83	; 131
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
						}
						else A_Alarm();
					}
					else
					{
						if(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
     a52:	89 2b       	or	r24, r25
     a54:	49 f4       	brne	.+18     	; 0xa68 <__stack+0x209>
						    (( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     a56:	6f e6       	ldi	r22, 0x6F	; 111
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	83 e7       	ldi	r24, 0x73	; 115
     a5c:	93 e0       	ldi	r25, 0x03	; 3
     a5e:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     a62:	89 2b       	or	r24, r25
     a64:	09 f4       	brne	.+2      	; 0xa68 <__stack+0x209>
     a66:	51 c0       	rjmp	.+162    	; 0xb0a <__stack+0x2ab>
							(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     a68:	69 e6       	ldi	r22, 0x69	; 105
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	83 e8       	ldi	r24, 0x83	; 131
     a6e:	93 e0       	ldi	r25, 0x03	; 3
     a70:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
						else A_Alarm();
					}
					else
					{
						if(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
						    (( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     a74:	89 2b       	or	r24, r25
     a76:	49 f4       	brne	.+18     	; 0xa8a <__stack+0x22b>
							(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     a78:	6f e6       	ldi	r22, 0x6F	; 111
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	83 e7       	ldi	r24, 0x73	; 115
     a7e:	93 e0       	ldi	r25, 0x03	; 3
     a80:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     a84:	89 2b       	or	r24, r25
     a86:	09 f4       	brne	.+2      	; 0xa8a <__stack+0x22b>
     a88:	40 c0       	rjmp	.+128    	; 0xb0a <__stack+0x2ab>
							(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     a8a:	67 e6       	ldi	r22, 0x67	; 103
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	83 e8       	ldi	r24, 0x83	; 131
     a90:	93 e0       	ldi	r25, 0x03	; 3
     a92:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
					}
					else
					{
						if(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
						    (( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
							(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     a96:	89 2b       	or	r24, r25
     a98:	41 f4       	brne	.+16     	; 0xaaa <__stack+0x24b>
							(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     a9a:	6f e6       	ldi	r22, 0x6F	; 111
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	83 e7       	ldi	r24, 0x73	; 115
     aa0:	93 e0       	ldi	r25, 0x03	; 3
     aa2:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     aa6:	89 2b       	or	r24, r25
     aa8:	81 f1       	breq	.+96     	; 0xb0a <__stack+0x2ab>
							(( strcmp(username, user5_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     aaa:	65 e6       	ldi	r22, 0x65	; 101
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	83 e8       	ldi	r24, 0x83	; 131
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
					else
					{
						if(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
						    (( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
							(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
							(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     ab6:	89 2b       	or	r24, r25
     ab8:	41 f4       	brne	.+16     	; 0xaca <__stack+0x26b>
							(( strcmp(username, user5_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     aba:	6f e6       	ldi	r22, 0x6F	; 111
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	83 e7       	ldi	r24, 0x73	; 115
     ac0:	93 e0       	ldi	r25, 0x03	; 3
     ac2:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     ac6:	89 2b       	or	r24, r25
     ac8:	01 f1       	breq	.+64     	; 0xb0a <__stack+0x2ab>
							(( strcmp(username, user6_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     aca:	63 e6       	ldi	r22, 0x63	; 99
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	83 e8       	ldi	r24, 0x83	; 131
     ad0:	93 e0       	ldi	r25, 0x03	; 3
     ad2:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
					{
						if(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
						    (( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
							(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
							(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
							(( strcmp(username, user5_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     ad6:	89 2b       	or	r24, r25
     ad8:	41 f4       	brne	.+16     	; 0xaea <__stack+0x28b>
							(( strcmp(username, user6_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     ada:	6f e6       	ldi	r22, 0x6F	; 111
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	83 e7       	ldi	r24, 0x73	; 115
     ae0:	93 e0       	ldi	r25, 0x03	; 3
     ae2:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     ae6:	89 2b       	or	r24, r25
     ae8:	81 f0       	breq	.+32     	; 0xb0a <__stack+0x2ab>
							(( strcmp(username, user7_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))
     aea:	61 e6       	ldi	r22, 0x61	; 97
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	83 e8       	ldi	r24, 0x83	; 131
     af0:	93 e0       	ldi	r25, 0x03	; 3
     af2:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
						if(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
						    (( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
							(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
							(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
							(( strcmp(username, user5_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
							(( strcmp(username, user6_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     af6:	89 2b       	or	r24, r25
     af8:	71 f4       	brne	.+28     	; 0xb16 <__stack+0x2b7>
							(( strcmp(username, user7_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))
     afa:	6f e6       	ldi	r22, 0x6F	; 111
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	83 e7       	ldi	r24, 0x73	; 115
     b00:	93 e0       	ldi	r25, 0x03	; 3
     b02:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     b06:	89 2b       	or	r24, r25
     b08:	31 f4       	brne	.+12     	; 0xb16 <__stack+0x2b7>
							 )
						{
							ClrBit(flag, 1);
     b0a:	1d 7f       	andi	r17, 0xFD	; 253
     b0c:	10 93 72 03 	sts	0x0372, r17	; 0x800372 <flag>
							A_Cnt = 0;
     b10:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <A_Cnt>
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <__stack+0x2bb>
						}
						else A_Alarm();
     b16:	0e 94 03 03 	call	0x606	; 0x606 <A_Alarm>
			volatile u8 user[16] = "";
			volatile u8 pass[16] = "";
			volatile u8 Local_u8_UserCnt = 0;
			volatile u8 Local_u8_PassCnt = 0;
			
			while(GetBit(flag, 1) == 1)
     b1a:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     b1e:	81 fd       	sbrc	r24, 1
     b20:	bb ce       	rjmp	.-650    	; 0x898 <__stack+0x39>
						
					}
					
				}
			}
			H_Lcd_Clr();
     b22:	0e 94 3f 09 	call	0x127e	; 0x127e <H_Lcd_Clr>
		}
		
		if(GetBit(flag, 0) == 1)
     b26:	10 91 72 03 	lds	r17, 0x0372	; 0x800372 <flag>
     b2a:	81 2f       	mov	r24, r17
     b2c:	81 70       	andi	r24, 0x01	; 1
     b2e:	10 ff       	sbrs	r17, 0
     b30:	78 c0       	rjmp	.+240    	; 0xc22 <__stack+0x3c3>
		{
			if(strcmp(username, admin_username) == 0)
     b32:	69 e7       	ldi	r22, 0x79	; 121
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	83 e8       	ldi	r24, 0x83	; 131
     b38:	93 e0       	ldi	r25, 0x03	; 3
     b3a:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     b3e:	00 97       	sbiw	r24, 0x00	; 0
     b40:	09 f0       	breq	.+2      	; 0xb44 <__stack+0x2e5>
     b42:	58 ce       	rjmp	.-848    	; 0x7f4 <main+0x84>
			{
				
				if( ( strcmp(username, admin_username) == 0 ) && ( strcmp(password, admin_password) == 0 ) )
     b44:	89 2b       	or	r24, r25
     b46:	09 f0       	breq	.+2      	; 0xb4a <__stack+0x2eb>
     b48:	55 ce       	rjmp	.-854    	; 0x7f4 <main+0x84>
     b4a:	64 e7       	ldi	r22, 0x74	; 116
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	83 e7       	ldi	r24, 0x73	; 115
     b50:	93 e0       	ldi	r25, 0x03	; 3
     b52:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     b56:	89 2b       	or	r24, r25
     b58:	09 f0       	breq	.+2      	; 0xb5c <__stack+0x2fd>
     b5a:	4c ce       	rjmp	.-872    	; 0x7f4 <main+0x84>
				{	
						SetBit(flag, 5);
     b5c:	10 62       	ori	r17, 0x20	; 32
     b5e:	10 93 72 03 	sts	0x0372, r17	; 0x800372 <flag>
											
						M_Uart_SendString("/*****************************************************/");
     b62:	88 e5       	ldi	r24, 0x58	; 88
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 97 0c 	call	0x192e	; 0x192e <M_Uart_SendString>
						M_Uart_SendString("1- open door \n\r2- close door \n\r3- add new user\n\r");
     b6a:	80 e9       	ldi	r24, 0x90	; 144
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	0e 94 97 0c 	call	0x192e	; 0x192e <M_Uart_SendString>
						M_Uart_SendString("4- remove old user \n\r5- turn 1st on \n\r6- turn 1st off\n\r");
     b72:	81 ec       	ldi	r24, 0xC1	; 193
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 97 0c 	call	0x192e	; 0x192e <M_Uart_SendString>
						M_Uart_SendString("7- turn 2nd on \n\r8- turn 2nd off \n\r9- turn 3rd on\n\r");
     b7a:	89 ef       	ldi	r24, 0xF9	; 249
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	0e 94 97 0c 	call	0x192e	; 0x192e <M_Uart_SendString>
						M_Uart_SendString("A- turn 3rd off \n\rB- turn 4th on \n\rC- turn 4th off\n\r");
     b82:	8d e2       	ldi	r24, 0x2D	; 45
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	0e 94 97 0c 	call	0x192e	; 0x192e <M_Uart_SendString>
						M_Uart_SendString("D- turn 5th on \n\rE- turn 5th off \n\rF- control dimming\n\r");
     b8a:	82 e6       	ldi	r24, 0x62	; 98
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	0e 94 97 0c 	call	0x192e	; 0x192e <M_Uart_SendString>
						M_Uart_SendString("/*****************************************************/");
     b92:	88 e5       	ldi	r24, 0x58	; 88
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 97 0c 	call	0x192e	; 0x192e <M_Uart_SendString>
						while(1)
						{
							
							if(GetBit(flag, 7) == 1)
     b9a:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     b9e:	88 23       	and	r24, r24
     ba0:	cc f5       	brge	.+114    	; 0xc14 <__stack+0x3b5>
							{
								if( (light_intensity == 100) )
     ba2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ba6:	84 36       	cpi	r24, 0x64	; 100
     ba8:	29 f4       	brne	.+10     	; 0xbb4 <__stack+0x355>
								{
									M_Uart_SendString("Enter Intensity \r\n From 0 to 9 ");
     baa:	8a e9       	ldi	r24, 0x9A	; 154
     bac:	92 e0       	ldi	r25, 0x02	; 2
     bae:	0e 94 97 0c 	call	0x192e	; 0x192e <M_Uart_SendString>
     bb2:	27 c0       	rjmp	.+78     	; 0xc02 <__stack+0x3a3>
								}
								else
								{
									H_Lcd_Clr();
     bb4:	0e 94 3f 09 	call	0x127e	; 0x127e <H_Lcd_Clr>
									M_Timer1_PWM_Control_Mode(2);
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <M_Timer1_PWM_Control_Mode>
									H_Dimmer_Light_Init();
     bbe:	0e 94 c4 07 	call	0xf88	; 0xf88 <H_Dimmer_Light_Init>
									H_Dimmer_Light_SetLight_Intense( (light_intensity/9.0) * 100.0  );
     bc2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__floatsisf>
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e1       	ldi	r20, 0x10	; 16
     bd6:	51 e4       	ldi	r21, 0x41	; 65
     bd8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__divsf3>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	48 ec       	ldi	r20, 0xC8	; 200
     be2:	52 e4       	ldi	r21, 0x42	; 66
     be4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__mulsf3>
     be8:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fixunssfsi>
     bec:	cb 01       	movw	r24, r22
     bee:	0e 94 cd 07 	call	0xf9a	; 0xf9a <H_Dimmer_Light_SetLight_Intense>
									H_Dimmer_Light_Start();
     bf2:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <H_Dimmer_Light_Start>
									ClrBit(flag, 7);
     bf6:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     bfa:	8f 77       	andi	r24, 0x7F	; 127
									SetBit(flag, 5);
     bfc:	80 62       	ori	r24, 0x20	; 32
     bfe:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <flag>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c02:	ef e3       	ldi	r30, 0x3F	; 63
     c04:	fc e9       	ldi	r31, 0x9C	; 156
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <__stack+0x3a7>
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <__stack+0x3ad>
     c0c:	00 00       	nop
										
								}
								_delay_ms(10);
								light_intensity = 100;
     c0e:	84 e6       	ldi	r24, 0x64	; 100
     c10:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
							}
							x = H_TempSensor_Read();
     c14:	0e 94 96 09 	call	0x132c	; 0x132c <H_TempSensor_Read>
     c18:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <x>
							A_Show_Status();
     c1c:	0e 94 31 03 	call	0x662	; 0x662 <A_Show_Status>
							
						}
     c20:	bc cf       	rjmp	.-136    	; 0xb9a <__stack+0x33b>

				}
			}
			
		}
		else if (GetBit(flag, 0) == 0)
     c22:	81 11       	cpse	r24, r1
     c24:	e7 cd       	rjmp	.-1074   	; 0x7f4 <main+0x84>
		{
			
			if(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
     c26:	6d e6       	ldi	r22, 0x6D	; 109
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	83 e8       	ldi	r24, 0x83	; 131
     c2c:	93 e0       	ldi	r25, 0x03	; 3
     c2e:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     c32:	89 2b       	or	r24, r25
     c34:	49 f4       	brne	.+18     	; 0xc48 <__stack+0x3e9>
     c36:	6f e6       	ldi	r22, 0x6F	; 111
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	83 e7       	ldi	r24, 0x73	; 115
     c3c:	93 e0       	ldi	r25, 0x03	; 3
     c3e:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     c42:	89 2b       	or	r24, r25
     c44:	09 f4       	brne	.+2      	; 0xc48 <__stack+0x3e9>
     c46:	1d c1       	rjmp	.+570    	; 0xe82 <__stack+0x623>
				(( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     c48:	6b e6       	ldi	r22, 0x6B	; 107
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	83 e8       	ldi	r24, 0x83	; 131
     c4e:	93 e0       	ldi	r25, 0x03	; 3
     c50:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
			
		}
		else if (GetBit(flag, 0) == 0)
		{
			
			if(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
     c54:	89 2b       	or	r24, r25
     c56:	49 f4       	brne	.+18     	; 0xc6a <__stack+0x40b>
				(( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     c58:	6f e6       	ldi	r22, 0x6F	; 111
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	83 e7       	ldi	r24, 0x73	; 115
     c5e:	93 e0       	ldi	r25, 0x03	; 3
     c60:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     c64:	89 2b       	or	r24, r25
     c66:	09 f4       	brne	.+2      	; 0xc6a <__stack+0x40b>
     c68:	0c c1       	rjmp	.+536    	; 0xe82 <__stack+0x623>
				(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     c6a:	69 e6       	ldi	r22, 0x69	; 105
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	83 e8       	ldi	r24, 0x83	; 131
     c70:	93 e0       	ldi	r25, 0x03	; 3
     c72:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
		}
		else if (GetBit(flag, 0) == 0)
		{
			
			if(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
				(( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     c76:	89 2b       	or	r24, r25
     c78:	49 f4       	brne	.+18     	; 0xc8c <__stack+0x42d>
				(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     c7a:	6f e6       	ldi	r22, 0x6F	; 111
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	83 e7       	ldi	r24, 0x73	; 115
     c80:	93 e0       	ldi	r25, 0x03	; 3
     c82:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     c86:	89 2b       	or	r24, r25
     c88:	09 f4       	brne	.+2      	; 0xc8c <__stack+0x42d>
     c8a:	fb c0       	rjmp	.+502    	; 0xe82 <__stack+0x623>
				(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     c8c:	67 e6       	ldi	r22, 0x67	; 103
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	83 e8       	ldi	r24, 0x83	; 131
     c92:	93 e0       	ldi	r25, 0x03	; 3
     c94:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
		else if (GetBit(flag, 0) == 0)
		{
			
			if(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
				(( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
				(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     c98:	89 2b       	or	r24, r25
     c9a:	49 f4       	brne	.+18     	; 0xcae <__stack+0x44f>
				(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     c9c:	6f e6       	ldi	r22, 0x6F	; 111
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	83 e7       	ldi	r24, 0x73	; 115
     ca2:	93 e0       	ldi	r25, 0x03	; 3
     ca4:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     ca8:	89 2b       	or	r24, r25
     caa:	09 f4       	brne	.+2      	; 0xcae <__stack+0x44f>
     cac:	ea c0       	rjmp	.+468    	; 0xe82 <__stack+0x623>
				(( strcmp(username, user5_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     cae:	65 e6       	ldi	r22, 0x65	; 101
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	83 e8       	ldi	r24, 0x83	; 131
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
		{
			
			if(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
				(( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
				(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
				(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     cba:	89 2b       	or	r24, r25
     cbc:	49 f4       	brne	.+18     	; 0xcd0 <__stack+0x471>
				(( strcmp(username, user5_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     cbe:	6f e6       	ldi	r22, 0x6F	; 111
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	83 e7       	ldi	r24, 0x73	; 115
     cc4:	93 e0       	ldi	r25, 0x03	; 3
     cc6:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     cca:	89 2b       	or	r24, r25
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <__stack+0x471>
     cce:	d9 c0       	rjmp	.+434    	; 0xe82 <__stack+0x623>
				(( strcmp(username, user6_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     cd0:	63 e6       	ldi	r22, 0x63	; 99
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	83 e8       	ldi	r24, 0x83	; 131
     cd6:	93 e0       	ldi	r25, 0x03	; 3
     cd8:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
			
			if(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
				(( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
				(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
				(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
				(( strcmp(username, user5_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     cdc:	89 2b       	or	r24, r25
     cde:	49 f4       	brne	.+18     	; 0xcf2 <__stack+0x493>
				(( strcmp(username, user6_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     ce0:	6f e6       	ldi	r22, 0x6F	; 111
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	83 e7       	ldi	r24, 0x73	; 115
     ce6:	93 e0       	ldi	r25, 0x03	; 3
     ce8:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     cec:	89 2b       	or	r24, r25
     cee:	09 f4       	brne	.+2      	; 0xcf2 <__stack+0x493>
     cf0:	c8 c0       	rjmp	.+400    	; 0xe82 <__stack+0x623>
				(( strcmp(username, user7_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))
     cf2:	61 e6       	ldi	r22, 0x61	; 97
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	83 e8       	ldi	r24, 0x83	; 131
     cf8:	93 e0       	ldi	r25, 0x03	; 3
     cfa:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
			if(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
				(( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
				(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
				(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
				(( strcmp(username, user5_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
				(( strcmp(username, user6_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     cfe:	89 2b       	or	r24, r25
     d00:	09 f0       	breq	.+2      	; 0xd04 <__stack+0x4a5>
     d02:	78 cd       	rjmp	.-1296   	; 0x7f4 <main+0x84>
				(( strcmp(username, user7_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))
     d04:	6f e6       	ldi	r22, 0x6F	; 111
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	83 e7       	ldi	r24, 0x73	; 115
     d0a:	93 e0       	ldi	r25, 0x03	; 3
     d0c:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     d10:	89 2b       	or	r24, r25
     d12:	09 f4       	brne	.+2      	; 0xd16 <__stack+0x4b7>
     d14:	b6 c0       	rjmp	.+364    	; 0xe82 <__stack+0x623>
     d16:	6e cd       	rjmp	.-1316   	; 0x7f4 <main+0x84>
					(( strcmp(username, user5_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
					(( strcmp(username, user6_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
					(( strcmp(username, user7_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))
					)
				{	
					SetBit(flag, 5);
     d18:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     d1c:	80 62       	ori	r24, 0x20	; 32
     d1e:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <flag>
					x = H_TempSensor_Read();
     d22:	0e 94 96 09 	call	0x132c	; 0x132c <H_TempSensor_Read>
     d26:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <x>
					H_Lcd_GoTo(0,0);
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
					H_Lcd_WriteString("1- close door");
     d32:	8a eb       	ldi	r24, 0xBA	; 186
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
					H_Lcd_GoTo(1,0);
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
					H_Lcd_WriteString("2-on 1st 3-off 1st");
     d42:	88 ec       	ldi	r24, 0xC8	; 200
     d44:	92 e0       	ldi	r25, 0x02	; 2
     d46:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
     d4a:	ff ef       	ldi	r31, 0xFF	; 255
     d4c:	23 ed       	ldi	r18, 0xD3	; 211
     d4e:	80 e3       	ldi	r24, 0x30	; 48
     d50:	f1 50       	subi	r31, 0x01	; 1
     d52:	20 40       	sbci	r18, 0x00	; 0
     d54:	80 40       	sbci	r24, 0x00	; 0
     d56:	e1 f7       	brne	.-8      	; 0xd50 <__stack+0x4f1>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <__stack+0x4fb>
     d5a:	00 00       	nop
					_delay_ms(1000);
					H_Lcd_Clr();
     d5c:	0e 94 3f 09 	call	0x127e	; 0x127e <H_Lcd_Clr>
				
					H_Lcd_GoTo(0,0);
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
					H_Lcd_WriteString("4-on 2nd 5-off 2nd");
     d68:	8b ed       	ldi	r24, 0xDB	; 219
     d6a:	92 e0       	ldi	r25, 0x02	; 2
     d6c:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
					H_Lcd_GoTo(1,0);
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
					H_Lcd_WriteString("6-on 3rd 7-off 3rd");
     d78:	8e ee       	ldi	r24, 0xEE	; 238
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
     d80:	9f ef       	ldi	r25, 0xFF	; 255
     d82:	a3 ed       	ldi	r26, 0xD3	; 211
     d84:	b0 e3       	ldi	r27, 0x30	; 48
     d86:	91 50       	subi	r25, 0x01	; 1
     d88:	a0 40       	sbci	r26, 0x00	; 0
     d8a:	b0 40       	sbci	r27, 0x00	; 0
     d8c:	e1 f7       	brne	.-8      	; 0xd86 <__stack+0x527>
     d8e:	00 c0       	rjmp	.+0      	; 0xd90 <__stack+0x531>
     d90:	00 00       	nop
					_delay_ms(1000);
					H_Lcd_Clr();
     d92:	0e 94 3f 09 	call	0x127e	; 0x127e <H_Lcd_Clr>
				
					H_Lcd_GoTo(0,0);
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
					H_Lcd_WriteString("8-on 4th 9-off 4th");
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	93 e0       	ldi	r25, 0x03	; 3
     da2:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
					H_Lcd_GoTo(1,0);
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
					H_Lcd_WriteString("A-on 5th B-off 5th");
     dae:	84 e1       	ldi	r24, 0x14	; 20
     db0:	93 e0       	ldi	r25, 0x03	; 3
     db2:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
     db6:	ef ef       	ldi	r30, 0xFF	; 255
     db8:	f3 ed       	ldi	r31, 0xD3	; 211
     dba:	20 e3       	ldi	r18, 0x30	; 48
     dbc:	e1 50       	subi	r30, 0x01	; 1
     dbe:	f0 40       	sbci	r31, 0x00	; 0
     dc0:	20 40       	sbci	r18, 0x00	; 0
     dc2:	e1 f7       	brne	.-8      	; 0xdbc <__stack+0x55d>
     dc4:	00 c0       	rjmp	.+0      	; 0xdc6 <__stack+0x567>
     dc6:	00 00       	nop
					_delay_ms(1000);
					H_Lcd_Clr();
     dc8:	0e 94 3f 09 	call	0x127e	; 0x127e <H_Lcd_Clr>
				
					H_Lcd_GoTo(0,0);
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
					H_Lcd_WriteString("C- control dimming");
     dd4:	87 e2       	ldi	r24, 0x27	; 39
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	93 ed       	ldi	r25, 0xD3	; 211
     de0:	a0 e3       	ldi	r26, 0x30	; 48
     de2:	81 50       	subi	r24, 0x01	; 1
     de4:	90 40       	sbci	r25, 0x00	; 0
     de6:	a0 40       	sbci	r26, 0x00	; 0
     de8:	e1 f7       	brne	.-8      	; 0xde2 <__stack+0x583>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <__stack+0x58d>
     dec:	00 00       	nop
					_delay_ms(1000);
					H_Lcd_Clr();
     dee:	0e 94 3f 09 	call	0x127e	; 0x127e <H_Lcd_Clr>
					if(GetBit(flag, 7) == 1)
     df2:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     df6:	88 23       	and	r24, r24
     df8:	0c f0       	brlt	.+2      	; 0xdfc <__stack+0x59d>
     dfa:	43 c0       	rjmp	.+134    	; 0xe82 <__stack+0x623>
					{
						
						H_Lcd_WriteString("Enter Intensity ");
     dfc:	8a e3       	ldi	r24, 0x3A	; 58
     dfe:	93 e0       	ldi	r25, 0x03	; 3
     e00:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
						H_Lcd_GoTo(1,0);
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	0e 94 43 09 	call	0x1286	; 0x1286 <H_Lcd_GoTo>
						H_Lcd_WriteString("From 0 to 9 ");
     e0c:	8d ea       	ldi	r24, 0xAD	; 173
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	0e 94 2c 09 	call	0x1258	; 0x1258 <H_Lcd_WriteString>
							
						while( (light_intensity == 100) || (light_intensity == '\0'))
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <__stack+0x5bf>
						{
							light_intensity = H_KeyPad_Read();
     e16:	0e 94 14 08 	call	0x1028	; 0x1028 <H_KeyPad_Read>
     e1a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						
						H_Lcd_WriteString("Enter Intensity ");
						H_Lcd_GoTo(1,0);
						H_Lcd_WriteString("From 0 to 9 ");
							
						while( (light_intensity == 100) || (light_intensity == '\0'))
     e1e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e22:	84 36       	cpi	r24, 0x64	; 100
     e24:	c1 f3       	breq	.-16     	; 0xe16 <__stack+0x5b7>
     e26:	88 23       	and	r24, r24
     e28:	b1 f3       	breq	.-20     	; 0xe16 <__stack+0x5b7>
						{
							light_intensity = H_KeyPad_Read();
						}
						
						ClrBit(flag, 7);
     e2a:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <flag>
     e2e:	8f 77       	andi	r24, 0x7F	; 127
						SetBit(flag, 5);
     e30:	80 62       	ori	r24, 0x20	; 32
     e32:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <flag>
						M_Timer1_PWM_Control_Mode(2);
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <M_Timer1_PWM_Control_Mode>
						H_Dimmer_Light_Init();
     e3c:	0e 94 c4 07 	call	0xf88	; 0xf88 <H_Dimmer_Light_Init>
						H_Dimmer_Light_SetLight_Intense( ((light_intensity-48)/9.0) * 100.0);						
     e40:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	60 53       	subi	r22, 0x30	; 48
     e48:	71 09       	sbc	r23, r1
     e4a:	07 2e       	mov	r0, r23
     e4c:	00 0c       	add	r0, r0
     e4e:	88 0b       	sbc	r24, r24
     e50:	99 0b       	sbc	r25, r25
     e52:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__floatsisf>
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e1       	ldi	r20, 0x10	; 16
     e5c:	51 e4       	ldi	r21, 0x41	; 65
     e5e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__divsf3>
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	48 ec       	ldi	r20, 0xC8	; 200
     e68:	52 e4       	ldi	r21, 0x42	; 66
     e6a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__mulsf3>
     e6e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fixunssfsi>
     e72:	cb 01       	movw	r24, r22
     e74:	0e 94 cd 07 	call	0xf9a	; 0xf9a <H_Dimmer_Light_SetLight_Intense>
						H_Dimmer_Light_Start();
     e78:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <H_Dimmer_Light_Start>
						light_intensity = 100;
     e7c:	84 e6       	ldi	r24, 0x64	; 100
     e7e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				(( strcmp(username, user6_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
				(( strcmp(username, user7_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))
				)
			{
				
				while(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
     e82:	6d e6       	ldi	r22, 0x6D	; 109
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	83 e8       	ldi	r24, 0x83	; 131
     e88:	93 e0       	ldi	r25, 0x03	; 3
     e8a:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     e8e:	89 2b       	or	r24, r25
     e90:	49 f4       	brne	.+18     	; 0xea4 <__stack+0x645>
     e92:	6f e6       	ldi	r22, 0x6F	; 111
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	83 e7       	ldi	r24, 0x73	; 115
     e98:	93 e0       	ldi	r25, 0x03	; 3
     e9a:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     e9e:	89 2b       	or	r24, r25
     ea0:	09 f4       	brne	.+2      	; 0xea4 <__stack+0x645>
     ea2:	3a cf       	rjmp	.-396    	; 0xd18 <__stack+0x4b9>
					(( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     ea4:	6b e6       	ldi	r22, 0x6B	; 107
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	83 e8       	ldi	r24, 0x83	; 131
     eaa:	93 e0       	ldi	r25, 0x03	; 3
     eac:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
				(( strcmp(username, user6_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
				(( strcmp(username, user7_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))
				)
			{
				
				while(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
     eb0:	89 2b       	or	r24, r25
     eb2:	49 f4       	brne	.+18     	; 0xec6 <__stack+0x667>
					(( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     eb4:	6f e6       	ldi	r22, 0x6F	; 111
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	83 e7       	ldi	r24, 0x73	; 115
     eba:	93 e0       	ldi	r25, 0x03	; 3
     ebc:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     ec0:	89 2b       	or	r24, r25
     ec2:	09 f4       	brne	.+2      	; 0xec6 <__stack+0x667>
     ec4:	29 cf       	rjmp	.-430    	; 0xd18 <__stack+0x4b9>
					(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     ec6:	69 e6       	ldi	r22, 0x69	; 105
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	83 e8       	ldi	r24, 0x83	; 131
     ecc:	93 e0       	ldi	r25, 0x03	; 3
     ece:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
				(( strcmp(username, user7_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))
				)
			{
				
				while(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
					(( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     ed2:	89 2b       	or	r24, r25
     ed4:	49 f4       	brne	.+18     	; 0xee8 <__stack+0x689>
					(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     ed6:	6f e6       	ldi	r22, 0x6F	; 111
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	83 e7       	ldi	r24, 0x73	; 115
     edc:	93 e0       	ldi	r25, 0x03	; 3
     ede:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     ee2:	89 2b       	or	r24, r25
     ee4:	09 f4       	brne	.+2      	; 0xee8 <__stack+0x689>
     ee6:	18 cf       	rjmp	.-464    	; 0xd18 <__stack+0x4b9>
					(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     ee8:	67 e6       	ldi	r22, 0x67	; 103
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	83 e8       	ldi	r24, 0x83	; 131
     eee:	93 e0       	ldi	r25, 0x03	; 3
     ef0:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
				)
			{
				
				while(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
					(( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
					(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     ef4:	89 2b       	or	r24, r25
     ef6:	49 f4       	brne	.+18     	; 0xf0a <__stack+0x6ab>
					(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     ef8:	6f e6       	ldi	r22, 0x6F	; 111
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	83 e7       	ldi	r24, 0x73	; 115
     efe:	93 e0       	ldi	r25, 0x03	; 3
     f00:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     f04:	89 2b       	or	r24, r25
     f06:	09 f4       	brne	.+2      	; 0xf0a <__stack+0x6ab>
     f08:	07 cf       	rjmp	.-498    	; 0xd18 <__stack+0x4b9>
					(( strcmp(username, user5_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     f0a:	65 e6       	ldi	r22, 0x65	; 101
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	83 e8       	ldi	r24, 0x83	; 131
     f10:	93 e0       	ldi	r25, 0x03	; 3
     f12:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
			{
				
				while(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
					(( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
					(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
					(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     f16:	89 2b       	or	r24, r25
     f18:	49 f4       	brne	.+18     	; 0xf2c <__stack+0x6cd>
					(( strcmp(username, user5_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     f1a:	6f e6       	ldi	r22, 0x6F	; 111
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	83 e7       	ldi	r24, 0x73	; 115
     f20:	93 e0       	ldi	r25, 0x03	; 3
     f22:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     f26:	89 2b       	or	r24, r25
     f28:	09 f4       	brne	.+2      	; 0xf2c <__stack+0x6cd>
     f2a:	f6 ce       	rjmp	.-532    	; 0xd18 <__stack+0x4b9>
					(( strcmp(username, user6_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     f2c:	63 e6       	ldi	r22, 0x63	; 99
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	83 e8       	ldi	r24, 0x83	; 131
     f32:	93 e0       	ldi	r25, 0x03	; 3
     f34:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
				
				while(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
					(( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
					(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
					(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
					(( strcmp(username, user5_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     f38:	89 2b       	or	r24, r25
     f3a:	49 f4       	brne	.+18     	; 0xf4e <__stack+0x6ef>
					(( strcmp(username, user6_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     f3c:	6f e6       	ldi	r22, 0x6F	; 111
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	83 e7       	ldi	r24, 0x73	; 115
     f42:	93 e0       	ldi	r25, 0x03	; 3
     f44:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     f48:	89 2b       	or	r24, r25
     f4a:	09 f4       	brne	.+2      	; 0xf4e <__stack+0x6ef>
     f4c:	e5 ce       	rjmp	.-566    	; 0xd18 <__stack+0x4b9>
					(( strcmp(username, user7_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))
     f4e:	61 e6       	ldi	r22, 0x61	; 97
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	83 e8       	ldi	r24, 0x83	; 131
     f54:	93 e0       	ldi	r25, 0x03	; 3
     f56:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
				while(((  strcmp(username, user1_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))  ||
					(( strcmp(username, user2_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
					(( strcmp(username, user3_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
					(( strcmp(username, user4_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
					(( strcmp(username, user5_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
					(( strcmp(username, user6_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 )) ||
     f5a:	89 2b       	or	r24, r25
     f5c:	09 f0       	breq	.+2      	; 0xf60 <__stack+0x701>
     f5e:	4a cc       	rjmp	.-1900   	; 0x7f4 <main+0x84>
					(( strcmp(username, user7_id) == 0 ) && ( strcmp(password, ordinary_password) == 0 ))
     f60:	6f e6       	ldi	r22, 0x6F	; 111
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	83 e7       	ldi	r24, 0x73	; 115
     f66:	93 e0       	ldi	r25, 0x03	; 3
     f68:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcmp>
     f6c:	89 2b       	or	r24, r25
     f6e:	09 f4       	brne	.+2      	; 0xf72 <__stack+0x713>
     f70:	d3 ce       	rjmp	.-602    	; 0xd18 <__stack+0x4b9>
     f72:	40 cc       	rjmp	.-1920   	; 0x7f4 <main+0x84>

00000f74 <H_Buzzer_Init>:

#include "Buzzer.h"

void H_Buzzer_Init(void)
{
	M_Dio_PinMode(BUZZER_PIN,OUTPUT);
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	8f e2       	ldi	r24, 0x2F	; 47
     f78:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
     f7c:	08 95       	ret

00000f7e <H_Buzzer_On>:
}

void H_Buzzer_On(void)
{
	M_Dio_PinWrite(BUZZER_PIN,HIGH);
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	8f e2       	ldi	r24, 0x2F	; 47
     f82:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
     f86:	08 95       	ret

00000f88 <H_Dimmer_Light_Init>:

#include "Dimmer_Light.h"

void H_Dimmer_Light_Init(void)
{
 M_Timer1_PWMInit();                    //Turn on Dimmer_Light//
     f88:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <M_Timer1_PWMInit>
M_Timer1_PWM_SetFrequency(50);
     f8c:	62 e3       	ldi	r22, 0x32	; 50
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 14 0c 	call	0x1828	; 0x1828 <M_Timer1_PWM_SetFrequency>
     f98:	08 95       	ret

00000f9a <H_Dimmer_Light_SetLight_Intense>:



void H_Dimmer_Light_SetLight_Intense(u16 Local_u8_Intensity)     //Control Dimmer Light Intensity// 
{
	M_Timer1_PWM_SetDutyCycle(Local_u8_Intensity);
     f9a:	0e 94 32 0c 	call	0x1864	; 0x1864 <M_Timer1_PWM_SetDutyCycle>
     f9e:	08 95       	ret

00000fa0 <H_Dimmer_Light_Start>:
}
void H_Dimmer_Light_Start(void)
{
	M_Timer1_Pwm_Start();
     fa0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <M_Timer1_Pwm_Start>
     fa4:	08 95       	ret

00000fa6 <H_KeyPad_Init>:

#include "KeyPad.h"

void H_KeyPad_Init(void)
{
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	84 e1       	ldi	r24, 0x14	; 20
     faa:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	85 e1       	ldi	r24, 0x15	; 21
     fb2:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	86 e1       	ldi	r24, 0x16	; 22
     fba:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	87 e1       	ldi	r24, 0x17	; 23
     fc2:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
     fc6:	62 e0       	ldi	r22, 0x02	; 2
     fc8:	88 e1       	ldi	r24, 0x18	; 24
     fca:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
     fce:	62 e0       	ldi	r22, 0x02	; 2
     fd0:	89 e1       	ldi	r24, 0x19	; 25
     fd2:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
     fd6:	62 e0       	ldi	r22, 0x02	; 2
     fd8:	8a e1       	ldi	r24, 0x1A	; 26
     fda:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
     fde:	62 e0       	ldi	r22, 0x02	; 2
     fe0:	8b e1       	ldi	r24, 0x1B	; 27
     fe2:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	84 e1       	ldi	r24, 0x14	; 20
     fea:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	85 e1       	ldi	r24, 0x15	; 21
     ff2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
     ff6:	61 e0       	ldi	r22, 0x01	; 1
     ff8:	86 e1       	ldi	r24, 0x16	; 22
     ffa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	87 e1       	ldi	r24, 0x17	; 23
    1002:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
	M_Dio_PinPullUpRes(KEYPAD_C0_PIN,ENABLE);
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	88 e1       	ldi	r24, 0x18	; 24
    100a:	0e 94 2b 0b 	call	0x1656	; 0x1656 <M_Dio_PinPullUpRes>
	M_Dio_PinPullUpRes(KEYPAD_C1_PIN,ENABLE);
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	89 e1       	ldi	r24, 0x19	; 25
    1012:	0e 94 2b 0b 	call	0x1656	; 0x1656 <M_Dio_PinPullUpRes>
	M_Dio_PinPullUpRes(KEYPAD_C2_PIN,ENABLE);
    1016:	61 e0       	ldi	r22, 0x01	; 1
    1018:	8a e1       	ldi	r24, 0x1A	; 26
    101a:	0e 94 2b 0b 	call	0x1656	; 0x1656 <M_Dio_PinPullUpRes>
	M_Dio_PinPullUpRes(KEYPAD_C3_PIN,ENABLE);
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	8b e1       	ldi	r24, 0x1B	; 27
    1022:	0e 94 2b 0b 	call	0x1656	; 0x1656 <M_Dio_PinPullUpRes>
    1026:	08 95       	ret

00001028 <H_KeyPad_Read>:
}
u8   H_KeyPad_Read(void)
{
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	60 97       	sbiw	r28, 0x10	; 16
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8_Arr[4][4] = { {'7', '8', '9', 'A'},
    1042:	80 e1       	ldi	r24, 0x10	; 16
    1044:	e0 e8       	ldi	r30, 0x80	; 128
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	de 01       	movw	r26, r28
    104a:	11 96       	adiw	r26, 0x01	; 1
    104c:	01 90       	ld	r0, Z+
    104e:	0d 92       	st	X+, r0
    1050:	8a 95       	dec	r24
    1052:	e1 f7       	brne	.-8      	; 0x104c <H_KeyPad_Read+0x24>
	u8 Local_u8_Value = _NULL;
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	
	
	for (Local_u8_Row = KEYPAD_R0_PIN; Local_u8_Row <= KEYPAD_R3_PIN; Local_u8_Row++ )
    1054:	04 e1       	ldi	r16, 0x14	; 20
	u8 Local_u8_Arr[4][4] = { {'7', '8', '9', 'A'},
							  {'4', '5', '6', 'B'},
							  {'1', '2', '3', 'C'},
							  {'*', '0', '#', 'D'} };
	u8 Local_u8_Reading = KEYPAD_RELEASED;
	u8 Local_u8_Value = _NULL;
    1056:	f1 2c       	mov	r15, r1
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	
	
	for (Local_u8_Row = KEYPAD_R0_PIN; Local_u8_Row <= KEYPAD_R3_PIN; Local_u8_Row++ )
    1058:	38 c0       	rjmp	.+112    	; 0x10ca <H_KeyPad_Read+0xa2>
	{
		M_Dio_PinWrite(Local_u8_Row, LOW);
    105a:	62 e0       	ldi	r22, 0x02	; 2
    105c:	80 2f       	mov	r24, r16
    105e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
		
		for (Local_u8_Col = KEYPAD_C0_PIN; Local_u8_Col <= KEYPAD_C3_PIN; Local_u8_Col++)
    1062:	18 e1       	ldi	r17, 0x18	; 24
    1064:	2b c0       	rjmp	.+86     	; 0x10bc <H_KeyPad_Read+0x94>
		{
			Local_u8_Reading = M_Dio_PinRead(Local_u8_Col);
    1066:	81 2f       	mov	r24, r17
    1068:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <M_Dio_PinRead>
			if(Local_u8_Reading == KEYPAD_PRESSED)
    106c:	81 11       	cpse	r24, r1
    106e:	25 c0       	rjmp	.+74     	; 0x10ba <H_KeyPad_Read+0x92>
    1070:	8f e9       	ldi	r24, 0x9F	; 159
    1072:	9f e0       	ldi	r25, 0x0F	; 15
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <H_KeyPad_Read+0x4c>
    1078:	00 c0       	rjmp	.+0      	; 0x107a <H_KeyPad_Read+0x52>
    107a:	00 00       	nop
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if ( M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED)
    107c:	81 2f       	mov	r24, r17
    107e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <M_Dio_PinRead>
    1082:	81 11       	cpse	r24, r1
    1084:	1a c0       	rjmp	.+52     	; 0x10ba <H_KeyPad_Read+0x92>
				{
					Local_u8_Value = Local_u8_Arr[Local_u8_Row - KEYPAD_R0_PIN ][Local_u8_Col - KEYPAD_C0_PIN];
    1086:	80 2f       	mov	r24, r16
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	44 97       	sbiw	r24, 0x14	; 20
    108c:	21 2f       	mov	r18, r17
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	28 51       	subi	r18, 0x18	; 24
    1092:	31 09       	sbc	r19, r1
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	41 e0       	ldi	r20, 0x01	; 1
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	4c 0f       	add	r20, r28
    10a2:	5d 1f       	adc	r21, r29
    10a4:	84 0f       	add	r24, r20
    10a6:	95 1f       	adc	r25, r21
    10a8:	fc 01       	movw	r30, r24
    10aa:	e2 0f       	add	r30, r18
    10ac:	f3 1f       	adc	r31, r19
    10ae:	f0 80       	ld	r15, Z
					while (M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED);
    10b0:	81 2f       	mov	r24, r17
    10b2:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <M_Dio_PinRead>
    10b6:	88 23       	and	r24, r24
    10b8:	d9 f3       	breq	.-10     	; 0x10b0 <H_KeyPad_Read+0x88>
	
	for (Local_u8_Row = KEYPAD_R0_PIN; Local_u8_Row <= KEYPAD_R3_PIN; Local_u8_Row++ )
	{
		M_Dio_PinWrite(Local_u8_Row, LOW);
		
		for (Local_u8_Col = KEYPAD_C0_PIN; Local_u8_Col <= KEYPAD_C3_PIN; Local_u8_Col++)
    10ba:	1f 5f       	subi	r17, 0xFF	; 255
    10bc:	1c 31       	cpi	r17, 0x1C	; 28
    10be:	98 f2       	brcs	.-90     	; 0x1066 <H_KeyPad_Read+0x3e>
				}
			}
			
		}
		
		M_Dio_PinWrite(Local_u8_Row, HIGH);
    10c0:	61 e0       	ldi	r22, 0x01	; 1
    10c2:	80 2f       	mov	r24, r16
    10c4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
	u8 Local_u8_Value = _NULL;
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	
	
	for (Local_u8_Row = KEYPAD_R0_PIN; Local_u8_Row <= KEYPAD_R3_PIN; Local_u8_Row++ )
    10c8:	0f 5f       	subi	r16, 0xFF	; 255
    10ca:	08 31       	cpi	r16, 0x18	; 24
    10cc:	30 f2       	brcs	.-116    	; 0x105a <H_KeyPad_Read+0x32>
		M_Dio_PinWrite(Local_u8_Row, HIGH);
		/*_delay_ms(1);*/
	}
	
	return Local_u8_Value;
}
    10ce:	8f 2d       	mov	r24, r15
    10d0:	60 96       	adiw	r28, 0x10	; 16
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	08 95       	ret

000010e8 <H_Lcd_WriteCharacter>:
	H_Lcd_WriteCommand(Local_u8_Arr[Local_u8_Row] + Local_u8_Col);
}

void H_Lcd_ShiftRight(void)
{
	H_Lcd_WriteCommand(LCD_SHIFT_RIGHT);
    10e8:	cf 93       	push	r28
    10ea:	c8 2f       	mov	r28, r24
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	8b e0       	ldi	r24, 0x0B	; 11
    10f0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    10f4:	8b b3       	in	r24, 0x1b	; 27
    10f6:	9c 2f       	mov	r25, r28
    10f8:	90 7f       	andi	r25, 0xF0	; 240
    10fa:	8f 70       	andi	r24, 0x0F	; 15
    10fc:	89 2b       	or	r24, r25
    10fe:	8b bb       	out	0x1b, r24	; 27
    1100:	61 e0       	ldi	r22, 0x01	; 1
    1102:	8d e0       	ldi	r24, 0x0D	; 13
    1104:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    1108:	8f e9       	ldi	r24, 0x9F	; 159
    110a:	9f e0       	ldi	r25, 0x0F	; 15
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <H_Lcd_WriteCharacter+0x24>
    1110:	00 c0       	rjmp	.+0      	; 0x1112 <H_Lcd_WriteCharacter+0x2a>
    1112:	00 00       	nop
    1114:	62 e0       	ldi	r22, 0x02	; 2
    1116:	8d e0       	ldi	r24, 0x0D	; 13
    1118:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    111c:	8f e9       	ldi	r24, 0x9F	; 159
    111e:	9f e0       	ldi	r25, 0x0F	; 15
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <H_Lcd_WriteCharacter+0x38>
    1124:	00 c0       	rjmp	.+0      	; 0x1126 <H_Lcd_WriteCharacter+0x3e>
    1126:	00 00       	nop
    1128:	20 e1       	ldi	r18, 0x10	; 16
    112a:	c2 9f       	mul	r28, r18
    112c:	c0 01       	movw	r24, r0
    112e:	11 24       	eor	r1, r1
    1130:	9b b3       	in	r25, 0x1b	; 27
    1132:	9f 70       	andi	r25, 0x0F	; 15
    1134:	89 2b       	or	r24, r25
    1136:	8b bb       	out	0x1b, r24	; 27
    1138:	61 e0       	ldi	r22, 0x01	; 1
    113a:	8d e0       	ldi	r24, 0x0D	; 13
    113c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    1140:	8f e9       	ldi	r24, 0x9F	; 159
    1142:	9f e0       	ldi	r25, 0x0F	; 15
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <H_Lcd_WriteCharacter+0x5c>
    1148:	00 c0       	rjmp	.+0      	; 0x114a <H_Lcd_WriteCharacter+0x62>
    114a:	00 00       	nop
    114c:	62 e0       	ldi	r22, 0x02	; 2
    114e:	8d e0       	ldi	r24, 0x0D	; 13
    1150:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    1154:	8f e1       	ldi	r24, 0x1F	; 31
    1156:	9e e4       	ldi	r25, 0x4E	; 78
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <H_Lcd_WriteCharacter+0x70>
    115c:	00 c0       	rjmp	.+0      	; 0x115e <H_Lcd_WriteCharacter+0x76>
    115e:	00 00       	nop
    1160:	cf 91       	pop	r28
    1162:	08 95       	ret

00001164 <H_Lcd_WriteCommand>:
    1164:	cf 93       	push	r28
    1166:	c8 2f       	mov	r28, r24
    1168:	62 e0       	ldi	r22, 0x02	; 2
    116a:	8b e0       	ldi	r24, 0x0B	; 11
    116c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    1170:	8b b3       	in	r24, 0x1b	; 27
    1172:	9c 2f       	mov	r25, r28
    1174:	90 7f       	andi	r25, 0xF0	; 240
    1176:	8f 70       	andi	r24, 0x0F	; 15
    1178:	89 2b       	or	r24, r25
    117a:	8b bb       	out	0x1b, r24	; 27
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	8d e0       	ldi	r24, 0x0D	; 13
    1180:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    1184:	8f e9       	ldi	r24, 0x9F	; 159
    1186:	9f e0       	ldi	r25, 0x0F	; 15
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <H_Lcd_WriteCommand+0x24>
    118c:	00 c0       	rjmp	.+0      	; 0x118e <H_Lcd_WriteCommand+0x2a>
    118e:	00 00       	nop
    1190:	62 e0       	ldi	r22, 0x02	; 2
    1192:	8d e0       	ldi	r24, 0x0D	; 13
    1194:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    1198:	8f e9       	ldi	r24, 0x9F	; 159
    119a:	9f e0       	ldi	r25, 0x0F	; 15
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <H_Lcd_WriteCommand+0x38>
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <H_Lcd_WriteCommand+0x3e>
    11a2:	00 00       	nop
    11a4:	20 e1       	ldi	r18, 0x10	; 16
    11a6:	c2 9f       	mul	r28, r18
    11a8:	c0 01       	movw	r24, r0
    11aa:	11 24       	eor	r1, r1
    11ac:	9b b3       	in	r25, 0x1b	; 27
    11ae:	9f 70       	andi	r25, 0x0F	; 15
    11b0:	89 2b       	or	r24, r25
    11b2:	8b bb       	out	0x1b, r24	; 27
    11b4:	61 e0       	ldi	r22, 0x01	; 1
    11b6:	8d e0       	ldi	r24, 0x0D	; 13
    11b8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    11bc:	8f e9       	ldi	r24, 0x9F	; 159
    11be:	9f e0       	ldi	r25, 0x0F	; 15
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <H_Lcd_WriteCommand+0x5c>
    11c4:	00 c0       	rjmp	.+0      	; 0x11c6 <H_Lcd_WriteCommand+0x62>
    11c6:	00 00       	nop
    11c8:	62 e0       	ldi	r22, 0x02	; 2
    11ca:	8d e0       	ldi	r24, 0x0D	; 13
    11cc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    11d0:	8f e1       	ldi	r24, 0x1F	; 31
    11d2:	9e e4       	ldi	r25, 0x4E	; 78
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <H_Lcd_WriteCommand+0x70>
    11d8:	00 c0       	rjmp	.+0      	; 0x11da <H_Lcd_WriteCommand+0x76>
    11da:	00 00       	nop
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <H_Lcd_Init>:
    11e0:	61 e0       	ldi	r22, 0x01	; 1
    11e2:	8e e0       	ldi	r24, 0x0E	; 14
    11e4:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
    11e8:	61 e0       	ldi	r22, 0x01	; 1
    11ea:	8f e0       	ldi	r24, 0x0F	; 15
    11ec:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
    11f0:	61 e0       	ldi	r22, 0x01	; 1
    11f2:	80 e1       	ldi	r24, 0x10	; 16
    11f4:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	81 e1       	ldi	r24, 0x11	; 17
    11fc:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
    1200:	61 e0       	ldi	r22, 0x01	; 1
    1202:	8b e0       	ldi	r24, 0x0B	; 11
    1204:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
    1208:	61 e0       	ldi	r22, 0x01	; 1
    120a:	8d e0       	ldi	r24, 0x0D	; 13
    120c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
    1210:	61 e0       	ldi	r22, 0x01	; 1
    1212:	8c e0       	ldi	r24, 0x0C	; 12
    1214:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
    1218:	62 e0       	ldi	r22, 0x02	; 2
    121a:	8c e0       	ldi	r24, 0x0C	; 12
    121c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    1220:	2f ef       	ldi	r18, 0xFF	; 255
    1222:	81 ee       	ldi	r24, 0xE1	; 225
    1224:	94 e0       	ldi	r25, 0x04	; 4
    1226:	21 50       	subi	r18, 0x01	; 1
    1228:	80 40       	sbci	r24, 0x00	; 0
    122a:	90 40       	sbci	r25, 0x00	; 0
    122c:	e1 f7       	brne	.-8      	; 0x1226 <H_Lcd_Init+0x46>
    122e:	00 c0       	rjmp	.+0      	; 0x1230 <H_Lcd_Init+0x50>
    1230:	00 00       	nop
    1232:	83 e3       	ldi	r24, 0x33	; 51
    1234:	0e 94 b2 08 	call	0x1164	; 0x1164 <H_Lcd_WriteCommand>
    1238:	82 e3       	ldi	r24, 0x32	; 50
    123a:	0e 94 b2 08 	call	0x1164	; 0x1164 <H_Lcd_WriteCommand>
    123e:	88 e2       	ldi	r24, 0x28	; 40
    1240:	0e 94 b2 08 	call	0x1164	; 0x1164 <H_Lcd_WriteCommand>
    1244:	8c e0       	ldi	r24, 0x0C	; 12
    1246:	0e 94 b2 08 	call	0x1164	; 0x1164 <H_Lcd_WriteCommand>
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	0e 94 b2 08 	call	0x1164	; 0x1164 <H_Lcd_WriteCommand>
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	0e 94 b2 08 	call	0x1164	; 0x1164 <H_Lcd_WriteCommand>
    1256:	08 95       	ret

00001258 <H_Lcd_WriteString>:
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	8c 01       	movw	r16, r24
    1260:	c0 e0       	ldi	r28, 0x00	; 0
    1262:	03 c0       	rjmp	.+6      	; 0x126a <H_Lcd_WriteString+0x12>
    1264:	0e 94 74 08 	call	0x10e8	; 0x10e8 <H_Lcd_WriteCharacter>
    1268:	cf 5f       	subi	r28, 0xFF	; 255
    126a:	f8 01       	movw	r30, r16
    126c:	ec 0f       	add	r30, r28
    126e:	f1 1d       	adc	r31, r1
    1270:	80 81       	ld	r24, Z
    1272:	81 11       	cpse	r24, r1
    1274:	f7 cf       	rjmp	.-18     	; 0x1264 <H_Lcd_WriteString+0xc>
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <H_Lcd_Clr>:
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	0e 94 b2 08 	call	0x1164	; 0x1164 <H_Lcd_WriteCommand>
    1284:	08 95       	ret

00001286 <H_Lcd_GoTo>:
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	00 d0       	rcall	.+0      	; 0x128c <H_Lcd_GoTo+0x6>
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	90 e8       	ldi	r25, 0x80	; 128
    1292:	99 83       	std	Y+1, r25	; 0x01
    1294:	90 ec       	ldi	r25, 0xC0	; 192
    1296:	9a 83       	std	Y+2, r25	; 0x02
    1298:	e1 e0       	ldi	r30, 0x01	; 1
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	ec 0f       	add	r30, r28
    129e:	fd 1f       	adc	r31, r29
    12a0:	e8 0f       	add	r30, r24
    12a2:	f1 1d       	adc	r31, r1
    12a4:	80 81       	ld	r24, Z
    12a6:	86 0f       	add	r24, r22
    12a8:	0e 94 b2 08 	call	0x1164	; 0x1164 <H_Lcd_WriteCommand>
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	08 95       	ret

000012b6 <H_Lcd_ShiftLeft>:
}

void H_Lcd_ShiftLeft(void)
{
	H_Lcd_WriteCommand(LCD_SHIFT_LEFT);
    12b6:	88 e1       	ldi	r24, 0x18	; 24
    12b8:	0e 94 b2 08 	call	0x1164	; 0x1164 <H_Lcd_WriteCommand>
    12bc:	08 95       	ret

000012be <H_DcMotor_Init>:

#include "DcMotor.h"

void H_DcMotor_Init(void)
{
	M_Dio_PinMode(MOTOR_PIN, OUTPUT);
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	8e e2       	ldi	r24, 0x2E	; 46
    12c2:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
    12c6:	08 95       	ret

000012c8 <H_DcMotor_Stop>:
}

void H_DcMotor_Stop(void)
{
	M_Dio_PinWrite(MOTOR_PIN, LOW);
    12c8:	62 e0       	ldi	r22, 0x02	; 2
    12ca:	8e e2       	ldi	r24, 0x2E	; 46
    12cc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    12d0:	08 95       	ret

000012d2 <H_DcMotor_Start>:
}
void H_DcMotor_Start(void)
{
	M_Dio_PinWrite(MOTOR_PIN, HIGH);
    12d2:	61 e0       	ldi	r22, 0x01	; 1
    12d4:	8e e2       	ldi	r24, 0x2E	; 46
    12d6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    12da:	08 95       	ret

000012dc <H_Relay_Init>:

#include "Relay.h"

void H_Relay_Init(u8 channel)
{
	M_Dio_PinMode(channel, OUTPUT);
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	0e 94 d5 09 	call	0x13aa	; 0x13aa <M_Dio_PinMode>
    12e2:	08 95       	ret

000012e4 <H_Relay_On>:
}

void H_Relay_On(u8 channel)
{
	M_Dio_PinWrite(channel, HIGH);
    12e4:	61 e0       	ldi	r22, 0x01	; 1
    12e6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    12ea:	08 95       	ret

000012ec <H_Relay_Off>:
}

void H_Relay_Off(u8 channel)
{
	M_Dio_PinWrite(channel, LOW);
    12ec:	62 e0       	ldi	r22, 0x02	; 2
    12ee:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <M_Dio_PinWrite>
    12f2:	08 95       	ret

000012f4 <H_ServoMotor_Init>:
#include "Servo.h"


void H_ServoMotor_Init(void)
{	
	M_Timer1_PWMInit();                  //Turn on Door//
    12f4:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <M_Timer1_PWMInit>
	M_Timer1_PWM_SetFrequency(50);
    12f8:	62 e3       	ldi	r22, 0x32	; 50
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 14 0c 	call	0x1828	; 0x1828 <M_Timer1_PWM_SetFrequency>
    1304:	08 95       	ret

00001306 <H_ServoMotor_SetPosition>:



void H_ServoMotor_SetPosition(u8 Local_u8_Direction)
{
	switch(Local_u8_Direction)
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	19 f0       	breq	.+6      	; 0x1310 <H_ServoMotor_SetPosition+0xa>
    130a:	82 30       	cpi	r24, 0x02	; 2
    130c:	29 f0       	breq	.+10     	; 0x1318 <H_ServoMotor_SetPosition+0x12>
    130e:	08 95       	ret
	{
		case OPEN:
		
		
		M_Timer1_PWM_SetDutyCycle(5);  //Door is Opened in 90 degree//
    1310:	85 e0       	ldi	r24, 0x05	; 5
    1312:	0e 94 32 0c 	call	0x1864	; 0x1864 <M_Timer1_PWM_SetDutyCycle>
		
		
		
		break;
    1316:	08 95       	ret
		
		case CLOSE:
		
		M_Timer1_PWM_SetDutyCycle(10);   //Door is Closed in -90 degree//
    1318:	8a e0       	ldi	r24, 0x0A	; 10
    131a:	0e 94 32 0c 	call	0x1864	; 0x1864 <M_Timer1_PWM_SetDutyCycle>
    131e:	08 95       	ret

00001320 <H_ServoMotor_Start>:
	}
	
}
void H_ServoMotor_Start(void)
{
	M_Timer1_Pwm_Start();  
    1320:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <M_Timer1_Pwm_Start>
    1324:	08 95       	ret

00001326 <H_TempSensor_Init>:

#include "TempSensor.h"

void H_TempSensor_Init(void)
{
	M_Adc_Init();
    1326:	0e 94 a5 09 	call	0x134a	; 0x134a <M_Adc_Init>
    132a:	08 95       	ret

0000132c <H_TempSensor_Read>:


u8 H_TempSensor_Read(void)
{
	
	u16 Local_u16_AdcVal =	M_Adc_Read();
    132c:	0e 94 cd 09 	call	0x139a	; 0x139a <M_Adc_Read>
	u8 Local_u8_Temp = ((u32)Local_u16_AdcVal*510)/1023; //u32 casting 3shan Value could be more than 2 bytes
    1330:	9c 01       	movw	r18, r24
    1332:	ae ef       	ldi	r26, 0xFE	; 254
    1334:	b1 e0       	ldi	r27, 0x01	; 1
    1336:	0e 94 42 12 	call	0x2484	; 0x2484 <__umulhisi3>
    133a:	2f ef       	ldi	r18, 0xFF	; 255
    133c:	33 e0       	ldi	r19, 0x03	; 3
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__udivmodsi4>
    1346:	82 2f       	mov	r24, r18
	return Local_u8_Temp;
}
    1348:	08 95       	ret

0000134a <M_Adc_Init>:
{
	
//ADMUX Register Confg.	 
	// seting the source of V refrence for ADC circuit and conversion 
	#if		 VREF	==	AVCC
	SetBit(_ADMUX,6);
    134a:	87 b1       	in	r24, 0x07	; 7
    134c:	80 64       	ori	r24, 0x40	; 64
    134e:	87 b9       	out	0x07, r24	; 7
	ClrBit(_ADMUX,7);
    1350:	87 b1       	in	r24, 0x07	; 7
    1352:	8f 77       	andi	r24, 0x7F	; 127
    1354:	87 b9       	out	0x07, r24	; 7
	ClrBit(_ADMUX,7);
	#elif	 VREF	==	_2V56
	SetBit(_ADMUX,6);
	SetBit(_ADMUX,7);
	#endif
	ClrBit(_ADMUX,5); // Right Adjust   <<<<<< BIT5 control right or left adjust
    1356:	87 b1       	in	r24, 0x07	; 7
    1358:	8f 7d       	andi	r24, 0xDF	; 223
    135a:	87 b9       	out	0x07, r24	; 7
	
	/*bits from 0 to 4 in ADMUX control which signal 
	to get from which Analog Pin PA0 > PA7*/
	// selecting Channel
	ClrBit(_ADMUX,0); //ADC1 PA0 will be the ADC Pin only // error??
    135c:	87 b1       	in	r24, 0x07	; 7
    135e:	8e 7f       	andi	r24, 0xFE	; 254
    1360:	87 b9       	out	0x07, r24	; 7
	ClrBit(_ADMUX,1);
    1362:	87 b1       	in	r24, 0x07	; 7
    1364:	8d 7f       	andi	r24, 0xFD	; 253
    1366:	87 b9       	out	0x07, r24	; 7
	ClrBit(_ADMUX,2);
    1368:	87 b1       	in	r24, 0x07	; 7
    136a:	8b 7f       	andi	r24, 0xFB	; 251
    136c:	87 b9       	out	0x07, r24	; 7
	ClrBit(_ADMUX,3);
    136e:	87 b1       	in	r24, 0x07	; 7
    1370:	87 7f       	andi	r24, 0xF7	; 247
    1372:	87 b9       	out	0x07, r24	; 7
	ClrBit(_ADMUX,4);
    1374:	87 b1       	in	r24, 0x07	; 7
    1376:	8f 7e       	andi	r24, 0xEF	; 239
    1378:	87 b9       	out	0x07, r24	; 7

//ADCSRA Config			
	//setting prescaller 128 
	//125 khzz	 , it should be done before enablling ADC
	SetBit(_ADCSRA,0);
    137a:	86 b1       	in	r24, 0x06	; 6
    137c:	81 60       	ori	r24, 0x01	; 1
    137e:	86 b9       	out	0x06, r24	; 6
	SetBit(_ADCSRA,1);
    1380:	86 b1       	in	r24, 0x06	; 6
    1382:	82 60       	ori	r24, 0x02	; 2
    1384:	86 b9       	out	0x06, r24	; 6
	SetBit(_ADCSRA,2);	
    1386:	86 b1       	in	r24, 0x06	; 6
    1388:	84 60       	ori	r24, 0x04	; 4
    138a:	86 b9       	out	0x06, r24	; 6
	//Auto Trigger Enable
	SetBit(_ADCSRA,5);
    138c:	86 b1       	in	r24, 0x06	; 6
    138e:	80 62       	ori	r24, 0x20	; 32
    1390:	86 b9       	out	0x06, r24	; 6
	/*ClrBit(SFIOR,7);
	ClrBit(SFIOR,6);
	ClrBit(SFIOR,5);*/
	
	//enable ADC Circuit
	SetBit(_ADCSRA,7);
    1392:	86 b1       	in	r24, 0x06	; 6
    1394:	80 68       	ori	r24, 0x80	; 128
    1396:	86 b9       	out	0x06, r24	; 6
    1398:	08 95       	ret

0000139a <M_Adc_Read>:
	
}

u16 M_Adc_Read()
{
	SetBit(_ADCSRA,6); //start conversion
    139a:	86 b1       	in	r24, 0x06	; 6
    139c:	80 64       	ori	r24, 0x40	; 64
    139e:	86 b9       	out	0x06, r24	; 6
	
	while (GetBit(_ADCSRA,4) == 0);
    13a0:	34 9b       	sbis	0x06, 4	; 6
    13a2:	fe cf       	rjmp	.-4      	; 0x13a0 <M_Adc_Read+0x6>
	
	return ADC_VALUE;
    13a4:	84 b1       	in	r24, 0x04	; 4
    13a6:	95 b1       	in	r25, 0x05	; 5
    13a8:	08 95       	ret

000013aa <M_Dio_PinMode>:
	switch(Local_u8_Port)
	{
		case 1: TogBit(_PORTA,Local_u8_Pin); break;
		case 2: TogBit(_PORTB,Local_u8_Pin); break;
		case 3: TogBit(_PORTC,Local_u8_Pin); break;
		case 4: TogBit(_PORTD,Local_u8_Pin); break;
    13aa:	9d ec       	ldi	r25, 0xCD	; 205
    13ac:	89 9f       	mul	r24, r25
    13ae:	91 2d       	mov	r25, r1
    13b0:	11 24       	eor	r1, r1
    13b2:	29 2f       	mov	r18, r25
    13b4:	26 95       	lsr	r18
    13b6:	26 95       	lsr	r18
    13b8:	26 95       	lsr	r18
    13ba:	22 0f       	add	r18, r18
    13bc:	32 2f       	mov	r19, r18
    13be:	33 0f       	add	r19, r19
    13c0:	33 0f       	add	r19, r19
    13c2:	23 0f       	add	r18, r19
    13c4:	82 1b       	sub	r24, r18
    13c6:	28 2f       	mov	r18, r24
    13c8:	96 95       	lsr	r25
    13ca:	96 95       	lsr	r25
    13cc:	96 95       	lsr	r25
    13ce:	61 30       	cpi	r22, 0x01	; 1
    13d0:	19 f0       	breq	.+6      	; 0x13d8 <M_Dio_PinMode+0x2e>
    13d2:	62 30       	cpi	r22, 0x02	; 2
    13d4:	c1 f1       	breq	.+112    	; 0x1446 <M_Dio_PinMode+0x9c>
    13d6:	08 95       	ret
    13d8:	92 30       	cpi	r25, 0x02	; 2
    13da:	a1 f0       	breq	.+40     	; 0x1404 <M_Dio_PinMode+0x5a>
    13dc:	18 f4       	brcc	.+6      	; 0x13e4 <M_Dio_PinMode+0x3a>
    13de:	91 30       	cpi	r25, 0x01	; 1
    13e0:	31 f0       	breq	.+12     	; 0x13ee <M_Dio_PinMode+0x44>
    13e2:	08 95       	ret
    13e4:	93 30       	cpi	r25, 0x03	; 3
    13e6:	c9 f0       	breq	.+50     	; 0x141a <M_Dio_PinMode+0x70>
    13e8:	94 30       	cpi	r25, 0x04	; 4
    13ea:	11 f1       	breq	.+68     	; 0x1430 <M_Dio_PinMode+0x86>
    13ec:	08 95       	ret
    13ee:	3a b3       	in	r19, 0x1a	; 26
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <M_Dio_PinMode+0x50>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	2a 95       	dec	r18
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <M_Dio_PinMode+0x4c>
    13fe:	83 2b       	or	r24, r19
    1400:	8a bb       	out	0x1a, r24	; 26
    1402:	08 95       	ret
    1404:	37 b3       	in	r19, 0x17	; 23
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <M_Dio_PinMode+0x66>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	2a 95       	dec	r18
    1412:	e2 f7       	brpl	.-8      	; 0x140c <M_Dio_PinMode+0x62>
    1414:	83 2b       	or	r24, r19
    1416:	87 bb       	out	0x17, r24	; 23
    1418:	08 95       	ret
    141a:	34 b3       	in	r19, 0x14	; 20
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <M_Dio_PinMode+0x7c>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	2a 95       	dec	r18
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <M_Dio_PinMode+0x78>
    142a:	83 2b       	or	r24, r19
    142c:	84 bb       	out	0x14, r24	; 20
    142e:	08 95       	ret
    1430:	31 b3       	in	r19, 0x11	; 17
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <M_Dio_PinMode+0x92>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	2a 95       	dec	r18
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <M_Dio_PinMode+0x8e>
    1440:	83 2b       	or	r24, r19
    1442:	81 bb       	out	0x11, r24	; 17
    1444:	08 95       	ret
    1446:	92 30       	cpi	r25, 0x02	; 2
    1448:	a9 f0       	breq	.+42     	; 0x1474 <M_Dio_PinMode+0xca>
    144a:	18 f4       	brcc	.+6      	; 0x1452 <M_Dio_PinMode+0xa8>
    144c:	91 30       	cpi	r25, 0x01	; 1
    144e:	31 f0       	breq	.+12     	; 0x145c <M_Dio_PinMode+0xb2>
    1450:	08 95       	ret
    1452:	93 30       	cpi	r25, 0x03	; 3
    1454:	d9 f0       	breq	.+54     	; 0x148c <M_Dio_PinMode+0xe2>
    1456:	94 30       	cpi	r25, 0x04	; 4
    1458:	29 f1       	breq	.+74     	; 0x14a4 <M_Dio_PinMode+0xfa>
    145a:	08 95       	ret
    145c:	3a b3       	in	r19, 0x1a	; 26
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <M_Dio_PinMode+0xbe>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	2a 95       	dec	r18
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <M_Dio_PinMode+0xba>
    146c:	80 95       	com	r24
    146e:	83 23       	and	r24, r19
    1470:	8a bb       	out	0x1a, r24	; 26
    1472:	08 95       	ret
    1474:	37 b3       	in	r19, 0x17	; 23
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <M_Dio_PinMode+0xd6>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	2a 95       	dec	r18
    1482:	e2 f7       	brpl	.-8      	; 0x147c <M_Dio_PinMode+0xd2>
    1484:	80 95       	com	r24
    1486:	83 23       	and	r24, r19
    1488:	87 bb       	out	0x17, r24	; 23
    148a:	08 95       	ret
    148c:	34 b3       	in	r19, 0x14	; 20
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <M_Dio_PinMode+0xee>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	2a 95       	dec	r18
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <M_Dio_PinMode+0xea>
    149c:	80 95       	com	r24
    149e:	83 23       	and	r24, r19
    14a0:	84 bb       	out	0x14, r24	; 20
    14a2:	08 95       	ret
    14a4:	31 b3       	in	r19, 0x11	; 17
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <M_Dio_PinMode+0x106>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	2a 95       	dec	r18
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <M_Dio_PinMode+0x102>
    14b4:	80 95       	com	r24
    14b6:	83 23       	and	r24, r19
    14b8:	81 bb       	out	0x11, r24	; 17
    14ba:	08 95       	ret

000014bc <M_Dio_PinWrite>:
    14bc:	9d ec       	ldi	r25, 0xCD	; 205
    14be:	89 9f       	mul	r24, r25
    14c0:	91 2d       	mov	r25, r1
    14c2:	11 24       	eor	r1, r1
    14c4:	29 2f       	mov	r18, r25
    14c6:	26 95       	lsr	r18
    14c8:	26 95       	lsr	r18
    14ca:	26 95       	lsr	r18
    14cc:	22 0f       	add	r18, r18
    14ce:	32 2f       	mov	r19, r18
    14d0:	33 0f       	add	r19, r19
    14d2:	33 0f       	add	r19, r19
    14d4:	23 0f       	add	r18, r19
    14d6:	82 1b       	sub	r24, r18
    14d8:	28 2f       	mov	r18, r24
    14da:	96 95       	lsr	r25
    14dc:	96 95       	lsr	r25
    14de:	96 95       	lsr	r25
    14e0:	61 30       	cpi	r22, 0x01	; 1
    14e2:	19 f0       	breq	.+6      	; 0x14ea <M_Dio_PinWrite+0x2e>
    14e4:	62 30       	cpi	r22, 0x02	; 2
    14e6:	c1 f1       	breq	.+112    	; 0x1558 <M_Dio_PinWrite+0x9c>
    14e8:	08 95       	ret
    14ea:	92 30       	cpi	r25, 0x02	; 2
    14ec:	a1 f0       	breq	.+40     	; 0x1516 <M_Dio_PinWrite+0x5a>
    14ee:	18 f4       	brcc	.+6      	; 0x14f6 <M_Dio_PinWrite+0x3a>
    14f0:	91 30       	cpi	r25, 0x01	; 1
    14f2:	31 f0       	breq	.+12     	; 0x1500 <M_Dio_PinWrite+0x44>
    14f4:	08 95       	ret
    14f6:	93 30       	cpi	r25, 0x03	; 3
    14f8:	c9 f0       	breq	.+50     	; 0x152c <M_Dio_PinWrite+0x70>
    14fa:	94 30       	cpi	r25, 0x04	; 4
    14fc:	11 f1       	breq	.+68     	; 0x1542 <M_Dio_PinWrite+0x86>
    14fe:	08 95       	ret
    1500:	3b b3       	in	r19, 0x1b	; 27
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 c0       	rjmp	.+4      	; 0x150c <M_Dio_PinWrite+0x50>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	2a 95       	dec	r18
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <M_Dio_PinWrite+0x4c>
    1510:	83 2b       	or	r24, r19
    1512:	8b bb       	out	0x1b, r24	; 27
    1514:	08 95       	ret
    1516:	38 b3       	in	r19, 0x18	; 24
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <M_Dio_PinWrite+0x66>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	2a 95       	dec	r18
    1524:	e2 f7       	brpl	.-8      	; 0x151e <M_Dio_PinWrite+0x62>
    1526:	83 2b       	or	r24, r19
    1528:	88 bb       	out	0x18, r24	; 24
    152a:	08 95       	ret
    152c:	35 b3       	in	r19, 0x15	; 21
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <M_Dio_PinWrite+0x7c>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	2a 95       	dec	r18
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <M_Dio_PinWrite+0x78>
    153c:	83 2b       	or	r24, r19
    153e:	85 bb       	out	0x15, r24	; 21
    1540:	08 95       	ret
    1542:	32 b3       	in	r19, 0x12	; 18
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 c0       	rjmp	.+4      	; 0x154e <M_Dio_PinWrite+0x92>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	2a 95       	dec	r18
    1550:	e2 f7       	brpl	.-8      	; 0x154a <M_Dio_PinWrite+0x8e>
    1552:	83 2b       	or	r24, r19
    1554:	82 bb       	out	0x12, r24	; 18
    1556:	08 95       	ret
    1558:	92 30       	cpi	r25, 0x02	; 2
    155a:	a9 f0       	breq	.+42     	; 0x1586 <M_Dio_PinWrite+0xca>
    155c:	18 f4       	brcc	.+6      	; 0x1564 <M_Dio_PinWrite+0xa8>
    155e:	91 30       	cpi	r25, 0x01	; 1
    1560:	31 f0       	breq	.+12     	; 0x156e <M_Dio_PinWrite+0xb2>
    1562:	08 95       	ret
    1564:	93 30       	cpi	r25, 0x03	; 3
    1566:	d9 f0       	breq	.+54     	; 0x159e <M_Dio_PinWrite+0xe2>
    1568:	94 30       	cpi	r25, 0x04	; 4
    156a:	29 f1       	breq	.+74     	; 0x15b6 <M_Dio_PinWrite+0xfa>
    156c:	08 95       	ret
    156e:	3b b3       	in	r19, 0x1b	; 27
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 c0       	rjmp	.+4      	; 0x157a <M_Dio_PinWrite+0xbe>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	2a 95       	dec	r18
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <M_Dio_PinWrite+0xba>
    157e:	80 95       	com	r24
    1580:	83 23       	and	r24, r19
    1582:	8b bb       	out	0x1b, r24	; 27
    1584:	08 95       	ret
    1586:	38 b3       	in	r19, 0x18	; 24
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <M_Dio_PinWrite+0xd6>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	2a 95       	dec	r18
    1594:	e2 f7       	brpl	.-8      	; 0x158e <M_Dio_PinWrite+0xd2>
    1596:	80 95       	com	r24
    1598:	83 23       	and	r24, r19
    159a:	88 bb       	out	0x18, r24	; 24
    159c:	08 95       	ret
    159e:	35 b3       	in	r19, 0x15	; 21
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <M_Dio_PinWrite+0xee>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	2a 95       	dec	r18
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <M_Dio_PinWrite+0xea>
    15ae:	80 95       	com	r24
    15b0:	83 23       	and	r24, r19
    15b2:	85 bb       	out	0x15, r24	; 21
    15b4:	08 95       	ret
    15b6:	32 b3       	in	r19, 0x12	; 18
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <M_Dio_PinWrite+0x106>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	2a 95       	dec	r18
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <M_Dio_PinWrite+0x102>
    15c6:	80 95       	com	r24
    15c8:	83 23       	and	r24, r19
    15ca:	82 bb       	out	0x12, r24	; 18
    15cc:	08 95       	ret

000015ce <M_Dio_PinRead>:
	}
}

u8   M_Dio_PinRead(u8 Local_u8_Num)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
    15ce:	9d ec       	ldi	r25, 0xCD	; 205
    15d0:	89 9f       	mul	r24, r25
    15d2:	91 2d       	mov	r25, r1
    15d4:	11 24       	eor	r1, r1
    15d6:	29 2f       	mov	r18, r25
    15d8:	26 95       	lsr	r18
    15da:	26 95       	lsr	r18
    15dc:	26 95       	lsr	r18
    15de:	22 0f       	add	r18, r18
    15e0:	32 2f       	mov	r19, r18
    15e2:	33 0f       	add	r19, r19
    15e4:	33 0f       	add	r19, r19
    15e6:	23 0f       	add	r18, r19
    15e8:	82 1b       	sub	r24, r18
    15ea:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
    15ec:	89 2f       	mov	r24, r25
    15ee:	86 95       	lsr	r24
    15f0:	86 95       	lsr	r24
    15f2:	86 95       	lsr	r24
	u8 Local_u8_PinReading = 0;
	switch(Local_u8_Port)
    15f4:	82 30       	cpi	r24, 0x02	; 2
    15f6:	91 f0       	breq	.+36     	; 0x161c <M_Dio_PinRead+0x4e>
    15f8:	18 f4       	brcc	.+6      	; 0x1600 <M_Dio_PinRead+0x32>
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	31 f0       	breq	.+12     	; 0x160a <M_Dio_PinRead+0x3c>
    15fe:	29 c0       	rjmp	.+82     	; 0x1652 <M_Dio_PinRead+0x84>
    1600:	83 30       	cpi	r24, 0x03	; 3
    1602:	a9 f0       	breq	.+42     	; 0x162e <M_Dio_PinRead+0x60>
    1604:	84 30       	cpi	r24, 0x04	; 4
    1606:	e1 f0       	breq	.+56     	; 0x1640 <M_Dio_PinRead+0x72>
    1608:	24 c0       	rjmp	.+72     	; 0x1652 <M_Dio_PinRead+0x84>
	{ 
		case 1: Local_u8_PinReading = GetBit(_PINA,Local_u8_Pin); break;
    160a:	89 b3       	in	r24, 0x19	; 25
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <M_Dio_PinRead+0x46>
    1610:	95 95       	asr	r25
    1612:	87 95       	ror	r24
    1614:	2a 95       	dec	r18
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <M_Dio_PinRead+0x42>
    1618:	81 70       	andi	r24, 0x01	; 1
    161a:	08 95       	ret
		case 2: Local_u8_PinReading = GetBit(_PINB,Local_u8_Pin); break;
    161c:	86 b3       	in	r24, 0x16	; 22
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <M_Dio_PinRead+0x58>
    1622:	95 95       	asr	r25
    1624:	87 95       	ror	r24
    1626:	2a 95       	dec	r18
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <M_Dio_PinRead+0x54>
    162a:	81 70       	andi	r24, 0x01	; 1
    162c:	08 95       	ret
		case 3: Local_u8_PinReading = GetBit(_PINC,Local_u8_Pin); break;
    162e:	83 b3       	in	r24, 0x13	; 19
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <M_Dio_PinRead+0x6a>
    1634:	95 95       	asr	r25
    1636:	87 95       	ror	r24
    1638:	2a 95       	dec	r18
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <M_Dio_PinRead+0x66>
    163c:	81 70       	andi	r24, 0x01	; 1
    163e:	08 95       	ret
		case 4: Local_u8_PinReading = GetBit(_PIND,Local_u8_Pin); break;
    1640:	80 b3       	in	r24, 0x10	; 16
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 c0       	rjmp	.+4      	; 0x164a <M_Dio_PinRead+0x7c>
    1646:	95 95       	asr	r25
    1648:	87 95       	ror	r24
    164a:	2a 95       	dec	r18
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <M_Dio_PinRead+0x78>
    164e:	81 70       	andi	r24, 0x01	; 1
    1650:	08 95       	ret

u8   M_Dio_PinRead(u8 Local_u8_Num)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
	u8 Local_u8_Port = Local_u8_Num / 10;
	u8 Local_u8_PinReading = 0;
    1652:	80 e0       	ldi	r24, 0x00	; 0
		case 4: Local_u8_PinReading = GetBit(_PIND,Local_u8_Pin); break;
		default:                                                 break;
		
	}
	return Local_u8_PinReading;
}
    1654:	08 95       	ret

00001656 <M_Dio_PinPullUpRes>:

void M_Dio_PinPullUpRes(u8 Local_u8_Num,u8 Local_u8_Mode)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
    1656:	9d ec       	ldi	r25, 0xCD	; 205
    1658:	89 9f       	mul	r24, r25
    165a:	91 2d       	mov	r25, r1
    165c:	11 24       	eor	r1, r1
    165e:	29 2f       	mov	r18, r25
    1660:	26 95       	lsr	r18
    1662:	26 95       	lsr	r18
    1664:	26 95       	lsr	r18
    1666:	22 0f       	add	r18, r18
    1668:	32 2f       	mov	r19, r18
    166a:	33 0f       	add	r19, r19
    166c:	33 0f       	add	r19, r19
    166e:	23 0f       	add	r18, r19
    1670:	82 1b       	sub	r24, r18
    1672:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
    1674:	96 95       	lsr	r25
    1676:	96 95       	lsr	r25
    1678:	96 95       	lsr	r25
	switch(Local_u8_Mode)
    167a:	61 30       	cpi	r22, 0x01	; 1
    167c:	19 f0       	breq	.+6      	; 0x1684 <M_Dio_PinPullUpRes+0x2e>
    167e:	62 30       	cpi	r22, 0x02	; 2
    1680:	c1 f1       	breq	.+112    	; 0x16f2 <M_Dio_PinPullUpRes+0x9c>
    1682:	08 95       	ret
	{
		case ENABLE:
		switch(Local_u8_Port)
    1684:	92 30       	cpi	r25, 0x02	; 2
    1686:	a1 f0       	breq	.+40     	; 0x16b0 <M_Dio_PinPullUpRes+0x5a>
    1688:	18 f4       	brcc	.+6      	; 0x1690 <M_Dio_PinPullUpRes+0x3a>
    168a:	91 30       	cpi	r25, 0x01	; 1
    168c:	31 f0       	breq	.+12     	; 0x169a <M_Dio_PinPullUpRes+0x44>
    168e:	08 95       	ret
    1690:	93 30       	cpi	r25, 0x03	; 3
    1692:	c9 f0       	breq	.+50     	; 0x16c6 <M_Dio_PinPullUpRes+0x70>
    1694:	94 30       	cpi	r25, 0x04	; 4
    1696:	11 f1       	breq	.+68     	; 0x16dc <M_Dio_PinPullUpRes+0x86>
    1698:	08 95       	ret
		{
			case 1: SetBit(_PORTA,Local_u8_Pin); break;
    169a:	3b b3       	in	r19, 0x1b	; 27
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <M_Dio_PinPullUpRes+0x50>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	2a 95       	dec	r18
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <M_Dio_PinPullUpRes+0x4c>
    16aa:	83 2b       	or	r24, r19
    16ac:	8b bb       	out	0x1b, r24	; 27
    16ae:	08 95       	ret
			case 2: SetBit(_PORTB,Local_u8_Pin); break;
    16b0:	38 b3       	in	r19, 0x18	; 24
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <M_Dio_PinPullUpRes+0x66>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	2a 95       	dec	r18
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <M_Dio_PinPullUpRes+0x62>
    16c0:	83 2b       	or	r24, r19
    16c2:	88 bb       	out	0x18, r24	; 24
    16c4:	08 95       	ret
			case 3: SetBit(_PORTC,Local_u8_Pin); break;
    16c6:	35 b3       	in	r19, 0x15	; 21
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <M_Dio_PinPullUpRes+0x7c>
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	2a 95       	dec	r18
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <M_Dio_PinPullUpRes+0x78>
    16d6:	83 2b       	or	r24, r19
    16d8:	85 bb       	out	0x15, r24	; 21
    16da:	08 95       	ret
			case 4: SetBit(_PORTD,Local_u8_Pin); break;
    16dc:	32 b3       	in	r19, 0x12	; 18
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <M_Dio_PinPullUpRes+0x92>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	2a 95       	dec	r18
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <M_Dio_PinPullUpRes+0x8e>
    16ec:	83 2b       	or	r24, r19
    16ee:	82 bb       	out	0x12, r24	; 18
    16f0:	08 95       	ret
			default:                            break;
		}
		break;
		case DISABLE:
		switch(Local_u8_Port)
    16f2:	92 30       	cpi	r25, 0x02	; 2
    16f4:	a9 f0       	breq	.+42     	; 0x1720 <M_Dio_PinPullUpRes+0xca>
    16f6:	18 f4       	brcc	.+6      	; 0x16fe <M_Dio_PinPullUpRes+0xa8>
    16f8:	91 30       	cpi	r25, 0x01	; 1
    16fa:	31 f0       	breq	.+12     	; 0x1708 <M_Dio_PinPullUpRes+0xb2>
    16fc:	08 95       	ret
    16fe:	93 30       	cpi	r25, 0x03	; 3
    1700:	d9 f0       	breq	.+54     	; 0x1738 <M_Dio_PinPullUpRes+0xe2>
    1702:	94 30       	cpi	r25, 0x04	; 4
    1704:	29 f1       	breq	.+74     	; 0x1750 <M_Dio_PinPullUpRes+0xfa>
    1706:	08 95       	ret
		{
			case 1: ClrBit(_PORTA,Local_u8_Pin); break;
    1708:	3b b3       	in	r19, 0x1b	; 27
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <M_Dio_PinPullUpRes+0xbe>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	2a 95       	dec	r18
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <M_Dio_PinPullUpRes+0xba>
    1718:	80 95       	com	r24
    171a:	83 23       	and	r24, r19
    171c:	8b bb       	out	0x1b, r24	; 27
    171e:	08 95       	ret
			case 2: ClrBit(_PORTB,Local_u8_Pin); break;
    1720:	38 b3       	in	r19, 0x18	; 24
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 c0       	rjmp	.+4      	; 0x172c <M_Dio_PinPullUpRes+0xd6>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	2a 95       	dec	r18
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <M_Dio_PinPullUpRes+0xd2>
    1730:	80 95       	com	r24
    1732:	83 23       	and	r24, r19
    1734:	88 bb       	out	0x18, r24	; 24
    1736:	08 95       	ret
			case 3: ClrBit(_PORTC,Local_u8_Pin); break;
    1738:	35 b3       	in	r19, 0x15	; 21
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <M_Dio_PinPullUpRes+0xee>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	2a 95       	dec	r18
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <M_Dio_PinPullUpRes+0xea>
    1748:	80 95       	com	r24
    174a:	83 23       	and	r24, r19
    174c:	85 bb       	out	0x15, r24	; 21
    174e:	08 95       	ret
			case 4: ClrBit(_PORTD,Local_u8_Pin); break;
    1750:	32 b3       	in	r19, 0x12	; 18
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 c0       	rjmp	.+4      	; 0x175c <M_Dio_PinPullUpRes+0x106>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	2a 95       	dec	r18
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <M_Dio_PinPullUpRes+0x102>
    1760:	80 95       	com	r24
    1762:	83 23       	and	r24, r19
    1764:	82 bb       	out	0x12, r24	; 18
    1766:	08 95       	ret

00001768 <M_Timer0_Init>:
void (*_Callback)(void) = _NULL ;

void  M_Timer0_Init(void)
{
	
	_OCR0 = 249;                 ////
    1768:	89 ef       	ldi	r24, 0xF9	; 249
    176a:	8c bf       	out	0x3c, r24	; 60
	_TCCR0 = 0x28;				//
    176c:	88 e2       	ldi	r24, 0x28	; 40
    176e:	83 bf       	out	0x33, r24	; 51
	_TCCR0 |= 0x03;				// -> TIMER0 INIT AS TEST (CTC INTERRUPT)
    1770:	83 b7       	in	r24, 0x33	; 51
    1772:	83 60       	ori	r24, 0x03	; 3
    1774:	83 bf       	out	0x33, r24	; 51
	_TIMSK |= (1<<1);		//
    1776:	89 b7       	in	r24, 0x39	; 57
    1778:	82 60       	ori	r24, 0x02	; 2
    177a:	89 bf       	out	0x39, r24	; 57
    177c:	08 95       	ret

0000177e <M_Timer0_SetCallBack>:
}

void M_Timer0_SetCallBack(void (*Ptr)(void))
{
	_Callback = Ptr;
    177e:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <_Callback+0x1>
    1782:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <_Callback>
    1786:	08 95       	ret

00001788 <__vector_10>:
}


ISR(TIMER0_COMP_vect)
{
    1788:	1f 92       	push	r1
    178a:	0f 92       	push	r0
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	0f 92       	push	r0
    1790:	11 24       	eor	r1, r1
    1792:	2f 93       	push	r18
    1794:	3f 93       	push	r19
    1796:	4f 93       	push	r20
    1798:	5f 93       	push	r21
    179a:	6f 93       	push	r22
    179c:	7f 93       	push	r23
    179e:	8f 93       	push	r24
    17a0:	9f 93       	push	r25
    17a2:	af 93       	push	r26
    17a4:	bf 93       	push	r27
    17a6:	ef 93       	push	r30
    17a8:	ff 93       	push	r31
	_Callback();
    17aa:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <_Callback>
    17ae:	f0 91 95 03 	lds	r31, 0x0395	; 0x800395 <_Callback+0x1>
    17b2:	09 95       	icall
	
}
    17b4:	ff 91       	pop	r31
    17b6:	ef 91       	pop	r30
    17b8:	bf 91       	pop	r27
    17ba:	af 91       	pop	r26
    17bc:	9f 91       	pop	r25
    17be:	8f 91       	pop	r24
    17c0:	7f 91       	pop	r23
    17c2:	6f 91       	pop	r22
    17c4:	5f 91       	pop	r21
    17c6:	4f 91       	pop	r20
    17c8:	3f 91       	pop	r19
    17ca:	2f 91       	pop	r18
    17cc:	0f 90       	pop	r0
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	0f 90       	pop	r0
    17d2:	1f 90       	pop	r1
    17d4:	18 95       	reti

000017d6 <M_Timer1_PWM_Control_Mode>:

void M_Timer1_Stop(void)
{
	ClrBit(_TCCR1B,0);
	ClrBit(_TCCR1B,1);
	ClrBit(_TCCR1B,2);
    17d6:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <Choose_Control_Mode>
    17da:	08 95       	ret

000017dc <M_Timer1_PWMInit>:
    17dc:	8f b5       	in	r24, 0x2f	; 47
    17de:	8e 7f       	andi	r24, 0xFE	; 254
    17e0:	8f bd       	out	0x2f, r24	; 47
    17e2:	8f b5       	in	r24, 0x2f	; 47
    17e4:	82 60       	ori	r24, 0x02	; 2
    17e6:	8f bd       	out	0x2f, r24	; 47
    17e8:	8e b5       	in	r24, 0x2e	; 46
    17ea:	88 60       	ori	r24, 0x08	; 8
    17ec:	8e bd       	out	0x2e, r24	; 46
    17ee:	8e b5       	in	r24, 0x2e	; 46
    17f0:	80 61       	ori	r24, 0x10	; 16
    17f2:	8e bd       	out	0x2e, r24	; 46
    17f4:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <Choose_Control_Mode>
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	51 f4       	brne	.+20     	; 0x1810 <M_Timer1_PWMInit+0x34>
    17fc:	81 b3       	in	r24, 0x11	; 17
    17fe:	80 62       	ori	r24, 0x20	; 32
    1800:	81 bb       	out	0x11, r24	; 17
    1802:	8f b5       	in	r24, 0x2f	; 47
    1804:	80 68       	ori	r24, 0x80	; 128
    1806:	8f bd       	out	0x2f, r24	; 47
    1808:	8f b5       	in	r24, 0x2f	; 47
    180a:	8f 7b       	andi	r24, 0xBF	; 191
    180c:	8f bd       	out	0x2f, r24	; 47
    180e:	08 95       	ret
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	49 f4       	brne	.+18     	; 0x1826 <M_Timer1_PWMInit+0x4a>
    1814:	81 b3       	in	r24, 0x11	; 17
    1816:	80 61       	ori	r24, 0x10	; 16
    1818:	81 bb       	out	0x11, r24	; 17
    181a:	8f b5       	in	r24, 0x2f	; 47
    181c:	80 62       	ori	r24, 0x20	; 32
    181e:	8f bd       	out	0x2f, r24	; 47
    1820:	8f b5       	in	r24, 0x2f	; 47
    1822:	8f 7e       	andi	r24, 0xEF	; 239
    1824:	8f bd       	out	0x2f, r24	; 47
    1826:	08 95       	ret

00001828 <M_Timer1_PWM_SetFrequency>:
    1828:	cf 92       	push	r12
    182a:	df 92       	push	r13
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
    1830:	6b 01       	movw	r12, r22
    1832:	7c 01       	movw	r14, r24
    1834:	20 91 7f 00 	lds	r18, 0x007F	; 0x80007f <Timer1_Prescaler>
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	74 e2       	ldi	r23, 0x24	; 36
    1842:	84 ef       	ldi	r24, 0xF4	; 244
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 1d 12 	call	0x243a	; 0x243a <__divmodsi4>
    184a:	ca 01       	movw	r24, r20
    184c:	b9 01       	movw	r22, r18
    184e:	a7 01       	movw	r20, r14
    1850:	96 01       	movw	r18, r12
    1852:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__udivmodsi4>
    1856:	37 bd       	out	0x27, r19	; 39
    1858:	26 bd       	out	0x26, r18	; 38
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	df 90       	pop	r13
    1860:	cf 90       	pop	r12
    1862:	08 95       	ret

00001864 <M_Timer1_PWM_SetDutyCycle>:
    1864:	48 2f       	mov	r20, r24
    1866:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <Choose_Control_Mode>
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	a1 f4       	brne	.+40     	; 0x1896 <M_Timer1_PWM_SetDutyCycle+0x32>
    186e:	26 b5       	in	r18, 0x26	; 38
    1870:	37 b5       	in	r19, 0x27	; 39
    1872:	36 95       	lsr	r19
    1874:	27 95       	ror	r18
    1876:	36 95       	lsr	r19
    1878:	27 95       	ror	r18
    187a:	ab e7       	ldi	r26, 0x7B	; 123
    187c:	b4 e1       	ldi	r27, 0x14	; 20
    187e:	0e 94 42 12 	call	0x2484	; 0x2484 <__umulhisi3>
    1882:	96 95       	lsr	r25
    1884:	87 95       	ror	r24
    1886:	48 9f       	mul	r20, r24
    1888:	90 01       	movw	r18, r0
    188a:	49 9f       	mul	r20, r25
    188c:	30 0d       	add	r19, r0
    188e:	11 24       	eor	r1, r1
    1890:	3b bd       	out	0x2b, r19	; 43
    1892:	2a bd       	out	0x2a, r18	; 42
    1894:	08 95       	ret
    1896:	82 30       	cpi	r24, 0x02	; 2
    1898:	99 f4       	brne	.+38     	; 0x18c0 <M_Timer1_PWM_SetDutyCycle+0x5c>
    189a:	26 b5       	in	r18, 0x26	; 38
    189c:	37 b5       	in	r19, 0x27	; 39
    189e:	36 95       	lsr	r19
    18a0:	27 95       	ror	r18
    18a2:	36 95       	lsr	r19
    18a4:	27 95       	ror	r18
    18a6:	ab e7       	ldi	r26, 0x7B	; 123
    18a8:	b4 e1       	ldi	r27, 0x14	; 20
    18aa:	0e 94 42 12 	call	0x2484	; 0x2484 <__umulhisi3>
    18ae:	96 95       	lsr	r25
    18b0:	87 95       	ror	r24
    18b2:	48 9f       	mul	r20, r24
    18b4:	90 01       	movw	r18, r0
    18b6:	49 9f       	mul	r20, r25
    18b8:	30 0d       	add	r19, r0
    18ba:	11 24       	eor	r1, r1
    18bc:	39 bd       	out	0x29, r19	; 41
    18be:	28 bd       	out	0x28, r18	; 40
    18c0:	08 95       	ret

000018c2 <M_Timer1_Start>:
    18c2:	8e b5       	in	r24, 0x2e	; 46
    18c4:	82 60       	ori	r24, 0x02	; 2
    18c6:	8e bd       	out	0x2e, r24	; 46
    18c8:	8e b5       	in	r24, 0x2e	; 46
    18ca:	81 60       	ori	r24, 0x01	; 1
    18cc:	8e bd       	out	0x2e, r24	; 46
    18ce:	8e b5       	in	r24, 0x2e	; 46
    18d0:	8b 7f       	andi	r24, 0xFB	; 251
    18d2:	8e bd       	out	0x2e, r24	; 46
    18d4:	08 95       	ret

000018d6 <M_Timer1_Pwm_Start>:
	
}

void M_Timer1_Pwm_Start(void)
{
	M_Timer1_Start();
    18d6:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <M_Timer1_Start>
    18da:	08 95       	ret

000018dc <M_Uart_Init>:

void M_Uart_Stop(void)
{
	ClrBit(_UCSRB, 7);  //to enable Rx interrupt
	ClrBit(_UCSRB, 4);  //to enable Rx Circuit
	ClrBit(_UCSRB, 3);  //to enable Tx Circuit
    18dc:	81 b3       	in	r24, 0x11	; 17
    18de:	8e 7f       	andi	r24, 0xFE	; 254
    18e0:	81 bb       	out	0x11, r24	; 17
    18e2:	81 b3       	in	r24, 0x11	; 17
    18e4:	82 60       	ori	r24, 0x02	; 2
    18e6:	81 bb       	out	0x11, r24	; 17
    18e8:	8a b1       	in	r24, 0x0a	; 10
    18ea:	8b 7f       	andi	r24, 0xFB	; 251
    18ec:	8a b9       	out	0x0a, r24	; 10
    18ee:	86 e8       	ldi	r24, 0x86	; 134
    18f0:	80 bd       	out	0x20, r24	; 32
    18f2:	87 e6       	ldi	r24, 0x67	; 103
    18f4:	89 b9       	out	0x09, r24	; 9
    18f6:	10 bc       	out	0x20, r1	; 32
    18f8:	8a b1       	in	r24, 0x0a	; 10
    18fa:	80 68       	ori	r24, 0x80	; 128
    18fc:	8a b9       	out	0x0a, r24	; 10
    18fe:	8a b1       	in	r24, 0x0a	; 10
    1900:	80 61       	ori	r24, 0x10	; 16
    1902:	8a b9       	out	0x0a, r24	; 10
    1904:	8a b1       	in	r24, 0x0a	; 10
    1906:	88 60       	ori	r24, 0x08	; 8
    1908:	8a b9       	out	0x0a, r24	; 10
    190a:	78 94       	sei
    190c:	8f e3       	ldi	r24, 0x3F	; 63
    190e:	9c e9       	ldi	r25, 0x9C	; 156
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <M_Uart_Init+0x34>
    1914:	00 c0       	rjmp	.+0      	; 0x1916 <M_Uart_Init+0x3a>
    1916:	00 00       	nop
    1918:	08 95       	ret

0000191a <M_Uart_Transmit>:
    191a:	9a b1       	in	r25, 0x0a	; 10
    191c:	9f 7e       	andi	r25, 0xEF	; 239
    191e:	9a b9       	out	0x0a, r25	; 10
    1920:	5d 9b       	sbis	0x0b, 5	; 11
    1922:	fe cf       	rjmp	.-4      	; 0x1920 <M_Uart_Transmit+0x6>
    1924:	8c b9       	out	0x0c, r24	; 12
    1926:	8a b1       	in	r24, 0x0a	; 10
    1928:	80 61       	ori	r24, 0x10	; 16
    192a:	8a b9       	out	0x0a, r24	; 10
    192c:	08 95       	ret

0000192e <M_Uart_SendString>:
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	cf 93       	push	r28
    1934:	8c 01       	movw	r16, r24
    1936:	c0 e0       	ldi	r28, 0x00	; 0
    1938:	09 c0       	rjmp	.+18     	; 0x194c <M_Uart_SendString+0x1e>
    193a:	0e 94 8d 0c 	call	0x191a	; 0x191a <M_Uart_Transmit>
    193e:	cf 5f       	subi	r28, 0xFF	; 255
    1940:	8f e9       	ldi	r24, 0x9F	; 159
    1942:	9f e0       	ldi	r25, 0x0F	; 15
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <M_Uart_SendString+0x16>
    1948:	00 c0       	rjmp	.+0      	; 0x194a <M_Uart_SendString+0x1c>
    194a:	00 00       	nop
    194c:	f8 01       	movw	r30, r16
    194e:	ec 0f       	add	r30, r28
    1950:	f1 1d       	adc	r31, r1
    1952:	80 81       	ld	r24, Z
    1954:	81 11       	cpse	r24, r1
    1956:	f1 cf       	rjmp	.-30     	; 0x193a <M_Uart_SendString+0xc>
    1958:	8a e0       	ldi	r24, 0x0A	; 10
    195a:	0e 94 8d 0c 	call	0x191a	; 0x191a <M_Uart_Transmit>
    195e:	8d e0       	ldi	r24, 0x0D	; 13
    1960:	0e 94 8d 0c 	call	0x191a	; 0x191a <M_Uart_Transmit>
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	08 95       	ret

0000196c <M_Uart_SetCallBack>:
}

void M_Uart_SetCallBack(void (*Ptr)(void))
{
	Callback = Ptr;
    196c:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <Callback+0x1>
    1970:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <Callback>
    1974:	08 95       	ret

00001976 <__vector_13>:
}

ISR(USART_RXC_vect)
{
    1976:	1f 92       	push	r1
    1978:	0f 92       	push	r0
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	0f 92       	push	r0
    197e:	11 24       	eor	r1, r1
    1980:	2f 93       	push	r18
    1982:	3f 93       	push	r19
    1984:	4f 93       	push	r20
    1986:	5f 93       	push	r21
    1988:	6f 93       	push	r22
    198a:	7f 93       	push	r23
    198c:	8f 93       	push	r24
    198e:	9f 93       	push	r25
    1990:	af 93       	push	r26
    1992:	bf 93       	push	r27
    1994:	ef 93       	push	r30
    1996:	ff 93       	push	r31
	Callback();
    1998:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <Callback>
    199c:	f0 91 98 03 	lds	r31, 0x0398	; 0x800398 <Callback+0x1>
    19a0:	09 95       	icall
    19a2:	ff 91       	pop	r31
    19a4:	ef 91       	pop	r30
    19a6:	bf 91       	pop	r27
    19a8:	af 91       	pop	r26
    19aa:	9f 91       	pop	r25
    19ac:	8f 91       	pop	r24
    19ae:	7f 91       	pop	r23
    19b0:	6f 91       	pop	r22
    19b2:	5f 91       	pop	r21
    19b4:	4f 91       	pop	r20
    19b6:	3f 91       	pop	r19
    19b8:	2f 91       	pop	r18
    19ba:	0f 90       	pop	r0
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	0f 90       	pop	r0
    19c0:	1f 90       	pop	r1
    19c2:	18 95       	reti

000019c4 <__divsf3>:
    19c4:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__divsf3x>
    19c8:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__fp_round>
    19cc:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__fp_pscB>
    19d0:	58 f0       	brcs	.+22     	; 0x19e8 <__divsf3+0x24>
    19d2:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__fp_pscA>
    19d6:	40 f0       	brcs	.+16     	; 0x19e8 <__divsf3+0x24>
    19d8:	29 f4       	brne	.+10     	; 0x19e4 <__divsf3+0x20>
    19da:	5f 3f       	cpi	r21, 0xFF	; 255
    19dc:	29 f0       	breq	.+10     	; 0x19e8 <__divsf3+0x24>
    19de:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__fp_inf>
    19e2:	51 11       	cpse	r21, r1
    19e4:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__fp_szero>
    19e8:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__fp_nan>

000019ec <__divsf3x>:
    19ec:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__fp_split3>
    19f0:	68 f3       	brcs	.-38     	; 0x19cc <__divsf3+0x8>

000019f2 <__divsf3_pse>:
    19f2:	99 23       	and	r25, r25
    19f4:	b1 f3       	breq	.-20     	; 0x19e2 <__divsf3+0x1e>
    19f6:	55 23       	and	r21, r21
    19f8:	91 f3       	breq	.-28     	; 0x19de <__divsf3+0x1a>
    19fa:	95 1b       	sub	r25, r21
    19fc:	55 0b       	sbc	r21, r21
    19fe:	bb 27       	eor	r27, r27
    1a00:	aa 27       	eor	r26, r26
    1a02:	62 17       	cp	r22, r18
    1a04:	73 07       	cpc	r23, r19
    1a06:	84 07       	cpc	r24, r20
    1a08:	38 f0       	brcs	.+14     	; 0x1a18 <__divsf3_pse+0x26>
    1a0a:	9f 5f       	subi	r25, 0xFF	; 255
    1a0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0e:	22 0f       	add	r18, r18
    1a10:	33 1f       	adc	r19, r19
    1a12:	44 1f       	adc	r20, r20
    1a14:	aa 1f       	adc	r26, r26
    1a16:	a9 f3       	breq	.-22     	; 0x1a02 <__divsf3_pse+0x10>
    1a18:	35 d0       	rcall	.+106    	; 0x1a84 <__divsf3_pse+0x92>
    1a1a:	0e 2e       	mov	r0, r30
    1a1c:	3a f0       	brmi	.+14     	; 0x1a2c <__divsf3_pse+0x3a>
    1a1e:	e0 e8       	ldi	r30, 0x80	; 128
    1a20:	32 d0       	rcall	.+100    	; 0x1a86 <__divsf3_pse+0x94>
    1a22:	91 50       	subi	r25, 0x01	; 1
    1a24:	50 40       	sbci	r21, 0x00	; 0
    1a26:	e6 95       	lsr	r30
    1a28:	00 1c       	adc	r0, r0
    1a2a:	ca f7       	brpl	.-14     	; 0x1a1e <__divsf3_pse+0x2c>
    1a2c:	2b d0       	rcall	.+86     	; 0x1a84 <__divsf3_pse+0x92>
    1a2e:	fe 2f       	mov	r31, r30
    1a30:	29 d0       	rcall	.+82     	; 0x1a84 <__divsf3_pse+0x92>
    1a32:	66 0f       	add	r22, r22
    1a34:	77 1f       	adc	r23, r23
    1a36:	88 1f       	adc	r24, r24
    1a38:	bb 1f       	adc	r27, r27
    1a3a:	26 17       	cp	r18, r22
    1a3c:	37 07       	cpc	r19, r23
    1a3e:	48 07       	cpc	r20, r24
    1a40:	ab 07       	cpc	r26, r27
    1a42:	b0 e8       	ldi	r27, 0x80	; 128
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <__divsf3_pse+0x56>
    1a46:	bb 0b       	sbc	r27, r27
    1a48:	80 2d       	mov	r24, r0
    1a4a:	bf 01       	movw	r22, r30
    1a4c:	ff 27       	eor	r31, r31
    1a4e:	93 58       	subi	r25, 0x83	; 131
    1a50:	5f 4f       	sbci	r21, 0xFF	; 255
    1a52:	3a f0       	brmi	.+14     	; 0x1a62 <__divsf3_pse+0x70>
    1a54:	9e 3f       	cpi	r25, 0xFE	; 254
    1a56:	51 05       	cpc	r21, r1
    1a58:	78 f0       	brcs	.+30     	; 0x1a78 <__divsf3_pse+0x86>
    1a5a:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__fp_inf>
    1a5e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__fp_szero>
    1a62:	5f 3f       	cpi	r21, 0xFF	; 255
    1a64:	e4 f3       	brlt	.-8      	; 0x1a5e <__divsf3_pse+0x6c>
    1a66:	98 3e       	cpi	r25, 0xE8	; 232
    1a68:	d4 f3       	brlt	.-12     	; 0x1a5e <__divsf3_pse+0x6c>
    1a6a:	86 95       	lsr	r24
    1a6c:	77 95       	ror	r23
    1a6e:	67 95       	ror	r22
    1a70:	b7 95       	ror	r27
    1a72:	f7 95       	ror	r31
    1a74:	9f 5f       	subi	r25, 0xFF	; 255
    1a76:	c9 f7       	brne	.-14     	; 0x1a6a <__divsf3_pse+0x78>
    1a78:	88 0f       	add	r24, r24
    1a7a:	91 1d       	adc	r25, r1
    1a7c:	96 95       	lsr	r25
    1a7e:	87 95       	ror	r24
    1a80:	97 f9       	bld	r25, 7
    1a82:	08 95       	ret
    1a84:	e1 e0       	ldi	r30, 0x01	; 1
    1a86:	66 0f       	add	r22, r22
    1a88:	77 1f       	adc	r23, r23
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	bb 1f       	adc	r27, r27
    1a8e:	62 17       	cp	r22, r18
    1a90:	73 07       	cpc	r23, r19
    1a92:	84 07       	cpc	r24, r20
    1a94:	ba 07       	cpc	r27, r26
    1a96:	20 f0       	brcs	.+8      	; 0x1aa0 <__divsf3_pse+0xae>
    1a98:	62 1b       	sub	r22, r18
    1a9a:	73 0b       	sbc	r23, r19
    1a9c:	84 0b       	sbc	r24, r20
    1a9e:	ba 0b       	sbc	r27, r26
    1aa0:	ee 1f       	adc	r30, r30
    1aa2:	88 f7       	brcc	.-30     	; 0x1a86 <__divsf3_pse+0x94>
    1aa4:	e0 95       	com	r30
    1aa6:	08 95       	ret

00001aa8 <__fixunssfsi>:
    1aa8:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fp_splitA>
    1aac:	88 f0       	brcs	.+34     	; 0x1ad0 <__fixunssfsi+0x28>
    1aae:	9f 57       	subi	r25, 0x7F	; 127
    1ab0:	98 f0       	brcs	.+38     	; 0x1ad8 <__fixunssfsi+0x30>
    1ab2:	b9 2f       	mov	r27, r25
    1ab4:	99 27       	eor	r25, r25
    1ab6:	b7 51       	subi	r27, 0x17	; 23
    1ab8:	b0 f0       	brcs	.+44     	; 0x1ae6 <__fixunssfsi+0x3e>
    1aba:	e1 f0       	breq	.+56     	; 0x1af4 <__fixunssfsi+0x4c>
    1abc:	66 0f       	add	r22, r22
    1abe:	77 1f       	adc	r23, r23
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	1a f0       	brmi	.+6      	; 0x1acc <__fixunssfsi+0x24>
    1ac6:	ba 95       	dec	r27
    1ac8:	c9 f7       	brne	.-14     	; 0x1abc <__fixunssfsi+0x14>
    1aca:	14 c0       	rjmp	.+40     	; 0x1af4 <__fixunssfsi+0x4c>
    1acc:	b1 30       	cpi	r27, 0x01	; 1
    1ace:	91 f0       	breq	.+36     	; 0x1af4 <__fixunssfsi+0x4c>
    1ad0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fp_zero>
    1ad4:	b1 e0       	ldi	r27, 0x01	; 1
    1ad6:	08 95       	ret
    1ad8:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__fp_zero>
    1adc:	67 2f       	mov	r22, r23
    1ade:	78 2f       	mov	r23, r24
    1ae0:	88 27       	eor	r24, r24
    1ae2:	b8 5f       	subi	r27, 0xF8	; 248
    1ae4:	39 f0       	breq	.+14     	; 0x1af4 <__fixunssfsi+0x4c>
    1ae6:	b9 3f       	cpi	r27, 0xF9	; 249
    1ae8:	cc f3       	brlt	.-14     	; 0x1adc <__fixunssfsi+0x34>
    1aea:	86 95       	lsr	r24
    1aec:	77 95       	ror	r23
    1aee:	67 95       	ror	r22
    1af0:	b3 95       	inc	r27
    1af2:	d9 f7       	brne	.-10     	; 0x1aea <__fixunssfsi+0x42>
    1af4:	3e f4       	brtc	.+14     	; 0x1b04 <__fixunssfsi+0x5c>
    1af6:	90 95       	com	r25
    1af8:	80 95       	com	r24
    1afa:	70 95       	com	r23
    1afc:	61 95       	neg	r22
    1afe:	7f 4f       	sbci	r23, 0xFF	; 255
    1b00:	8f 4f       	sbci	r24, 0xFF	; 255
    1b02:	9f 4f       	sbci	r25, 0xFF	; 255
    1b04:	08 95       	ret

00001b06 <__floatunsisf>:
    1b06:	e8 94       	clt
    1b08:	09 c0       	rjmp	.+18     	; 0x1b1c <__floatsisf+0x12>

00001b0a <__floatsisf>:
    1b0a:	97 fb       	bst	r25, 7
    1b0c:	3e f4       	brtc	.+14     	; 0x1b1c <__floatsisf+0x12>
    1b0e:	90 95       	com	r25
    1b10:	80 95       	com	r24
    1b12:	70 95       	com	r23
    1b14:	61 95       	neg	r22
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1c:	99 23       	and	r25, r25
    1b1e:	a9 f0       	breq	.+42     	; 0x1b4a <__floatsisf+0x40>
    1b20:	f9 2f       	mov	r31, r25
    1b22:	96 e9       	ldi	r25, 0x96	; 150
    1b24:	bb 27       	eor	r27, r27
    1b26:	93 95       	inc	r25
    1b28:	f6 95       	lsr	r31
    1b2a:	87 95       	ror	r24
    1b2c:	77 95       	ror	r23
    1b2e:	67 95       	ror	r22
    1b30:	b7 95       	ror	r27
    1b32:	f1 11       	cpse	r31, r1
    1b34:	f8 cf       	rjmp	.-16     	; 0x1b26 <__floatsisf+0x1c>
    1b36:	fa f4       	brpl	.+62     	; 0x1b76 <__floatsisf+0x6c>
    1b38:	bb 0f       	add	r27, r27
    1b3a:	11 f4       	brne	.+4      	; 0x1b40 <__floatsisf+0x36>
    1b3c:	60 ff       	sbrs	r22, 0
    1b3e:	1b c0       	rjmp	.+54     	; 0x1b76 <__floatsisf+0x6c>
    1b40:	6f 5f       	subi	r22, 0xFF	; 255
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	8f 4f       	sbci	r24, 0xFF	; 255
    1b46:	9f 4f       	sbci	r25, 0xFF	; 255
    1b48:	16 c0       	rjmp	.+44     	; 0x1b76 <__floatsisf+0x6c>
    1b4a:	88 23       	and	r24, r24
    1b4c:	11 f0       	breq	.+4      	; 0x1b52 <__floatsisf+0x48>
    1b4e:	96 e9       	ldi	r25, 0x96	; 150
    1b50:	11 c0       	rjmp	.+34     	; 0x1b74 <__floatsisf+0x6a>
    1b52:	77 23       	and	r23, r23
    1b54:	21 f0       	breq	.+8      	; 0x1b5e <__floatsisf+0x54>
    1b56:	9e e8       	ldi	r25, 0x8E	; 142
    1b58:	87 2f       	mov	r24, r23
    1b5a:	76 2f       	mov	r23, r22
    1b5c:	05 c0       	rjmp	.+10     	; 0x1b68 <__floatsisf+0x5e>
    1b5e:	66 23       	and	r22, r22
    1b60:	71 f0       	breq	.+28     	; 0x1b7e <__floatsisf+0x74>
    1b62:	96 e8       	ldi	r25, 0x86	; 134
    1b64:	86 2f       	mov	r24, r22
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	2a f0       	brmi	.+10     	; 0x1b76 <__floatsisf+0x6c>
    1b6c:	9a 95       	dec	r25
    1b6e:	66 0f       	add	r22, r22
    1b70:	77 1f       	adc	r23, r23
    1b72:	88 1f       	adc	r24, r24
    1b74:	da f7       	brpl	.-10     	; 0x1b6c <__floatsisf+0x62>
    1b76:	88 0f       	add	r24, r24
    1b78:	96 95       	lsr	r25
    1b7a:	87 95       	ror	r24
    1b7c:	97 f9       	bld	r25, 7
    1b7e:	08 95       	ret

00001b80 <__fp_inf>:
    1b80:	97 f9       	bld	r25, 7
    1b82:	9f 67       	ori	r25, 0x7F	; 127
    1b84:	80 e8       	ldi	r24, 0x80	; 128
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	08 95       	ret

00001b8c <__fp_nan>:
    1b8c:	9f ef       	ldi	r25, 0xFF	; 255
    1b8e:	80 ec       	ldi	r24, 0xC0	; 192
    1b90:	08 95       	ret

00001b92 <__fp_pscA>:
    1b92:	00 24       	eor	r0, r0
    1b94:	0a 94       	dec	r0
    1b96:	16 16       	cp	r1, r22
    1b98:	17 06       	cpc	r1, r23
    1b9a:	18 06       	cpc	r1, r24
    1b9c:	09 06       	cpc	r0, r25
    1b9e:	08 95       	ret

00001ba0 <__fp_pscB>:
    1ba0:	00 24       	eor	r0, r0
    1ba2:	0a 94       	dec	r0
    1ba4:	12 16       	cp	r1, r18
    1ba6:	13 06       	cpc	r1, r19
    1ba8:	14 06       	cpc	r1, r20
    1baa:	05 06       	cpc	r0, r21
    1bac:	08 95       	ret

00001bae <__fp_round>:
    1bae:	09 2e       	mov	r0, r25
    1bb0:	03 94       	inc	r0
    1bb2:	00 0c       	add	r0, r0
    1bb4:	11 f4       	brne	.+4      	; 0x1bba <__fp_round+0xc>
    1bb6:	88 23       	and	r24, r24
    1bb8:	52 f0       	brmi	.+20     	; 0x1bce <__fp_round+0x20>
    1bba:	bb 0f       	add	r27, r27
    1bbc:	40 f4       	brcc	.+16     	; 0x1bce <__fp_round+0x20>
    1bbe:	bf 2b       	or	r27, r31
    1bc0:	11 f4       	brne	.+4      	; 0x1bc6 <__fp_round+0x18>
    1bc2:	60 ff       	sbrs	r22, 0
    1bc4:	04 c0       	rjmp	.+8      	; 0x1bce <__fp_round+0x20>
    1bc6:	6f 5f       	subi	r22, 0xFF	; 255
    1bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bca:	8f 4f       	sbci	r24, 0xFF	; 255
    1bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bce:	08 95       	ret

00001bd0 <__fp_split3>:
    1bd0:	57 fd       	sbrc	r21, 7
    1bd2:	90 58       	subi	r25, 0x80	; 128
    1bd4:	44 0f       	add	r20, r20
    1bd6:	55 1f       	adc	r21, r21
    1bd8:	59 f0       	breq	.+22     	; 0x1bf0 <__fp_splitA+0x10>
    1bda:	5f 3f       	cpi	r21, 0xFF	; 255
    1bdc:	71 f0       	breq	.+28     	; 0x1bfa <__fp_splitA+0x1a>
    1bde:	47 95       	ror	r20

00001be0 <__fp_splitA>:
    1be0:	88 0f       	add	r24, r24
    1be2:	97 fb       	bst	r25, 7
    1be4:	99 1f       	adc	r25, r25
    1be6:	61 f0       	breq	.+24     	; 0x1c00 <__fp_splitA+0x20>
    1be8:	9f 3f       	cpi	r25, 0xFF	; 255
    1bea:	79 f0       	breq	.+30     	; 0x1c0a <__fp_splitA+0x2a>
    1bec:	87 95       	ror	r24
    1bee:	08 95       	ret
    1bf0:	12 16       	cp	r1, r18
    1bf2:	13 06       	cpc	r1, r19
    1bf4:	14 06       	cpc	r1, r20
    1bf6:	55 1f       	adc	r21, r21
    1bf8:	f2 cf       	rjmp	.-28     	; 0x1bde <__fp_split3+0xe>
    1bfa:	46 95       	lsr	r20
    1bfc:	f1 df       	rcall	.-30     	; 0x1be0 <__fp_splitA>
    1bfe:	08 c0       	rjmp	.+16     	; 0x1c10 <__fp_splitA+0x30>
    1c00:	16 16       	cp	r1, r22
    1c02:	17 06       	cpc	r1, r23
    1c04:	18 06       	cpc	r1, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	f1 cf       	rjmp	.-30     	; 0x1bec <__fp_splitA+0xc>
    1c0a:	86 95       	lsr	r24
    1c0c:	71 05       	cpc	r23, r1
    1c0e:	61 05       	cpc	r22, r1
    1c10:	08 94       	sec
    1c12:	08 95       	ret

00001c14 <__fp_zero>:
    1c14:	e8 94       	clt

00001c16 <__fp_szero>:
    1c16:	bb 27       	eor	r27, r27
    1c18:	66 27       	eor	r22, r22
    1c1a:	77 27       	eor	r23, r23
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	97 f9       	bld	r25, 7
    1c20:	08 95       	ret

00001c22 <__mulsf3>:
    1c22:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__mulsf3x>
    1c26:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__fp_round>
    1c2a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__fp_pscA>
    1c2e:	38 f0       	brcs	.+14     	; 0x1c3e <__mulsf3+0x1c>
    1c30:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__fp_pscB>
    1c34:	20 f0       	brcs	.+8      	; 0x1c3e <__mulsf3+0x1c>
    1c36:	95 23       	and	r25, r21
    1c38:	11 f0       	breq	.+4      	; 0x1c3e <__mulsf3+0x1c>
    1c3a:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__fp_inf>
    1c3e:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__fp_nan>
    1c42:	11 24       	eor	r1, r1
    1c44:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__fp_szero>

00001c48 <__mulsf3x>:
    1c48:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__fp_split3>
    1c4c:	70 f3       	brcs	.-36     	; 0x1c2a <__mulsf3+0x8>

00001c4e <__mulsf3_pse>:
    1c4e:	95 9f       	mul	r25, r21
    1c50:	c1 f3       	breq	.-16     	; 0x1c42 <__mulsf3+0x20>
    1c52:	95 0f       	add	r25, r21
    1c54:	50 e0       	ldi	r21, 0x00	; 0
    1c56:	55 1f       	adc	r21, r21
    1c58:	62 9f       	mul	r22, r18
    1c5a:	f0 01       	movw	r30, r0
    1c5c:	72 9f       	mul	r23, r18
    1c5e:	bb 27       	eor	r27, r27
    1c60:	f0 0d       	add	r31, r0
    1c62:	b1 1d       	adc	r27, r1
    1c64:	63 9f       	mul	r22, r19
    1c66:	aa 27       	eor	r26, r26
    1c68:	f0 0d       	add	r31, r0
    1c6a:	b1 1d       	adc	r27, r1
    1c6c:	aa 1f       	adc	r26, r26
    1c6e:	64 9f       	mul	r22, r20
    1c70:	66 27       	eor	r22, r22
    1c72:	b0 0d       	add	r27, r0
    1c74:	a1 1d       	adc	r26, r1
    1c76:	66 1f       	adc	r22, r22
    1c78:	82 9f       	mul	r24, r18
    1c7a:	22 27       	eor	r18, r18
    1c7c:	b0 0d       	add	r27, r0
    1c7e:	a1 1d       	adc	r26, r1
    1c80:	62 1f       	adc	r22, r18
    1c82:	73 9f       	mul	r23, r19
    1c84:	b0 0d       	add	r27, r0
    1c86:	a1 1d       	adc	r26, r1
    1c88:	62 1f       	adc	r22, r18
    1c8a:	83 9f       	mul	r24, r19
    1c8c:	a0 0d       	add	r26, r0
    1c8e:	61 1d       	adc	r22, r1
    1c90:	22 1f       	adc	r18, r18
    1c92:	74 9f       	mul	r23, r20
    1c94:	33 27       	eor	r19, r19
    1c96:	a0 0d       	add	r26, r0
    1c98:	61 1d       	adc	r22, r1
    1c9a:	23 1f       	adc	r18, r19
    1c9c:	84 9f       	mul	r24, r20
    1c9e:	60 0d       	add	r22, r0
    1ca0:	21 1d       	adc	r18, r1
    1ca2:	82 2f       	mov	r24, r18
    1ca4:	76 2f       	mov	r23, r22
    1ca6:	6a 2f       	mov	r22, r26
    1ca8:	11 24       	eor	r1, r1
    1caa:	9f 57       	subi	r25, 0x7F	; 127
    1cac:	50 40       	sbci	r21, 0x00	; 0
    1cae:	9a f0       	brmi	.+38     	; 0x1cd6 <__mulsf3_pse+0x88>
    1cb0:	f1 f0       	breq	.+60     	; 0x1cee <__mulsf3_pse+0xa0>
    1cb2:	88 23       	and	r24, r24
    1cb4:	4a f0       	brmi	.+18     	; 0x1cc8 <__mulsf3_pse+0x7a>
    1cb6:	ee 0f       	add	r30, r30
    1cb8:	ff 1f       	adc	r31, r31
    1cba:	bb 1f       	adc	r27, r27
    1cbc:	66 1f       	adc	r22, r22
    1cbe:	77 1f       	adc	r23, r23
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	91 50       	subi	r25, 0x01	; 1
    1cc4:	50 40       	sbci	r21, 0x00	; 0
    1cc6:	a9 f7       	brne	.-22     	; 0x1cb2 <__mulsf3_pse+0x64>
    1cc8:	9e 3f       	cpi	r25, 0xFE	; 254
    1cca:	51 05       	cpc	r21, r1
    1ccc:	80 f0       	brcs	.+32     	; 0x1cee <__mulsf3_pse+0xa0>
    1cce:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__fp_inf>
    1cd2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__fp_szero>
    1cd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1cd8:	e4 f3       	brlt	.-8      	; 0x1cd2 <__mulsf3_pse+0x84>
    1cda:	98 3e       	cpi	r25, 0xE8	; 232
    1cdc:	d4 f3       	brlt	.-12     	; 0x1cd2 <__mulsf3_pse+0x84>
    1cde:	86 95       	lsr	r24
    1ce0:	77 95       	ror	r23
    1ce2:	67 95       	ror	r22
    1ce4:	b7 95       	ror	r27
    1ce6:	f7 95       	ror	r31
    1ce8:	e7 95       	ror	r30
    1cea:	9f 5f       	subi	r25, 0xFF	; 255
    1cec:	c1 f7       	brne	.-16     	; 0x1cde <__mulsf3_pse+0x90>
    1cee:	fe 2b       	or	r31, r30
    1cf0:	88 0f       	add	r24, r24
    1cf2:	91 1d       	adc	r25, r1
    1cf4:	96 95       	lsr	r25
    1cf6:	87 95       	ror	r24
    1cf8:	97 f9       	bld	r25, 7
    1cfa:	08 95       	ret

00001cfc <vfprintf>:
    1cfc:	a0 e1       	ldi	r26, 0x10	; 16
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e4 e8       	ldi	r30, 0x84	; 132
    1d02:	fe e0       	ldi	r31, 0x0E	; 14
    1d04:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <__prologue_saves__>
    1d08:	7c 01       	movw	r14, r24
    1d0a:	1b 01       	movw	r2, r22
    1d0c:	6a 01       	movw	r12, r20
    1d0e:	fc 01       	movw	r30, r24
    1d10:	17 82       	std	Z+7, r1	; 0x07
    1d12:	16 82       	std	Z+6, r1	; 0x06
    1d14:	83 81       	ldd	r24, Z+3	; 0x03
    1d16:	81 ff       	sbrs	r24, 1
    1d18:	44 c3       	rjmp	.+1672   	; 0x23a2 <vfprintf+0x6a6>
    1d1a:	9e 01       	movw	r18, r28
    1d1c:	2f 5f       	subi	r18, 0xFF	; 255
    1d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d20:	39 01       	movw	r6, r18
    1d22:	f7 01       	movw	r30, r14
    1d24:	93 81       	ldd	r25, Z+3	; 0x03
    1d26:	f1 01       	movw	r30, r2
    1d28:	93 fd       	sbrc	r25, 3
    1d2a:	85 91       	lpm	r24, Z+
    1d2c:	93 ff       	sbrs	r25, 3
    1d2e:	81 91       	ld	r24, Z+
    1d30:	1f 01       	movw	r2, r30
    1d32:	88 23       	and	r24, r24
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <vfprintf+0x3c>
    1d36:	31 c3       	rjmp	.+1634   	; 0x239a <vfprintf+0x69e>
    1d38:	85 32       	cpi	r24, 0x25	; 37
    1d3a:	39 f4       	brne	.+14     	; 0x1d4a <vfprintf+0x4e>
    1d3c:	93 fd       	sbrc	r25, 3
    1d3e:	85 91       	lpm	r24, Z+
    1d40:	93 ff       	sbrs	r25, 3
    1d42:	81 91       	ld	r24, Z+
    1d44:	1f 01       	movw	r2, r30
    1d46:	85 32       	cpi	r24, 0x25	; 37
    1d48:	39 f4       	brne	.+14     	; 0x1d58 <vfprintf+0x5c>
    1d4a:	b7 01       	movw	r22, r14
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    1d52:	56 01       	movw	r10, r12
    1d54:	65 01       	movw	r12, r10
    1d56:	e5 cf       	rjmp	.-54     	; 0x1d22 <vfprintf+0x26>
    1d58:	10 e0       	ldi	r17, 0x00	; 0
    1d5a:	51 2c       	mov	r5, r1
    1d5c:	91 2c       	mov	r9, r1
    1d5e:	ff e1       	ldi	r31, 0x1F	; 31
    1d60:	f9 15       	cp	r31, r9
    1d62:	d8 f0       	brcs	.+54     	; 0x1d9a <vfprintf+0x9e>
    1d64:	8b 32       	cpi	r24, 0x2B	; 43
    1d66:	79 f0       	breq	.+30     	; 0x1d86 <vfprintf+0x8a>
    1d68:	38 f4       	brcc	.+14     	; 0x1d78 <vfprintf+0x7c>
    1d6a:	80 32       	cpi	r24, 0x20	; 32
    1d6c:	79 f0       	breq	.+30     	; 0x1d8c <vfprintf+0x90>
    1d6e:	83 32       	cpi	r24, 0x23	; 35
    1d70:	a1 f4       	brne	.+40     	; 0x1d9a <vfprintf+0x9e>
    1d72:	f9 2d       	mov	r31, r9
    1d74:	f0 61       	ori	r31, 0x10	; 16
    1d76:	2e c0       	rjmp	.+92     	; 0x1dd4 <vfprintf+0xd8>
    1d78:	8d 32       	cpi	r24, 0x2D	; 45
    1d7a:	61 f0       	breq	.+24     	; 0x1d94 <vfprintf+0x98>
    1d7c:	80 33       	cpi	r24, 0x30	; 48
    1d7e:	69 f4       	brne	.+26     	; 0x1d9a <vfprintf+0x9e>
    1d80:	29 2d       	mov	r18, r9
    1d82:	21 60       	ori	r18, 0x01	; 1
    1d84:	2d c0       	rjmp	.+90     	; 0x1de0 <vfprintf+0xe4>
    1d86:	39 2d       	mov	r19, r9
    1d88:	32 60       	ori	r19, 0x02	; 2
    1d8a:	93 2e       	mov	r9, r19
    1d8c:	89 2d       	mov	r24, r9
    1d8e:	84 60       	ori	r24, 0x04	; 4
    1d90:	98 2e       	mov	r9, r24
    1d92:	2a c0       	rjmp	.+84     	; 0x1de8 <vfprintf+0xec>
    1d94:	e9 2d       	mov	r30, r9
    1d96:	e8 60       	ori	r30, 0x08	; 8
    1d98:	15 c0       	rjmp	.+42     	; 0x1dc4 <vfprintf+0xc8>
    1d9a:	97 fc       	sbrc	r9, 7
    1d9c:	2d c0       	rjmp	.+90     	; 0x1df8 <vfprintf+0xfc>
    1d9e:	20 ed       	ldi	r18, 0xD0	; 208
    1da0:	28 0f       	add	r18, r24
    1da2:	2a 30       	cpi	r18, 0x0A	; 10
    1da4:	88 f4       	brcc	.+34     	; 0x1dc8 <vfprintf+0xcc>
    1da6:	96 fe       	sbrs	r9, 6
    1da8:	06 c0       	rjmp	.+12     	; 0x1db6 <vfprintf+0xba>
    1daa:	3a e0       	ldi	r19, 0x0A	; 10
    1dac:	13 9f       	mul	r17, r19
    1dae:	20 0d       	add	r18, r0
    1db0:	11 24       	eor	r1, r1
    1db2:	12 2f       	mov	r17, r18
    1db4:	19 c0       	rjmp	.+50     	; 0x1de8 <vfprintf+0xec>
    1db6:	8a e0       	ldi	r24, 0x0A	; 10
    1db8:	58 9e       	mul	r5, r24
    1dba:	20 0d       	add	r18, r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	52 2e       	mov	r5, r18
    1dc0:	e9 2d       	mov	r30, r9
    1dc2:	e0 62       	ori	r30, 0x20	; 32
    1dc4:	9e 2e       	mov	r9, r30
    1dc6:	10 c0       	rjmp	.+32     	; 0x1de8 <vfprintf+0xec>
    1dc8:	8e 32       	cpi	r24, 0x2E	; 46
    1dca:	31 f4       	brne	.+12     	; 0x1dd8 <vfprintf+0xdc>
    1dcc:	96 fc       	sbrc	r9, 6
    1dce:	e5 c2       	rjmp	.+1482   	; 0x239a <vfprintf+0x69e>
    1dd0:	f9 2d       	mov	r31, r9
    1dd2:	f0 64       	ori	r31, 0x40	; 64
    1dd4:	9f 2e       	mov	r9, r31
    1dd6:	08 c0       	rjmp	.+16     	; 0x1de8 <vfprintf+0xec>
    1dd8:	8c 36       	cpi	r24, 0x6C	; 108
    1dda:	21 f4       	brne	.+8      	; 0x1de4 <vfprintf+0xe8>
    1ddc:	29 2d       	mov	r18, r9
    1dde:	20 68       	ori	r18, 0x80	; 128
    1de0:	92 2e       	mov	r9, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <vfprintf+0xec>
    1de4:	88 36       	cpi	r24, 0x68	; 104
    1de6:	41 f4       	brne	.+16     	; 0x1df8 <vfprintf+0xfc>
    1de8:	f1 01       	movw	r30, r2
    1dea:	93 fd       	sbrc	r25, 3
    1dec:	85 91       	lpm	r24, Z+
    1dee:	93 ff       	sbrs	r25, 3
    1df0:	81 91       	ld	r24, Z+
    1df2:	1f 01       	movw	r2, r30
    1df4:	81 11       	cpse	r24, r1
    1df6:	b3 cf       	rjmp	.-154    	; 0x1d5e <vfprintf+0x62>
    1df8:	9b eb       	ldi	r25, 0xBB	; 187
    1dfa:	98 0f       	add	r25, r24
    1dfc:	93 30       	cpi	r25, 0x03	; 3
    1dfe:	20 f4       	brcc	.+8      	; 0x1e08 <vfprintf+0x10c>
    1e00:	99 2d       	mov	r25, r9
    1e02:	90 61       	ori	r25, 0x10	; 16
    1e04:	80 5e       	subi	r24, 0xE0	; 224
    1e06:	07 c0       	rjmp	.+14     	; 0x1e16 <vfprintf+0x11a>
    1e08:	9b e9       	ldi	r25, 0x9B	; 155
    1e0a:	98 0f       	add	r25, r24
    1e0c:	93 30       	cpi	r25, 0x03	; 3
    1e0e:	08 f0       	brcs	.+2      	; 0x1e12 <vfprintf+0x116>
    1e10:	66 c1       	rjmp	.+716    	; 0x20de <vfprintf+0x3e2>
    1e12:	99 2d       	mov	r25, r9
    1e14:	9f 7e       	andi	r25, 0xEF	; 239
    1e16:	96 ff       	sbrs	r25, 6
    1e18:	16 e0       	ldi	r17, 0x06	; 6
    1e1a:	9f 73       	andi	r25, 0x3F	; 63
    1e1c:	99 2e       	mov	r9, r25
    1e1e:	85 36       	cpi	r24, 0x65	; 101
    1e20:	19 f4       	brne	.+6      	; 0x1e28 <vfprintf+0x12c>
    1e22:	90 64       	ori	r25, 0x40	; 64
    1e24:	99 2e       	mov	r9, r25
    1e26:	08 c0       	rjmp	.+16     	; 0x1e38 <vfprintf+0x13c>
    1e28:	86 36       	cpi	r24, 0x66	; 102
    1e2a:	21 f4       	brne	.+8      	; 0x1e34 <vfprintf+0x138>
    1e2c:	39 2f       	mov	r19, r25
    1e2e:	30 68       	ori	r19, 0x80	; 128
    1e30:	93 2e       	mov	r9, r19
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <vfprintf+0x13c>
    1e34:	11 11       	cpse	r17, r1
    1e36:	11 50       	subi	r17, 0x01	; 1
    1e38:	97 fe       	sbrs	r9, 7
    1e3a:	07 c0       	rjmp	.+14     	; 0x1e4a <vfprintf+0x14e>
    1e3c:	1c 33       	cpi	r17, 0x3C	; 60
    1e3e:	50 f4       	brcc	.+20     	; 0x1e54 <vfprintf+0x158>
    1e40:	44 24       	eor	r4, r4
    1e42:	43 94       	inc	r4
    1e44:	41 0e       	add	r4, r17
    1e46:	27 e0       	ldi	r18, 0x07	; 7
    1e48:	0b c0       	rjmp	.+22     	; 0x1e60 <vfprintf+0x164>
    1e4a:	18 30       	cpi	r17, 0x08	; 8
    1e4c:	38 f0       	brcs	.+14     	; 0x1e5c <vfprintf+0x160>
    1e4e:	27 e0       	ldi	r18, 0x07	; 7
    1e50:	17 e0       	ldi	r17, 0x07	; 7
    1e52:	05 c0       	rjmp	.+10     	; 0x1e5e <vfprintf+0x162>
    1e54:	27 e0       	ldi	r18, 0x07	; 7
    1e56:	9c e3       	ldi	r25, 0x3C	; 60
    1e58:	49 2e       	mov	r4, r25
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <vfprintf+0x164>
    1e5c:	21 2f       	mov	r18, r17
    1e5e:	41 2c       	mov	r4, r1
    1e60:	56 01       	movw	r10, r12
    1e62:	84 e0       	ldi	r24, 0x04	; 4
    1e64:	a8 0e       	add	r10, r24
    1e66:	b1 1c       	adc	r11, r1
    1e68:	f6 01       	movw	r30, r12
    1e6a:	60 81       	ld	r22, Z
    1e6c:	71 81       	ldd	r23, Z+1	; 0x01
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	93 81       	ldd	r25, Z+3	; 0x03
    1e72:	04 2d       	mov	r16, r4
    1e74:	a3 01       	movw	r20, r6
    1e76:	0e 94 88 12 	call	0x2510	; 0x2510 <__ftoa_engine>
    1e7a:	6c 01       	movw	r12, r24
    1e7c:	f9 81       	ldd	r31, Y+1	; 0x01
    1e7e:	fc 87       	std	Y+12, r31	; 0x0c
    1e80:	f0 ff       	sbrs	r31, 0
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <vfprintf+0x18c>
    1e84:	f3 ff       	sbrs	r31, 3
    1e86:	06 c0       	rjmp	.+12     	; 0x1e94 <vfprintf+0x198>
    1e88:	91 fc       	sbrc	r9, 1
    1e8a:	06 c0       	rjmp	.+12     	; 0x1e98 <vfprintf+0x19c>
    1e8c:	92 fe       	sbrs	r9, 2
    1e8e:	06 c0       	rjmp	.+12     	; 0x1e9c <vfprintf+0x1a0>
    1e90:	00 e2       	ldi	r16, 0x20	; 32
    1e92:	05 c0       	rjmp	.+10     	; 0x1e9e <vfprintf+0x1a2>
    1e94:	0d e2       	ldi	r16, 0x2D	; 45
    1e96:	03 c0       	rjmp	.+6      	; 0x1e9e <vfprintf+0x1a2>
    1e98:	0b e2       	ldi	r16, 0x2B	; 43
    1e9a:	01 c0       	rjmp	.+2      	; 0x1e9e <vfprintf+0x1a2>
    1e9c:	00 e0       	ldi	r16, 0x00	; 0
    1e9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ea0:	8c 70       	andi	r24, 0x0C	; 12
    1ea2:	19 f0       	breq	.+6      	; 0x1eaa <vfprintf+0x1ae>
    1ea4:	01 11       	cpse	r16, r1
    1ea6:	5a c2       	rjmp	.+1204   	; 0x235c <vfprintf+0x660>
    1ea8:	9b c2       	rjmp	.+1334   	; 0x23e0 <vfprintf+0x6e4>
    1eaa:	97 fe       	sbrs	r9, 7
    1eac:	10 c0       	rjmp	.+32     	; 0x1ece <vfprintf+0x1d2>
    1eae:	4c 0c       	add	r4, r12
    1eb0:	fc 85       	ldd	r31, Y+12	; 0x0c
    1eb2:	f4 ff       	sbrs	r31, 4
    1eb4:	04 c0       	rjmp	.+8      	; 0x1ebe <vfprintf+0x1c2>
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	81 33       	cpi	r24, 0x31	; 49
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <vfprintf+0x1c2>
    1ebc:	4a 94       	dec	r4
    1ebe:	14 14       	cp	r1, r4
    1ec0:	74 f5       	brge	.+92     	; 0x1f1e <vfprintf+0x222>
    1ec2:	28 e0       	ldi	r18, 0x08	; 8
    1ec4:	24 15       	cp	r18, r4
    1ec6:	78 f5       	brcc	.+94     	; 0x1f26 <vfprintf+0x22a>
    1ec8:	88 e0       	ldi	r24, 0x08	; 8
    1eca:	48 2e       	mov	r4, r24
    1ecc:	2c c0       	rjmp	.+88     	; 0x1f26 <vfprintf+0x22a>
    1ece:	96 fc       	sbrc	r9, 6
    1ed0:	2a c0       	rjmp	.+84     	; 0x1f26 <vfprintf+0x22a>
    1ed2:	81 2f       	mov	r24, r17
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	8c 15       	cp	r24, r12
    1ed8:	9d 05       	cpc	r25, r13
    1eda:	9c f0       	brlt	.+38     	; 0x1f02 <vfprintf+0x206>
    1edc:	3c ef       	ldi	r19, 0xFC	; 252
    1ede:	c3 16       	cp	r12, r19
    1ee0:	3f ef       	ldi	r19, 0xFF	; 255
    1ee2:	d3 06       	cpc	r13, r19
    1ee4:	74 f0       	brlt	.+28     	; 0x1f02 <vfprintf+0x206>
    1ee6:	89 2d       	mov	r24, r9
    1ee8:	80 68       	ori	r24, 0x80	; 128
    1eea:	98 2e       	mov	r9, r24
    1eec:	0a c0       	rjmp	.+20     	; 0x1f02 <vfprintf+0x206>
    1eee:	e2 e0       	ldi	r30, 0x02	; 2
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	ec 0f       	add	r30, r28
    1ef4:	fd 1f       	adc	r31, r29
    1ef6:	e1 0f       	add	r30, r17
    1ef8:	f1 1d       	adc	r31, r1
    1efa:	80 81       	ld	r24, Z
    1efc:	80 33       	cpi	r24, 0x30	; 48
    1efe:	19 f4       	brne	.+6      	; 0x1f06 <vfprintf+0x20a>
    1f00:	11 50       	subi	r17, 0x01	; 1
    1f02:	11 11       	cpse	r17, r1
    1f04:	f4 cf       	rjmp	.-24     	; 0x1eee <vfprintf+0x1f2>
    1f06:	97 fe       	sbrs	r9, 7
    1f08:	0e c0       	rjmp	.+28     	; 0x1f26 <vfprintf+0x22a>
    1f0a:	44 24       	eor	r4, r4
    1f0c:	43 94       	inc	r4
    1f0e:	41 0e       	add	r4, r17
    1f10:	81 2f       	mov	r24, r17
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	c8 16       	cp	r12, r24
    1f16:	d9 06       	cpc	r13, r25
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <vfprintf+0x228>
    1f1a:	1c 19       	sub	r17, r12
    1f1c:	04 c0       	rjmp	.+8      	; 0x1f26 <vfprintf+0x22a>
    1f1e:	44 24       	eor	r4, r4
    1f20:	43 94       	inc	r4
    1f22:	01 c0       	rjmp	.+2      	; 0x1f26 <vfprintf+0x22a>
    1f24:	10 e0       	ldi	r17, 0x00	; 0
    1f26:	97 fe       	sbrs	r9, 7
    1f28:	06 c0       	rjmp	.+12     	; 0x1f36 <vfprintf+0x23a>
    1f2a:	1c 14       	cp	r1, r12
    1f2c:	1d 04       	cpc	r1, r13
    1f2e:	34 f4       	brge	.+12     	; 0x1f3c <vfprintf+0x240>
    1f30:	c6 01       	movw	r24, r12
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	05 c0       	rjmp	.+10     	; 0x1f40 <vfprintf+0x244>
    1f36:	85 e0       	ldi	r24, 0x05	; 5
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <vfprintf+0x244>
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	01 11       	cpse	r16, r1
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	11 23       	and	r17, r17
    1f46:	31 f0       	breq	.+12     	; 0x1f54 <vfprintf+0x258>
    1f48:	21 2f       	mov	r18, r17
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	2f 5f       	subi	r18, 0xFF	; 255
    1f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f50:	82 0f       	add	r24, r18
    1f52:	93 1f       	adc	r25, r19
    1f54:	25 2d       	mov	r18, r5
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	82 17       	cp	r24, r18
    1f5a:	93 07       	cpc	r25, r19
    1f5c:	14 f4       	brge	.+4      	; 0x1f62 <vfprintf+0x266>
    1f5e:	58 1a       	sub	r5, r24
    1f60:	01 c0       	rjmp	.+2      	; 0x1f64 <vfprintf+0x268>
    1f62:	51 2c       	mov	r5, r1
    1f64:	89 2d       	mov	r24, r9
    1f66:	89 70       	andi	r24, 0x09	; 9
    1f68:	49 f4       	brne	.+18     	; 0x1f7c <vfprintf+0x280>
    1f6a:	55 20       	and	r5, r5
    1f6c:	39 f0       	breq	.+14     	; 0x1f7c <vfprintf+0x280>
    1f6e:	b7 01       	movw	r22, r14
    1f70:	80 e2       	ldi	r24, 0x20	; 32
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    1f78:	5a 94       	dec	r5
    1f7a:	f7 cf       	rjmp	.-18     	; 0x1f6a <vfprintf+0x26e>
    1f7c:	00 23       	and	r16, r16
    1f7e:	29 f0       	breq	.+10     	; 0x1f8a <vfprintf+0x28e>
    1f80:	b7 01       	movw	r22, r14
    1f82:	80 2f       	mov	r24, r16
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    1f8a:	93 fc       	sbrc	r9, 3
    1f8c:	09 c0       	rjmp	.+18     	; 0x1fa0 <vfprintf+0x2a4>
    1f8e:	55 20       	and	r5, r5
    1f90:	39 f0       	breq	.+14     	; 0x1fa0 <vfprintf+0x2a4>
    1f92:	b7 01       	movw	r22, r14
    1f94:	80 e3       	ldi	r24, 0x30	; 48
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    1f9c:	5a 94       	dec	r5
    1f9e:	f7 cf       	rjmp	.-18     	; 0x1f8e <vfprintf+0x292>
    1fa0:	97 fe       	sbrs	r9, 7
    1fa2:	4c c0       	rjmp	.+152    	; 0x203c <vfprintf+0x340>
    1fa4:	46 01       	movw	r8, r12
    1fa6:	d7 fe       	sbrs	r13, 7
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <vfprintf+0x2b2>
    1faa:	81 2c       	mov	r8, r1
    1fac:	91 2c       	mov	r9, r1
    1fae:	c6 01       	movw	r24, r12
    1fb0:	88 19       	sub	r24, r8
    1fb2:	99 09       	sbc	r25, r9
    1fb4:	f3 01       	movw	r30, r6
    1fb6:	e8 0f       	add	r30, r24
    1fb8:	f9 1f       	adc	r31, r25
    1fba:	fe 87       	std	Y+14, r31	; 0x0e
    1fbc:	ed 87       	std	Y+13, r30	; 0x0d
    1fbe:	96 01       	movw	r18, r12
    1fc0:	24 19       	sub	r18, r4
    1fc2:	31 09       	sbc	r19, r1
    1fc4:	38 8b       	std	Y+16, r19	; 0x10
    1fc6:	2f 87       	std	Y+15, r18	; 0x0f
    1fc8:	01 2f       	mov	r16, r17
    1fca:	10 e0       	ldi	r17, 0x00	; 0
    1fcc:	11 95       	neg	r17
    1fce:	01 95       	neg	r16
    1fd0:	11 09       	sbc	r17, r1
    1fd2:	3f ef       	ldi	r19, 0xFF	; 255
    1fd4:	83 16       	cp	r8, r19
    1fd6:	93 06       	cpc	r9, r19
    1fd8:	29 f4       	brne	.+10     	; 0x1fe4 <vfprintf+0x2e8>
    1fda:	b7 01       	movw	r22, r14
    1fdc:	8e e2       	ldi	r24, 0x2E	; 46
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    1fe4:	c8 14       	cp	r12, r8
    1fe6:	d9 04       	cpc	r13, r9
    1fe8:	4c f0       	brlt	.+18     	; 0x1ffc <vfprintf+0x300>
    1fea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fec:	98 89       	ldd	r25, Y+16	; 0x10
    1fee:	88 15       	cp	r24, r8
    1ff0:	99 05       	cpc	r25, r9
    1ff2:	24 f4       	brge	.+8      	; 0x1ffc <vfprintf+0x300>
    1ff4:	ed 85       	ldd	r30, Y+13	; 0x0d
    1ff6:	fe 85       	ldd	r31, Y+14	; 0x0e
    1ff8:	81 81       	ldd	r24, Z+1	; 0x01
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <vfprintf+0x302>
    1ffc:	80 e3       	ldi	r24, 0x30	; 48
    1ffe:	f1 e0       	ldi	r31, 0x01	; 1
    2000:	8f 1a       	sub	r8, r31
    2002:	91 08       	sbc	r9, r1
    2004:	2d 85       	ldd	r18, Y+13	; 0x0d
    2006:	3e 85       	ldd	r19, Y+14	; 0x0e
    2008:	2f 5f       	subi	r18, 0xFF	; 255
    200a:	3f 4f       	sbci	r19, 0xFF	; 255
    200c:	3e 87       	std	Y+14, r19	; 0x0e
    200e:	2d 87       	std	Y+13, r18	; 0x0d
    2010:	80 16       	cp	r8, r16
    2012:	91 06       	cpc	r9, r17
    2014:	2c f0       	brlt	.+10     	; 0x2020 <vfprintf+0x324>
    2016:	b7 01       	movw	r22, r14
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    201e:	d9 cf       	rjmp	.-78     	; 0x1fd2 <vfprintf+0x2d6>
    2020:	c8 14       	cp	r12, r8
    2022:	d9 04       	cpc	r13, r9
    2024:	41 f4       	brne	.+16     	; 0x2036 <vfprintf+0x33a>
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	96 33       	cpi	r25, 0x36	; 54
    202a:	20 f4       	brcc	.+8      	; 0x2034 <vfprintf+0x338>
    202c:	95 33       	cpi	r25, 0x35	; 53
    202e:	19 f4       	brne	.+6      	; 0x2036 <vfprintf+0x33a>
    2030:	3c 85       	ldd	r19, Y+12	; 0x0c
    2032:	34 ff       	sbrs	r19, 4
    2034:	81 e3       	ldi	r24, 0x31	; 49
    2036:	b7 01       	movw	r22, r14
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	4e c0       	rjmp	.+156    	; 0x20d8 <vfprintf+0x3dc>
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	81 33       	cpi	r24, 0x31	; 49
    2040:	19 f0       	breq	.+6      	; 0x2048 <vfprintf+0x34c>
    2042:	9c 85       	ldd	r25, Y+12	; 0x0c
    2044:	9f 7e       	andi	r25, 0xEF	; 239
    2046:	9c 87       	std	Y+12, r25	; 0x0c
    2048:	b7 01       	movw	r22, r14
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    2050:	11 11       	cpse	r17, r1
    2052:	05 c0       	rjmp	.+10     	; 0x205e <vfprintf+0x362>
    2054:	94 fc       	sbrc	r9, 4
    2056:	18 c0       	rjmp	.+48     	; 0x2088 <vfprintf+0x38c>
    2058:	85 e6       	ldi	r24, 0x65	; 101
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	17 c0       	rjmp	.+46     	; 0x208c <vfprintf+0x390>
    205e:	b7 01       	movw	r22, r14
    2060:	8e e2       	ldi	r24, 0x2E	; 46
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    2068:	1e 5f       	subi	r17, 0xFE	; 254
    206a:	82 e0       	ldi	r24, 0x02	; 2
    206c:	01 e0       	ldi	r16, 0x01	; 1
    206e:	08 0f       	add	r16, r24
    2070:	f3 01       	movw	r30, r6
    2072:	e8 0f       	add	r30, r24
    2074:	f1 1d       	adc	r31, r1
    2076:	80 81       	ld	r24, Z
    2078:	b7 01       	movw	r22, r14
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    2080:	80 2f       	mov	r24, r16
    2082:	01 13       	cpse	r16, r17
    2084:	f3 cf       	rjmp	.-26     	; 0x206c <vfprintf+0x370>
    2086:	e6 cf       	rjmp	.-52     	; 0x2054 <vfprintf+0x358>
    2088:	85 e4       	ldi	r24, 0x45	; 69
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	b7 01       	movw	r22, r14
    208e:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    2092:	d7 fc       	sbrc	r13, 7
    2094:	06 c0       	rjmp	.+12     	; 0x20a2 <vfprintf+0x3a6>
    2096:	c1 14       	cp	r12, r1
    2098:	d1 04       	cpc	r13, r1
    209a:	41 f4       	brne	.+16     	; 0x20ac <vfprintf+0x3b0>
    209c:	ec 85       	ldd	r30, Y+12	; 0x0c
    209e:	e4 ff       	sbrs	r30, 4
    20a0:	05 c0       	rjmp	.+10     	; 0x20ac <vfprintf+0x3b0>
    20a2:	d1 94       	neg	r13
    20a4:	c1 94       	neg	r12
    20a6:	d1 08       	sbc	r13, r1
    20a8:	8d e2       	ldi	r24, 0x2D	; 45
    20aa:	01 c0       	rjmp	.+2      	; 0x20ae <vfprintf+0x3b2>
    20ac:	8b e2       	ldi	r24, 0x2B	; 43
    20ae:	b7 01       	movw	r22, r14
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    20b6:	80 e3       	ldi	r24, 0x30	; 48
    20b8:	2a e0       	ldi	r18, 0x0A	; 10
    20ba:	c2 16       	cp	r12, r18
    20bc:	d1 04       	cpc	r13, r1
    20be:	2c f0       	brlt	.+10     	; 0x20ca <vfprintf+0x3ce>
    20c0:	8f 5f       	subi	r24, 0xFF	; 255
    20c2:	fa e0       	ldi	r31, 0x0A	; 10
    20c4:	cf 1a       	sub	r12, r31
    20c6:	d1 08       	sbc	r13, r1
    20c8:	f7 cf       	rjmp	.-18     	; 0x20b8 <vfprintf+0x3bc>
    20ca:	b7 01       	movw	r22, r14
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    20d2:	b7 01       	movw	r22, r14
    20d4:	c6 01       	movw	r24, r12
    20d6:	c0 96       	adiw	r24, 0x30	; 48
    20d8:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    20dc:	54 c1       	rjmp	.+680    	; 0x2386 <vfprintf+0x68a>
    20de:	83 36       	cpi	r24, 0x63	; 99
    20e0:	31 f0       	breq	.+12     	; 0x20ee <vfprintf+0x3f2>
    20e2:	83 37       	cpi	r24, 0x73	; 115
    20e4:	79 f0       	breq	.+30     	; 0x2104 <vfprintf+0x408>
    20e6:	83 35       	cpi	r24, 0x53	; 83
    20e8:	09 f0       	breq	.+2      	; 0x20ec <vfprintf+0x3f0>
    20ea:	56 c0       	rjmp	.+172    	; 0x2198 <vfprintf+0x49c>
    20ec:	20 c0       	rjmp	.+64     	; 0x212e <vfprintf+0x432>
    20ee:	56 01       	movw	r10, r12
    20f0:	32 e0       	ldi	r19, 0x02	; 2
    20f2:	a3 0e       	add	r10, r19
    20f4:	b1 1c       	adc	r11, r1
    20f6:	f6 01       	movw	r30, r12
    20f8:	80 81       	ld	r24, Z
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	01 e0       	ldi	r16, 0x01	; 1
    20fe:	10 e0       	ldi	r17, 0x00	; 0
    2100:	63 01       	movw	r12, r6
    2102:	12 c0       	rjmp	.+36     	; 0x2128 <vfprintf+0x42c>
    2104:	56 01       	movw	r10, r12
    2106:	f2 e0       	ldi	r31, 0x02	; 2
    2108:	af 0e       	add	r10, r31
    210a:	b1 1c       	adc	r11, r1
    210c:	f6 01       	movw	r30, r12
    210e:	c0 80       	ld	r12, Z
    2110:	d1 80       	ldd	r13, Z+1	; 0x01
    2112:	96 fe       	sbrs	r9, 6
    2114:	03 c0       	rjmp	.+6      	; 0x211c <vfprintf+0x420>
    2116:	61 2f       	mov	r22, r17
    2118:	70 e0       	ldi	r23, 0x00	; 0
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <vfprintf+0x424>
    211c:	6f ef       	ldi	r22, 0xFF	; 255
    211e:	7f ef       	ldi	r23, 0xFF	; 255
    2120:	c6 01       	movw	r24, r12
    2122:	0e 94 7f 13 	call	0x26fe	; 0x26fe <strnlen>
    2126:	8c 01       	movw	r16, r24
    2128:	f9 2d       	mov	r31, r9
    212a:	ff 77       	andi	r31, 0x7F	; 127
    212c:	14 c0       	rjmp	.+40     	; 0x2156 <vfprintf+0x45a>
    212e:	56 01       	movw	r10, r12
    2130:	22 e0       	ldi	r18, 0x02	; 2
    2132:	a2 0e       	add	r10, r18
    2134:	b1 1c       	adc	r11, r1
    2136:	f6 01       	movw	r30, r12
    2138:	c0 80       	ld	r12, Z
    213a:	d1 80       	ldd	r13, Z+1	; 0x01
    213c:	96 fe       	sbrs	r9, 6
    213e:	03 c0       	rjmp	.+6      	; 0x2146 <vfprintf+0x44a>
    2140:	61 2f       	mov	r22, r17
    2142:	70 e0       	ldi	r23, 0x00	; 0
    2144:	02 c0       	rjmp	.+4      	; 0x214a <vfprintf+0x44e>
    2146:	6f ef       	ldi	r22, 0xFF	; 255
    2148:	7f ef       	ldi	r23, 0xFF	; 255
    214a:	c6 01       	movw	r24, r12
    214c:	0e 94 60 13 	call	0x26c0	; 0x26c0 <strnlen_P>
    2150:	8c 01       	movw	r16, r24
    2152:	f9 2d       	mov	r31, r9
    2154:	f0 68       	ori	r31, 0x80	; 128
    2156:	9f 2e       	mov	r9, r31
    2158:	f3 fd       	sbrc	r31, 3
    215a:	1a c0       	rjmp	.+52     	; 0x2190 <vfprintf+0x494>
    215c:	85 2d       	mov	r24, r5
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	08 17       	cp	r16, r24
    2162:	19 07       	cpc	r17, r25
    2164:	a8 f4       	brcc	.+42     	; 0x2190 <vfprintf+0x494>
    2166:	b7 01       	movw	r22, r14
    2168:	80 e2       	ldi	r24, 0x20	; 32
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    2170:	5a 94       	dec	r5
    2172:	f4 cf       	rjmp	.-24     	; 0x215c <vfprintf+0x460>
    2174:	f6 01       	movw	r30, r12
    2176:	97 fc       	sbrc	r9, 7
    2178:	85 91       	lpm	r24, Z+
    217a:	97 fe       	sbrs	r9, 7
    217c:	81 91       	ld	r24, Z+
    217e:	6f 01       	movw	r12, r30
    2180:	b7 01       	movw	r22, r14
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    2188:	51 10       	cpse	r5, r1
    218a:	5a 94       	dec	r5
    218c:	01 50       	subi	r16, 0x01	; 1
    218e:	11 09       	sbc	r17, r1
    2190:	01 15       	cp	r16, r1
    2192:	11 05       	cpc	r17, r1
    2194:	79 f7       	brne	.-34     	; 0x2174 <vfprintf+0x478>
    2196:	f7 c0       	rjmp	.+494    	; 0x2386 <vfprintf+0x68a>
    2198:	84 36       	cpi	r24, 0x64	; 100
    219a:	11 f0       	breq	.+4      	; 0x21a0 <vfprintf+0x4a4>
    219c:	89 36       	cpi	r24, 0x69	; 105
    219e:	61 f5       	brne	.+88     	; 0x21f8 <vfprintf+0x4fc>
    21a0:	56 01       	movw	r10, r12
    21a2:	97 fe       	sbrs	r9, 7
    21a4:	09 c0       	rjmp	.+18     	; 0x21b8 <vfprintf+0x4bc>
    21a6:	24 e0       	ldi	r18, 0x04	; 4
    21a8:	a2 0e       	add	r10, r18
    21aa:	b1 1c       	adc	r11, r1
    21ac:	f6 01       	movw	r30, r12
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	0a c0       	rjmp	.+20     	; 0x21cc <vfprintf+0x4d0>
    21b8:	f2 e0       	ldi	r31, 0x02	; 2
    21ba:	af 0e       	add	r10, r31
    21bc:	b1 1c       	adc	r11, r1
    21be:	f6 01       	movw	r30, r12
    21c0:	60 81       	ld	r22, Z
    21c2:	71 81       	ldd	r23, Z+1	; 0x01
    21c4:	07 2e       	mov	r0, r23
    21c6:	00 0c       	add	r0, r0
    21c8:	88 0b       	sbc	r24, r24
    21ca:	99 0b       	sbc	r25, r25
    21cc:	f9 2d       	mov	r31, r9
    21ce:	ff 76       	andi	r31, 0x6F	; 111
    21d0:	9f 2e       	mov	r9, r31
    21d2:	97 ff       	sbrs	r25, 7
    21d4:	09 c0       	rjmp	.+18     	; 0x21e8 <vfprintf+0x4ec>
    21d6:	90 95       	com	r25
    21d8:	80 95       	com	r24
    21da:	70 95       	com	r23
    21dc:	61 95       	neg	r22
    21de:	7f 4f       	sbci	r23, 0xFF	; 255
    21e0:	8f 4f       	sbci	r24, 0xFF	; 255
    21e2:	9f 4f       	sbci	r25, 0xFF	; 255
    21e4:	f0 68       	ori	r31, 0x80	; 128
    21e6:	9f 2e       	mov	r9, r31
    21e8:	2a e0       	ldi	r18, 0x0A	; 10
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	a3 01       	movw	r20, r6
    21ee:	0e 94 c6 13 	call	0x278c	; 0x278c <__ultoa_invert>
    21f2:	c8 2e       	mov	r12, r24
    21f4:	c6 18       	sub	r12, r6
    21f6:	3f c0       	rjmp	.+126    	; 0x2276 <vfprintf+0x57a>
    21f8:	09 2d       	mov	r16, r9
    21fa:	85 37       	cpi	r24, 0x75	; 117
    21fc:	21 f4       	brne	.+8      	; 0x2206 <vfprintf+0x50a>
    21fe:	0f 7e       	andi	r16, 0xEF	; 239
    2200:	2a e0       	ldi	r18, 0x0A	; 10
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	1d c0       	rjmp	.+58     	; 0x2240 <vfprintf+0x544>
    2206:	09 7f       	andi	r16, 0xF9	; 249
    2208:	8f 36       	cpi	r24, 0x6F	; 111
    220a:	91 f0       	breq	.+36     	; 0x2230 <vfprintf+0x534>
    220c:	18 f4       	brcc	.+6      	; 0x2214 <vfprintf+0x518>
    220e:	88 35       	cpi	r24, 0x58	; 88
    2210:	59 f0       	breq	.+22     	; 0x2228 <vfprintf+0x52c>
    2212:	c3 c0       	rjmp	.+390    	; 0x239a <vfprintf+0x69e>
    2214:	80 37       	cpi	r24, 0x70	; 112
    2216:	19 f0       	breq	.+6      	; 0x221e <vfprintf+0x522>
    2218:	88 37       	cpi	r24, 0x78	; 120
    221a:	11 f0       	breq	.+4      	; 0x2220 <vfprintf+0x524>
    221c:	be c0       	rjmp	.+380    	; 0x239a <vfprintf+0x69e>
    221e:	00 61       	ori	r16, 0x10	; 16
    2220:	04 ff       	sbrs	r16, 4
    2222:	09 c0       	rjmp	.+18     	; 0x2236 <vfprintf+0x53a>
    2224:	04 60       	ori	r16, 0x04	; 4
    2226:	07 c0       	rjmp	.+14     	; 0x2236 <vfprintf+0x53a>
    2228:	94 fe       	sbrs	r9, 4
    222a:	08 c0       	rjmp	.+16     	; 0x223c <vfprintf+0x540>
    222c:	06 60       	ori	r16, 0x06	; 6
    222e:	06 c0       	rjmp	.+12     	; 0x223c <vfprintf+0x540>
    2230:	28 e0       	ldi	r18, 0x08	; 8
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	05 c0       	rjmp	.+10     	; 0x2240 <vfprintf+0x544>
    2236:	20 e1       	ldi	r18, 0x10	; 16
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <vfprintf+0x544>
    223c:	20 e1       	ldi	r18, 0x10	; 16
    223e:	32 e0       	ldi	r19, 0x02	; 2
    2240:	56 01       	movw	r10, r12
    2242:	07 ff       	sbrs	r16, 7
    2244:	09 c0       	rjmp	.+18     	; 0x2258 <vfprintf+0x55c>
    2246:	84 e0       	ldi	r24, 0x04	; 4
    2248:	a8 0e       	add	r10, r24
    224a:	b1 1c       	adc	r11, r1
    224c:	f6 01       	movw	r30, r12
    224e:	60 81       	ld	r22, Z
    2250:	71 81       	ldd	r23, Z+1	; 0x01
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	93 81       	ldd	r25, Z+3	; 0x03
    2256:	08 c0       	rjmp	.+16     	; 0x2268 <vfprintf+0x56c>
    2258:	f2 e0       	ldi	r31, 0x02	; 2
    225a:	af 0e       	add	r10, r31
    225c:	b1 1c       	adc	r11, r1
    225e:	f6 01       	movw	r30, r12
    2260:	60 81       	ld	r22, Z
    2262:	71 81       	ldd	r23, Z+1	; 0x01
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	a3 01       	movw	r20, r6
    226a:	0e 94 c6 13 	call	0x278c	; 0x278c <__ultoa_invert>
    226e:	c8 2e       	mov	r12, r24
    2270:	c6 18       	sub	r12, r6
    2272:	0f 77       	andi	r16, 0x7F	; 127
    2274:	90 2e       	mov	r9, r16
    2276:	96 fe       	sbrs	r9, 6
    2278:	0b c0       	rjmp	.+22     	; 0x2290 <vfprintf+0x594>
    227a:	09 2d       	mov	r16, r9
    227c:	0e 7f       	andi	r16, 0xFE	; 254
    227e:	c1 16       	cp	r12, r17
    2280:	50 f4       	brcc	.+20     	; 0x2296 <vfprintf+0x59a>
    2282:	94 fe       	sbrs	r9, 4
    2284:	0a c0       	rjmp	.+20     	; 0x229a <vfprintf+0x59e>
    2286:	92 fc       	sbrc	r9, 2
    2288:	08 c0       	rjmp	.+16     	; 0x229a <vfprintf+0x59e>
    228a:	09 2d       	mov	r16, r9
    228c:	0e 7e       	andi	r16, 0xEE	; 238
    228e:	05 c0       	rjmp	.+10     	; 0x229a <vfprintf+0x59e>
    2290:	dc 2c       	mov	r13, r12
    2292:	09 2d       	mov	r16, r9
    2294:	03 c0       	rjmp	.+6      	; 0x229c <vfprintf+0x5a0>
    2296:	dc 2c       	mov	r13, r12
    2298:	01 c0       	rjmp	.+2      	; 0x229c <vfprintf+0x5a0>
    229a:	d1 2e       	mov	r13, r17
    229c:	04 ff       	sbrs	r16, 4
    229e:	0d c0       	rjmp	.+26     	; 0x22ba <vfprintf+0x5be>
    22a0:	fe 01       	movw	r30, r28
    22a2:	ec 0d       	add	r30, r12
    22a4:	f1 1d       	adc	r31, r1
    22a6:	80 81       	ld	r24, Z
    22a8:	80 33       	cpi	r24, 0x30	; 48
    22aa:	11 f4       	brne	.+4      	; 0x22b0 <vfprintf+0x5b4>
    22ac:	09 7e       	andi	r16, 0xE9	; 233
    22ae:	09 c0       	rjmp	.+18     	; 0x22c2 <vfprintf+0x5c6>
    22b0:	02 ff       	sbrs	r16, 2
    22b2:	06 c0       	rjmp	.+12     	; 0x22c0 <vfprintf+0x5c4>
    22b4:	d3 94       	inc	r13
    22b6:	d3 94       	inc	r13
    22b8:	04 c0       	rjmp	.+8      	; 0x22c2 <vfprintf+0x5c6>
    22ba:	80 2f       	mov	r24, r16
    22bc:	86 78       	andi	r24, 0x86	; 134
    22be:	09 f0       	breq	.+2      	; 0x22c2 <vfprintf+0x5c6>
    22c0:	d3 94       	inc	r13
    22c2:	03 fd       	sbrc	r16, 3
    22c4:	11 c0       	rjmp	.+34     	; 0x22e8 <vfprintf+0x5ec>
    22c6:	00 ff       	sbrs	r16, 0
    22c8:	06 c0       	rjmp	.+12     	; 0x22d6 <vfprintf+0x5da>
    22ca:	1c 2d       	mov	r17, r12
    22cc:	d5 14       	cp	r13, r5
    22ce:	80 f4       	brcc	.+32     	; 0x22f0 <vfprintf+0x5f4>
    22d0:	15 0d       	add	r17, r5
    22d2:	1d 19       	sub	r17, r13
    22d4:	0d c0       	rjmp	.+26     	; 0x22f0 <vfprintf+0x5f4>
    22d6:	d5 14       	cp	r13, r5
    22d8:	58 f4       	brcc	.+22     	; 0x22f0 <vfprintf+0x5f4>
    22da:	b7 01       	movw	r22, r14
    22dc:	80 e2       	ldi	r24, 0x20	; 32
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    22e4:	d3 94       	inc	r13
    22e6:	f7 cf       	rjmp	.-18     	; 0x22d6 <vfprintf+0x5da>
    22e8:	d5 14       	cp	r13, r5
    22ea:	10 f4       	brcc	.+4      	; 0x22f0 <vfprintf+0x5f4>
    22ec:	5d 18       	sub	r5, r13
    22ee:	01 c0       	rjmp	.+2      	; 0x22f2 <vfprintf+0x5f6>
    22f0:	51 2c       	mov	r5, r1
    22f2:	04 ff       	sbrs	r16, 4
    22f4:	10 c0       	rjmp	.+32     	; 0x2316 <vfprintf+0x61a>
    22f6:	b7 01       	movw	r22, r14
    22f8:	80 e3       	ldi	r24, 0x30	; 48
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    2300:	02 ff       	sbrs	r16, 2
    2302:	17 c0       	rjmp	.+46     	; 0x2332 <vfprintf+0x636>
    2304:	01 fd       	sbrc	r16, 1
    2306:	03 c0       	rjmp	.+6      	; 0x230e <vfprintf+0x612>
    2308:	88 e7       	ldi	r24, 0x78	; 120
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <vfprintf+0x616>
    230e:	88 e5       	ldi	r24, 0x58	; 88
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	b7 01       	movw	r22, r14
    2314:	0c c0       	rjmp	.+24     	; 0x232e <vfprintf+0x632>
    2316:	80 2f       	mov	r24, r16
    2318:	86 78       	andi	r24, 0x86	; 134
    231a:	59 f0       	breq	.+22     	; 0x2332 <vfprintf+0x636>
    231c:	01 ff       	sbrs	r16, 1
    231e:	02 c0       	rjmp	.+4      	; 0x2324 <vfprintf+0x628>
    2320:	8b e2       	ldi	r24, 0x2B	; 43
    2322:	01 c0       	rjmp	.+2      	; 0x2326 <vfprintf+0x62a>
    2324:	80 e2       	ldi	r24, 0x20	; 32
    2326:	07 fd       	sbrc	r16, 7
    2328:	8d e2       	ldi	r24, 0x2D	; 45
    232a:	b7 01       	movw	r22, r14
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    2332:	c1 16       	cp	r12, r17
    2334:	38 f4       	brcc	.+14     	; 0x2344 <vfprintf+0x648>
    2336:	b7 01       	movw	r22, r14
    2338:	80 e3       	ldi	r24, 0x30	; 48
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    2340:	11 50       	subi	r17, 0x01	; 1
    2342:	f7 cf       	rjmp	.-18     	; 0x2332 <vfprintf+0x636>
    2344:	ca 94       	dec	r12
    2346:	f3 01       	movw	r30, r6
    2348:	ec 0d       	add	r30, r12
    234a:	f1 1d       	adc	r31, r1
    234c:	80 81       	ld	r24, Z
    234e:	b7 01       	movw	r22, r14
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    2356:	c1 10       	cpse	r12, r1
    2358:	f5 cf       	rjmp	.-22     	; 0x2344 <vfprintf+0x648>
    235a:	15 c0       	rjmp	.+42     	; 0x2386 <vfprintf+0x68a>
    235c:	f4 e0       	ldi	r31, 0x04	; 4
    235e:	f5 15       	cp	r31, r5
    2360:	60 f5       	brcc	.+88     	; 0x23ba <vfprintf+0x6be>
    2362:	84 e0       	ldi	r24, 0x04	; 4
    2364:	58 1a       	sub	r5, r24
    2366:	93 fe       	sbrs	r9, 3
    2368:	1f c0       	rjmp	.+62     	; 0x23a8 <vfprintf+0x6ac>
    236a:	01 11       	cpse	r16, r1
    236c:	27 c0       	rjmp	.+78     	; 0x23bc <vfprintf+0x6c0>
    236e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2370:	23 ff       	sbrs	r18, 3
    2372:	2a c0       	rjmp	.+84     	; 0x23c8 <vfprintf+0x6cc>
    2374:	06 ea       	ldi	r16, 0xA6	; 166
    2376:	10 e0       	ldi	r17, 0x00	; 0
    2378:	39 2d       	mov	r19, r9
    237a:	30 71       	andi	r19, 0x10	; 16
    237c:	93 2e       	mov	r9, r19
    237e:	f8 01       	movw	r30, r16
    2380:	84 91       	lpm	r24, Z
    2382:	81 11       	cpse	r24, r1
    2384:	24 c0       	rjmp	.+72     	; 0x23ce <vfprintf+0x6d2>
    2386:	55 20       	and	r5, r5
    2388:	09 f4       	brne	.+2      	; 0x238c <vfprintf+0x690>
    238a:	e4 cc       	rjmp	.-1592   	; 0x1d54 <vfprintf+0x58>
    238c:	b7 01       	movw	r22, r14
    238e:	80 e2       	ldi	r24, 0x20	; 32
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    2396:	5a 94       	dec	r5
    2398:	f6 cf       	rjmp	.-20     	; 0x2386 <vfprintf+0x68a>
    239a:	f7 01       	movw	r30, r14
    239c:	86 81       	ldd	r24, Z+6	; 0x06
    239e:	97 81       	ldd	r25, Z+7	; 0x07
    23a0:	26 c0       	rjmp	.+76     	; 0x23ee <vfprintf+0x6f2>
    23a2:	8f ef       	ldi	r24, 0xFF	; 255
    23a4:	9f ef       	ldi	r25, 0xFF	; 255
    23a6:	23 c0       	rjmp	.+70     	; 0x23ee <vfprintf+0x6f2>
    23a8:	b7 01       	movw	r22, r14
    23aa:	80 e2       	ldi	r24, 0x20	; 32
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    23b2:	5a 94       	dec	r5
    23b4:	51 10       	cpse	r5, r1
    23b6:	f8 cf       	rjmp	.-16     	; 0x23a8 <vfprintf+0x6ac>
    23b8:	d8 cf       	rjmp	.-80     	; 0x236a <vfprintf+0x66e>
    23ba:	51 2c       	mov	r5, r1
    23bc:	b7 01       	movw	r22, r14
    23be:	80 2f       	mov	r24, r16
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    23c6:	d3 cf       	rjmp	.-90     	; 0x236e <vfprintf+0x672>
    23c8:	0a ea       	ldi	r16, 0xAA	; 170
    23ca:	10 e0       	ldi	r17, 0x00	; 0
    23cc:	d5 cf       	rjmp	.-86     	; 0x2378 <vfprintf+0x67c>
    23ce:	91 10       	cpse	r9, r1
    23d0:	80 52       	subi	r24, 0x20	; 32
    23d2:	b7 01       	movw	r22, r14
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	0e 94 8a 13 	call	0x2714	; 0x2714 <fputc>
    23da:	0f 5f       	subi	r16, 0xFF	; 255
    23dc:	1f 4f       	sbci	r17, 0xFF	; 255
    23de:	cf cf       	rjmp	.-98     	; 0x237e <vfprintf+0x682>
    23e0:	23 e0       	ldi	r18, 0x03	; 3
    23e2:	25 15       	cp	r18, r5
    23e4:	10 f4       	brcc	.+4      	; 0x23ea <vfprintf+0x6ee>
    23e6:	83 e0       	ldi	r24, 0x03	; 3
    23e8:	bd cf       	rjmp	.-134    	; 0x2364 <vfprintf+0x668>
    23ea:	51 2c       	mov	r5, r1
    23ec:	c0 cf       	rjmp	.-128    	; 0x236e <vfprintf+0x672>
    23ee:	60 96       	adiw	r28, 0x10	; 16
    23f0:	e2 e1       	ldi	r30, 0x12	; 18
    23f2:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__epilogue_restores__>

000023f6 <__udivmodsi4>:
    23f6:	a1 e2       	ldi	r26, 0x21	; 33
    23f8:	1a 2e       	mov	r1, r26
    23fa:	aa 1b       	sub	r26, r26
    23fc:	bb 1b       	sub	r27, r27
    23fe:	fd 01       	movw	r30, r26
    2400:	0d c0       	rjmp	.+26     	; 0x241c <__udivmodsi4_ep>

00002402 <__udivmodsi4_loop>:
    2402:	aa 1f       	adc	r26, r26
    2404:	bb 1f       	adc	r27, r27
    2406:	ee 1f       	adc	r30, r30
    2408:	ff 1f       	adc	r31, r31
    240a:	a2 17       	cp	r26, r18
    240c:	b3 07       	cpc	r27, r19
    240e:	e4 07       	cpc	r30, r20
    2410:	f5 07       	cpc	r31, r21
    2412:	20 f0       	brcs	.+8      	; 0x241c <__udivmodsi4_ep>
    2414:	a2 1b       	sub	r26, r18
    2416:	b3 0b       	sbc	r27, r19
    2418:	e4 0b       	sbc	r30, r20
    241a:	f5 0b       	sbc	r31, r21

0000241c <__udivmodsi4_ep>:
    241c:	66 1f       	adc	r22, r22
    241e:	77 1f       	adc	r23, r23
    2420:	88 1f       	adc	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	1a 94       	dec	r1
    2426:	69 f7       	brne	.-38     	; 0x2402 <__udivmodsi4_loop>
    2428:	60 95       	com	r22
    242a:	70 95       	com	r23
    242c:	80 95       	com	r24
    242e:	90 95       	com	r25
    2430:	9b 01       	movw	r18, r22
    2432:	ac 01       	movw	r20, r24
    2434:	bd 01       	movw	r22, r26
    2436:	cf 01       	movw	r24, r30
    2438:	08 95       	ret

0000243a <__divmodsi4>:
    243a:	05 2e       	mov	r0, r21
    243c:	97 fb       	bst	r25, 7
    243e:	1e f4       	brtc	.+6      	; 0x2446 <__divmodsi4+0xc>
    2440:	00 94       	com	r0
    2442:	0e 94 34 12 	call	0x2468	; 0x2468 <__negsi2>
    2446:	57 fd       	sbrc	r21, 7
    2448:	07 d0       	rcall	.+14     	; 0x2458 <__divmodsi4_neg2>
    244a:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__udivmodsi4>
    244e:	07 fc       	sbrc	r0, 7
    2450:	03 d0       	rcall	.+6      	; 0x2458 <__divmodsi4_neg2>
    2452:	4e f4       	brtc	.+18     	; 0x2466 <__divmodsi4_exit>
    2454:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__negsi2>

00002458 <__divmodsi4_neg2>:
    2458:	50 95       	com	r21
    245a:	40 95       	com	r20
    245c:	30 95       	com	r19
    245e:	21 95       	neg	r18
    2460:	3f 4f       	sbci	r19, 0xFF	; 255
    2462:	4f 4f       	sbci	r20, 0xFF	; 255
    2464:	5f 4f       	sbci	r21, 0xFF	; 255

00002466 <__divmodsi4_exit>:
    2466:	08 95       	ret

00002468 <__negsi2>:
    2468:	90 95       	com	r25
    246a:	80 95       	com	r24
    246c:	70 95       	com	r23
    246e:	61 95       	neg	r22
    2470:	7f 4f       	sbci	r23, 0xFF	; 255
    2472:	8f 4f       	sbci	r24, 0xFF	; 255
    2474:	9f 4f       	sbci	r25, 0xFF	; 255
    2476:	08 95       	ret

00002478 <__tablejump2__>:
    2478:	ee 0f       	add	r30, r30
    247a:	ff 1f       	adc	r31, r31
    247c:	05 90       	lpm	r0, Z+
    247e:	f4 91       	lpm	r31, Z
    2480:	e0 2d       	mov	r30, r0
    2482:	09 94       	ijmp

00002484 <__umulhisi3>:
    2484:	a2 9f       	mul	r26, r18
    2486:	b0 01       	movw	r22, r0
    2488:	b3 9f       	mul	r27, r19
    248a:	c0 01       	movw	r24, r0
    248c:	a3 9f       	mul	r26, r19
    248e:	70 0d       	add	r23, r0
    2490:	81 1d       	adc	r24, r1
    2492:	11 24       	eor	r1, r1
    2494:	91 1d       	adc	r25, r1
    2496:	b2 9f       	mul	r27, r18
    2498:	70 0d       	add	r23, r0
    249a:	81 1d       	adc	r24, r1
    249c:	11 24       	eor	r1, r1
    249e:	91 1d       	adc	r25, r1
    24a0:	08 95       	ret

000024a2 <__prologue_saves__>:
    24a2:	2f 92       	push	r2
    24a4:	3f 92       	push	r3
    24a6:	4f 92       	push	r4
    24a8:	5f 92       	push	r5
    24aa:	6f 92       	push	r6
    24ac:	7f 92       	push	r7
    24ae:	8f 92       	push	r8
    24b0:	9f 92       	push	r9
    24b2:	af 92       	push	r10
    24b4:	bf 92       	push	r11
    24b6:	cf 92       	push	r12
    24b8:	df 92       	push	r13
    24ba:	ef 92       	push	r14
    24bc:	ff 92       	push	r15
    24be:	0f 93       	push	r16
    24c0:	1f 93       	push	r17
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	ca 1b       	sub	r28, r26
    24cc:	db 0b       	sbc	r29, r27
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	09 94       	ijmp

000024da <__epilogue_restores__>:
    24da:	2a 88       	ldd	r2, Y+18	; 0x12
    24dc:	39 88       	ldd	r3, Y+17	; 0x11
    24de:	48 88       	ldd	r4, Y+16	; 0x10
    24e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    24e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    24e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    24e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    24e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    24ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    24ec:	b9 84       	ldd	r11, Y+9	; 0x09
    24ee:	c8 84       	ldd	r12, Y+8	; 0x08
    24f0:	df 80       	ldd	r13, Y+7	; 0x07
    24f2:	ee 80       	ldd	r14, Y+6	; 0x06
    24f4:	fd 80       	ldd	r15, Y+5	; 0x05
    24f6:	0c 81       	ldd	r16, Y+4	; 0x04
    24f8:	1b 81       	ldd	r17, Y+3	; 0x03
    24fa:	aa 81       	ldd	r26, Y+2	; 0x02
    24fc:	b9 81       	ldd	r27, Y+1	; 0x01
    24fe:	ce 0f       	add	r28, r30
    2500:	d1 1d       	adc	r29, r1
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	ed 01       	movw	r28, r26
    250e:	08 95       	ret

00002510 <__ftoa_engine>:
    2510:	28 30       	cpi	r18, 0x08	; 8
    2512:	08 f0       	brcs	.+2      	; 0x2516 <__ftoa_engine+0x6>
    2514:	27 e0       	ldi	r18, 0x07	; 7
    2516:	33 27       	eor	r19, r19
    2518:	da 01       	movw	r26, r20
    251a:	99 0f       	add	r25, r25
    251c:	31 1d       	adc	r19, r1
    251e:	87 fd       	sbrc	r24, 7
    2520:	91 60       	ori	r25, 0x01	; 1
    2522:	00 96       	adiw	r24, 0x00	; 0
    2524:	61 05       	cpc	r22, r1
    2526:	71 05       	cpc	r23, r1
    2528:	39 f4       	brne	.+14     	; 0x2538 <__ftoa_engine+0x28>
    252a:	32 60       	ori	r19, 0x02	; 2
    252c:	2e 5f       	subi	r18, 0xFE	; 254
    252e:	3d 93       	st	X+, r19
    2530:	30 e3       	ldi	r19, 0x30	; 48
    2532:	2a 95       	dec	r18
    2534:	e1 f7       	brne	.-8      	; 0x252e <__ftoa_engine+0x1e>
    2536:	08 95       	ret
    2538:	9f 3f       	cpi	r25, 0xFF	; 255
    253a:	30 f0       	brcs	.+12     	; 0x2548 <__ftoa_engine+0x38>
    253c:	80 38       	cpi	r24, 0x80	; 128
    253e:	71 05       	cpc	r23, r1
    2540:	61 05       	cpc	r22, r1
    2542:	09 f0       	breq	.+2      	; 0x2546 <__ftoa_engine+0x36>
    2544:	3c 5f       	subi	r19, 0xFC	; 252
    2546:	3c 5f       	subi	r19, 0xFC	; 252
    2548:	3d 93       	st	X+, r19
    254a:	91 30       	cpi	r25, 0x01	; 1
    254c:	08 f0       	brcs	.+2      	; 0x2550 <__ftoa_engine+0x40>
    254e:	80 68       	ori	r24, 0x80	; 128
    2550:	91 1d       	adc	r25, r1
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	1f 93       	push	r17
    2558:	0f 93       	push	r16
    255a:	ff 92       	push	r15
    255c:	ef 92       	push	r14
    255e:	19 2f       	mov	r17, r25
    2560:	98 7f       	andi	r25, 0xF8	; 248
    2562:	96 95       	lsr	r25
    2564:	e9 2f       	mov	r30, r25
    2566:	96 95       	lsr	r25
    2568:	96 95       	lsr	r25
    256a:	e9 0f       	add	r30, r25
    256c:	ff 27       	eor	r31, r31
    256e:	e8 5f       	subi	r30, 0xF8	; 248
    2570:	fe 4f       	sbci	r31, 0xFE	; 254
    2572:	99 27       	eor	r25, r25
    2574:	33 27       	eor	r19, r19
    2576:	ee 24       	eor	r14, r14
    2578:	ff 24       	eor	r15, r15
    257a:	a7 01       	movw	r20, r14
    257c:	e7 01       	movw	r28, r14
    257e:	05 90       	lpm	r0, Z+
    2580:	08 94       	sec
    2582:	07 94       	ror	r0
    2584:	28 f4       	brcc	.+10     	; 0x2590 <__ftoa_engine+0x80>
    2586:	36 0f       	add	r19, r22
    2588:	e7 1e       	adc	r14, r23
    258a:	f8 1e       	adc	r15, r24
    258c:	49 1f       	adc	r20, r25
    258e:	51 1d       	adc	r21, r1
    2590:	66 0f       	add	r22, r22
    2592:	77 1f       	adc	r23, r23
    2594:	88 1f       	adc	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	06 94       	lsr	r0
    259a:	a1 f7       	brne	.-24     	; 0x2584 <__ftoa_engine+0x74>
    259c:	05 90       	lpm	r0, Z+
    259e:	07 94       	ror	r0
    25a0:	28 f4       	brcc	.+10     	; 0x25ac <__ftoa_engine+0x9c>
    25a2:	e7 0e       	add	r14, r23
    25a4:	f8 1e       	adc	r15, r24
    25a6:	49 1f       	adc	r20, r25
    25a8:	56 1f       	adc	r21, r22
    25aa:	c1 1d       	adc	r28, r1
    25ac:	77 0f       	add	r23, r23
    25ae:	88 1f       	adc	r24, r24
    25b0:	99 1f       	adc	r25, r25
    25b2:	66 1f       	adc	r22, r22
    25b4:	06 94       	lsr	r0
    25b6:	a1 f7       	brne	.-24     	; 0x25a0 <__ftoa_engine+0x90>
    25b8:	05 90       	lpm	r0, Z+
    25ba:	07 94       	ror	r0
    25bc:	28 f4       	brcc	.+10     	; 0x25c8 <__ftoa_engine+0xb8>
    25be:	f8 0e       	add	r15, r24
    25c0:	49 1f       	adc	r20, r25
    25c2:	56 1f       	adc	r21, r22
    25c4:	c7 1f       	adc	r28, r23
    25c6:	d1 1d       	adc	r29, r1
    25c8:	88 0f       	add	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	66 1f       	adc	r22, r22
    25ce:	77 1f       	adc	r23, r23
    25d0:	06 94       	lsr	r0
    25d2:	a1 f7       	brne	.-24     	; 0x25bc <__ftoa_engine+0xac>
    25d4:	05 90       	lpm	r0, Z+
    25d6:	07 94       	ror	r0
    25d8:	20 f4       	brcc	.+8      	; 0x25e2 <__ftoa_engine+0xd2>
    25da:	49 0f       	add	r20, r25
    25dc:	56 1f       	adc	r21, r22
    25de:	c7 1f       	adc	r28, r23
    25e0:	d8 1f       	adc	r29, r24
    25e2:	99 0f       	add	r25, r25
    25e4:	66 1f       	adc	r22, r22
    25e6:	77 1f       	adc	r23, r23
    25e8:	88 1f       	adc	r24, r24
    25ea:	06 94       	lsr	r0
    25ec:	a9 f7       	brne	.-22     	; 0x25d8 <__ftoa_engine+0xc8>
    25ee:	84 91       	lpm	r24, Z
    25f0:	10 95       	com	r17
    25f2:	17 70       	andi	r17, 0x07	; 7
    25f4:	41 f0       	breq	.+16     	; 0x2606 <__ftoa_engine+0xf6>
    25f6:	d6 95       	lsr	r29
    25f8:	c7 95       	ror	r28
    25fa:	57 95       	ror	r21
    25fc:	47 95       	ror	r20
    25fe:	f7 94       	ror	r15
    2600:	e7 94       	ror	r14
    2602:	1a 95       	dec	r17
    2604:	c1 f7       	brne	.-16     	; 0x25f6 <__ftoa_engine+0xe6>
    2606:	ee ea       	ldi	r30, 0xAE	; 174
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	68 94       	set
    260c:	15 90       	lpm	r1, Z+
    260e:	15 91       	lpm	r17, Z+
    2610:	35 91       	lpm	r19, Z+
    2612:	65 91       	lpm	r22, Z+
    2614:	95 91       	lpm	r25, Z+
    2616:	05 90       	lpm	r0, Z+
    2618:	7f e2       	ldi	r23, 0x2F	; 47
    261a:	73 95       	inc	r23
    261c:	e1 18       	sub	r14, r1
    261e:	f1 0a       	sbc	r15, r17
    2620:	43 0b       	sbc	r20, r19
    2622:	56 0b       	sbc	r21, r22
    2624:	c9 0b       	sbc	r28, r25
    2626:	d0 09       	sbc	r29, r0
    2628:	c0 f7       	brcc	.-16     	; 0x261a <__ftoa_engine+0x10a>
    262a:	e1 0c       	add	r14, r1
    262c:	f1 1e       	adc	r15, r17
    262e:	43 1f       	adc	r20, r19
    2630:	56 1f       	adc	r21, r22
    2632:	c9 1f       	adc	r28, r25
    2634:	d0 1d       	adc	r29, r0
    2636:	7e f4       	brtc	.+30     	; 0x2656 <__ftoa_engine+0x146>
    2638:	70 33       	cpi	r23, 0x30	; 48
    263a:	11 f4       	brne	.+4      	; 0x2640 <__ftoa_engine+0x130>
    263c:	8a 95       	dec	r24
    263e:	e6 cf       	rjmp	.-52     	; 0x260c <__ftoa_engine+0xfc>
    2640:	e8 94       	clt
    2642:	01 50       	subi	r16, 0x01	; 1
    2644:	30 f0       	brcs	.+12     	; 0x2652 <__ftoa_engine+0x142>
    2646:	08 0f       	add	r16, r24
    2648:	0a f4       	brpl	.+2      	; 0x264c <__ftoa_engine+0x13c>
    264a:	00 27       	eor	r16, r16
    264c:	02 17       	cp	r16, r18
    264e:	08 f4       	brcc	.+2      	; 0x2652 <__ftoa_engine+0x142>
    2650:	20 2f       	mov	r18, r16
    2652:	23 95       	inc	r18
    2654:	02 2f       	mov	r16, r18
    2656:	7a 33       	cpi	r23, 0x3A	; 58
    2658:	28 f0       	brcs	.+10     	; 0x2664 <__ftoa_engine+0x154>
    265a:	79 e3       	ldi	r23, 0x39	; 57
    265c:	7d 93       	st	X+, r23
    265e:	2a 95       	dec	r18
    2660:	e9 f7       	brne	.-6      	; 0x265c <__ftoa_engine+0x14c>
    2662:	10 c0       	rjmp	.+32     	; 0x2684 <__ftoa_engine+0x174>
    2664:	7d 93       	st	X+, r23
    2666:	2a 95       	dec	r18
    2668:	89 f6       	brne	.-94     	; 0x260c <__ftoa_engine+0xfc>
    266a:	06 94       	lsr	r0
    266c:	97 95       	ror	r25
    266e:	67 95       	ror	r22
    2670:	37 95       	ror	r19
    2672:	17 95       	ror	r17
    2674:	17 94       	ror	r1
    2676:	e1 18       	sub	r14, r1
    2678:	f1 0a       	sbc	r15, r17
    267a:	43 0b       	sbc	r20, r19
    267c:	56 0b       	sbc	r21, r22
    267e:	c9 0b       	sbc	r28, r25
    2680:	d0 09       	sbc	r29, r0
    2682:	98 f0       	brcs	.+38     	; 0x26aa <__ftoa_engine+0x19a>
    2684:	23 95       	inc	r18
    2686:	7e 91       	ld	r23, -X
    2688:	73 95       	inc	r23
    268a:	7a 33       	cpi	r23, 0x3A	; 58
    268c:	08 f0       	brcs	.+2      	; 0x2690 <__ftoa_engine+0x180>
    268e:	70 e3       	ldi	r23, 0x30	; 48
    2690:	7c 93       	st	X, r23
    2692:	20 13       	cpse	r18, r16
    2694:	b8 f7       	brcc	.-18     	; 0x2684 <__ftoa_engine+0x174>
    2696:	7e 91       	ld	r23, -X
    2698:	70 61       	ori	r23, 0x10	; 16
    269a:	7d 93       	st	X+, r23
    269c:	30 f0       	brcs	.+12     	; 0x26aa <__ftoa_engine+0x19a>
    269e:	83 95       	inc	r24
    26a0:	71 e3       	ldi	r23, 0x31	; 49
    26a2:	7d 93       	st	X+, r23
    26a4:	70 e3       	ldi	r23, 0x30	; 48
    26a6:	2a 95       	dec	r18
    26a8:	e1 f7       	brne	.-8      	; 0x26a2 <__ftoa_engine+0x192>
    26aa:	11 24       	eor	r1, r1
    26ac:	ef 90       	pop	r14
    26ae:	ff 90       	pop	r15
    26b0:	0f 91       	pop	r16
    26b2:	1f 91       	pop	r17
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	99 27       	eor	r25, r25
    26ba:	87 fd       	sbrc	r24, 7
    26bc:	90 95       	com	r25
    26be:	08 95       	ret

000026c0 <strnlen_P>:
    26c0:	fc 01       	movw	r30, r24
    26c2:	05 90       	lpm	r0, Z+
    26c4:	61 50       	subi	r22, 0x01	; 1
    26c6:	70 40       	sbci	r23, 0x00	; 0
    26c8:	01 10       	cpse	r0, r1
    26ca:	d8 f7       	brcc	.-10     	; 0x26c2 <strnlen_P+0x2>
    26cc:	80 95       	com	r24
    26ce:	90 95       	com	r25
    26d0:	8e 0f       	add	r24, r30
    26d2:	9f 1f       	adc	r25, r31
    26d4:	08 95       	ret

000026d6 <strcat>:
    26d6:	fb 01       	movw	r30, r22
    26d8:	dc 01       	movw	r26, r24
    26da:	0d 90       	ld	r0, X+
    26dc:	00 20       	and	r0, r0
    26de:	e9 f7       	brne	.-6      	; 0x26da <strcat+0x4>
    26e0:	11 97       	sbiw	r26, 0x01	; 1
    26e2:	01 90       	ld	r0, Z+
    26e4:	0d 92       	st	X+, r0
    26e6:	00 20       	and	r0, r0
    26e8:	e1 f7       	brne	.-8      	; 0x26e2 <strcat+0xc>
    26ea:	08 95       	ret

000026ec <strcmp>:
    26ec:	fb 01       	movw	r30, r22
    26ee:	dc 01       	movw	r26, r24
    26f0:	8d 91       	ld	r24, X+
    26f2:	01 90       	ld	r0, Z+
    26f4:	80 19       	sub	r24, r0
    26f6:	01 10       	cpse	r0, r1
    26f8:	d9 f3       	breq	.-10     	; 0x26f0 <strcmp+0x4>
    26fa:	99 0b       	sbc	r25, r25
    26fc:	08 95       	ret

000026fe <strnlen>:
    26fe:	fc 01       	movw	r30, r24
    2700:	61 50       	subi	r22, 0x01	; 1
    2702:	70 40       	sbci	r23, 0x00	; 0
    2704:	01 90       	ld	r0, Z+
    2706:	01 10       	cpse	r0, r1
    2708:	d8 f7       	brcc	.-10     	; 0x2700 <strnlen+0x2>
    270a:	80 95       	com	r24
    270c:	90 95       	com	r25
    270e:	8e 0f       	add	r24, r30
    2710:	9f 1f       	adc	r25, r31
    2712:	08 95       	ret

00002714 <fputc>:
    2714:	0f 93       	push	r16
    2716:	1f 93       	push	r17
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	fb 01       	movw	r30, r22
    271e:	23 81       	ldd	r18, Z+3	; 0x03
    2720:	21 fd       	sbrc	r18, 1
    2722:	03 c0       	rjmp	.+6      	; 0x272a <fputc+0x16>
    2724:	8f ef       	ldi	r24, 0xFF	; 255
    2726:	9f ef       	ldi	r25, 0xFF	; 255
    2728:	2c c0       	rjmp	.+88     	; 0x2782 <fputc+0x6e>
    272a:	22 ff       	sbrs	r18, 2
    272c:	16 c0       	rjmp	.+44     	; 0x275a <fputc+0x46>
    272e:	46 81       	ldd	r20, Z+6	; 0x06
    2730:	57 81       	ldd	r21, Z+7	; 0x07
    2732:	24 81       	ldd	r18, Z+4	; 0x04
    2734:	35 81       	ldd	r19, Z+5	; 0x05
    2736:	42 17       	cp	r20, r18
    2738:	53 07       	cpc	r21, r19
    273a:	44 f4       	brge	.+16     	; 0x274c <fputc+0x38>
    273c:	a0 81       	ld	r26, Z
    273e:	b1 81       	ldd	r27, Z+1	; 0x01
    2740:	9d 01       	movw	r18, r26
    2742:	2f 5f       	subi	r18, 0xFF	; 255
    2744:	3f 4f       	sbci	r19, 0xFF	; 255
    2746:	31 83       	std	Z+1, r19	; 0x01
    2748:	20 83       	st	Z, r18
    274a:	8c 93       	st	X, r24
    274c:	26 81       	ldd	r18, Z+6	; 0x06
    274e:	37 81       	ldd	r19, Z+7	; 0x07
    2750:	2f 5f       	subi	r18, 0xFF	; 255
    2752:	3f 4f       	sbci	r19, 0xFF	; 255
    2754:	37 83       	std	Z+7, r19	; 0x07
    2756:	26 83       	std	Z+6, r18	; 0x06
    2758:	14 c0       	rjmp	.+40     	; 0x2782 <fputc+0x6e>
    275a:	8b 01       	movw	r16, r22
    275c:	ec 01       	movw	r28, r24
    275e:	fb 01       	movw	r30, r22
    2760:	00 84       	ldd	r0, Z+8	; 0x08
    2762:	f1 85       	ldd	r31, Z+9	; 0x09
    2764:	e0 2d       	mov	r30, r0
    2766:	09 95       	icall
    2768:	89 2b       	or	r24, r25
    276a:	e1 f6       	brne	.-72     	; 0x2724 <fputc+0x10>
    276c:	d8 01       	movw	r26, r16
    276e:	16 96       	adiw	r26, 0x06	; 6
    2770:	8d 91       	ld	r24, X+
    2772:	9c 91       	ld	r25, X
    2774:	17 97       	sbiw	r26, 0x07	; 7
    2776:	01 96       	adiw	r24, 0x01	; 1
    2778:	17 96       	adiw	r26, 0x07	; 7
    277a:	9c 93       	st	X, r25
    277c:	8e 93       	st	-X, r24
    277e:	16 97       	sbiw	r26, 0x06	; 6
    2780:	ce 01       	movw	r24, r28
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	1f 91       	pop	r17
    2788:	0f 91       	pop	r16
    278a:	08 95       	ret

0000278c <__ultoa_invert>:
    278c:	fa 01       	movw	r30, r20
    278e:	aa 27       	eor	r26, r26
    2790:	28 30       	cpi	r18, 0x08	; 8
    2792:	51 f1       	breq	.+84     	; 0x27e8 <__ultoa_invert+0x5c>
    2794:	20 31       	cpi	r18, 0x10	; 16
    2796:	81 f1       	breq	.+96     	; 0x27f8 <__ultoa_invert+0x6c>
    2798:	e8 94       	clt
    279a:	6f 93       	push	r22
    279c:	6e 7f       	andi	r22, 0xFE	; 254
    279e:	6e 5f       	subi	r22, 0xFE	; 254
    27a0:	7f 4f       	sbci	r23, 0xFF	; 255
    27a2:	8f 4f       	sbci	r24, 0xFF	; 255
    27a4:	9f 4f       	sbci	r25, 0xFF	; 255
    27a6:	af 4f       	sbci	r26, 0xFF	; 255
    27a8:	b1 e0       	ldi	r27, 0x01	; 1
    27aa:	3e d0       	rcall	.+124    	; 0x2828 <__ultoa_invert+0x9c>
    27ac:	b4 e0       	ldi	r27, 0x04	; 4
    27ae:	3c d0       	rcall	.+120    	; 0x2828 <__ultoa_invert+0x9c>
    27b0:	67 0f       	add	r22, r23
    27b2:	78 1f       	adc	r23, r24
    27b4:	89 1f       	adc	r24, r25
    27b6:	9a 1f       	adc	r25, r26
    27b8:	a1 1d       	adc	r26, r1
    27ba:	68 0f       	add	r22, r24
    27bc:	79 1f       	adc	r23, r25
    27be:	8a 1f       	adc	r24, r26
    27c0:	91 1d       	adc	r25, r1
    27c2:	a1 1d       	adc	r26, r1
    27c4:	6a 0f       	add	r22, r26
    27c6:	71 1d       	adc	r23, r1
    27c8:	81 1d       	adc	r24, r1
    27ca:	91 1d       	adc	r25, r1
    27cc:	a1 1d       	adc	r26, r1
    27ce:	20 d0       	rcall	.+64     	; 0x2810 <__ultoa_invert+0x84>
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <__ultoa_invert+0x48>
    27d2:	68 94       	set
    27d4:	3f 91       	pop	r19
    27d6:	2a e0       	ldi	r18, 0x0A	; 10
    27d8:	26 9f       	mul	r18, r22
    27da:	11 24       	eor	r1, r1
    27dc:	30 19       	sub	r19, r0
    27de:	30 5d       	subi	r19, 0xD0	; 208
    27e0:	31 93       	st	Z+, r19
    27e2:	de f6       	brtc	.-74     	; 0x279a <__ultoa_invert+0xe>
    27e4:	cf 01       	movw	r24, r30
    27e6:	08 95       	ret
    27e8:	46 2f       	mov	r20, r22
    27ea:	47 70       	andi	r20, 0x07	; 7
    27ec:	40 5d       	subi	r20, 0xD0	; 208
    27ee:	41 93       	st	Z+, r20
    27f0:	b3 e0       	ldi	r27, 0x03	; 3
    27f2:	0f d0       	rcall	.+30     	; 0x2812 <__ultoa_invert+0x86>
    27f4:	c9 f7       	brne	.-14     	; 0x27e8 <__ultoa_invert+0x5c>
    27f6:	f6 cf       	rjmp	.-20     	; 0x27e4 <__ultoa_invert+0x58>
    27f8:	46 2f       	mov	r20, r22
    27fa:	4f 70       	andi	r20, 0x0F	; 15
    27fc:	40 5d       	subi	r20, 0xD0	; 208
    27fe:	4a 33       	cpi	r20, 0x3A	; 58
    2800:	18 f0       	brcs	.+6      	; 0x2808 <__ultoa_invert+0x7c>
    2802:	49 5d       	subi	r20, 0xD9	; 217
    2804:	31 fd       	sbrc	r19, 1
    2806:	40 52       	subi	r20, 0x20	; 32
    2808:	41 93       	st	Z+, r20
    280a:	02 d0       	rcall	.+4      	; 0x2810 <__ultoa_invert+0x84>
    280c:	a9 f7       	brne	.-22     	; 0x27f8 <__ultoa_invert+0x6c>
    280e:	ea cf       	rjmp	.-44     	; 0x27e4 <__ultoa_invert+0x58>
    2810:	b4 e0       	ldi	r27, 0x04	; 4
    2812:	a6 95       	lsr	r26
    2814:	97 95       	ror	r25
    2816:	87 95       	ror	r24
    2818:	77 95       	ror	r23
    281a:	67 95       	ror	r22
    281c:	ba 95       	dec	r27
    281e:	c9 f7       	brne	.-14     	; 0x2812 <__ultoa_invert+0x86>
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	61 05       	cpc	r22, r1
    2824:	71 05       	cpc	r23, r1
    2826:	08 95       	ret
    2828:	9b 01       	movw	r18, r22
    282a:	ac 01       	movw	r20, r24
    282c:	0a 2e       	mov	r0, r26
    282e:	06 94       	lsr	r0
    2830:	57 95       	ror	r21
    2832:	47 95       	ror	r20
    2834:	37 95       	ror	r19
    2836:	27 95       	ror	r18
    2838:	ba 95       	dec	r27
    283a:	c9 f7       	brne	.-14     	; 0x282e <__ultoa_invert+0xa2>
    283c:	62 0f       	add	r22, r18
    283e:	73 1f       	adc	r23, r19
    2840:	84 1f       	adc	r24, r20
    2842:	95 1f       	adc	r25, r21
    2844:	a0 1d       	adc	r26, r0
    2846:	08 95       	ret

00002848 <_exit>:
    2848:	f8 94       	cli

0000284a <__stop_program>:
    284a:	ff cf       	rjmp	.-2      	; 0x284a <__stop_program>
